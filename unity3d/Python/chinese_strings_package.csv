文件,中文字符串,替换值
Editor\Connection\McpService.cs,使用自定义异常来标识这是正常的连接关闭,Use a custom exception to indicate that this is a normal connection closure
Editor\Connection\McpService.cs,手动从大端序字节数组转换为长度值,Manually convert a big-endian byte array to a length value
Editor\Connection\McpService.cs,尝试序列化一个简化的错误响应,Attempt to serialize a simplified error response
Editor\Connection\McpService.cs,从流中读取指定字节数的数据,Read a specified number of bytes from the stream
Editor\Connection\McpService.cs,记录错误执行结果时发生错误,Error occurred while logging error execution result
Editor\Connection\McpService.cs,没有缓存则反射查找并缓存,Reflect to find and cache if not already cached
Editor\Connection\McpService.cs,根据命令类型决定记录方式,Determine logging method based on command type
Editor\Connection\McpService.cs,使用长度前缀协议接收数据,Receive data using length-prefixed protocol
Editor\Connection\McpService.cs,手动构建大端序字节数组,Manually construct a big-endian byte array
Editor\Connection\McpService.cs,从连接列表中移除客户端,Remove client from connection list
Editor\Connection\McpService.cs,异步执行命令时发生错误,Error occurred during asynchronous command execution
Editor\Connection\McpService.cs,记录执行结果时发生错误,Error occurred while logging execution result
Editor\Connection\McpService.cs,接收带长度前缀的数据,Receive data with length prefix
Editor\Connection\McpService.cs,开始反射查找工具实例,Start reflection to find tool instance
Editor\Connection\McpService.cs,发送带长度前缀的数据,Send data with length prefix
Editor\Connection\McpService.cs,添加客户端到连接列表,Add client to connection list
Editor\Connection\McpService.cs,客户端连接配置完成,Client connection configuration completed
Editor\Connection\McpService.cs,读取指定长度的数据,Read data of specified length
Editor\Connection\McpService.cs,清空客户端连接信息,Clear client connection information
Editor\Connection\McpService.cs,从缓存中获取到工具,Retrieve tool from cache
Editor\Connection\McpService.cs,客户端主动断开连接,Client actively disconnected
Editor\Connection\McpService.cs,记录错误执行结果到,Log error execution result to
Editor\Connection\McpService.cs,通常表示连接已断开,Usually indicates that the connection is closed
Editor\Connection\McpService.cs,更新客户端活动状态,Update client activity status
Editor\Connection\McpService.cs,统一的日志输出方法,Unified log output method
Editor\Connection\McpService.cs,客户端连接状态跟踪,Client connection state tracking
Editor\Connection\McpService.cs,停止服务时发生错误,Error occurred while stopping the service
Editor\Connection\McpService.cs,执行命令时发生错误,Error occurred while executing command
Editor\Connection\McpService.cs,处理命令时发生错误,Error occurred while processing command
Editor\Connection\McpService.cs,接收长度前缀字节,Receiving length-prefixed bytes
Editor\Connection\McpService.cs,长度前缀字节详细,Details of length-prefixed bytes
Editor\Connection\McpService.cs,命令队列处理完成,Command queue processing complete
Editor\Connection\McpService.cs,监听器已成功启动,Listener successfully started
Editor\Connection\McpService.cs,类中添加日志开关,Add log switch in class
Editor\Connection\McpService.cs,所有端口都被占用,All ports are occupied
Editor\Connection\McpService.cs,开始异步处理命令,Begin processing commands asynchronously
Editor\Connection\McpService.cs,客户端连接已关闭,Client connection closed
Editor\Connection\McpService.cs,开始处理命令队列,Start processing command queue
Editor\Connection\McpService.cs,监听循环已启动,Listener loop started
Editor\Connection\McpService.cs,监听循环已结束,Listener loop ended
Editor\Connection\McpService.cs,记录执行结果到,Logging execution result to
Editor\Connection\McpService.cs,序列化响应失败,Failed to serialize response
Editor\Connection\McpService.cs,错误响应已生成,Error response generated
Editor\Connection\McpService.cs,服务已在运行中,Service is already running
Editor\Connection\McpService.cs,监听循环已开始,Listener loop has started
Editor\Connection\McpService.cs,命令反序列化为,Command deserialized as
Editor\Connection\McpService.cs,请确保没有其他,Please ensure there are no others
Editor\Connection\McpService.cs,记录不同的日志,Log different messages
Editor\Connection\McpService.cs,尝试下一个端口,Try next port
Editor\Connection\McpService.cs,正常的连接关闭,Normal connection closure
Editor\Connection\McpService.cs,等待客户端连接,Waiting for client connection
Editor\Connection\McpService.cs,错误响应已设置,Error response set
Editor\Connection\McpService.cs,客户端处理异常,Exception occurred while handling client
Editor\Connection\McpService.cs,让它在后台执行,Run it in the background
Editor\Connection\McpService.cs,命令处理已注册,Command handler registered
Editor\Connection\McpService.cs,命令处理已注销,Command handler unregistered
Editor\Connection\McpService.cs,无法在端口范围,Cannot operate within port range
Editor\Connection\McpService.cs,命令已加入队列,Command added to queue
Editor\Connection\McpService.cs,连接关闭异常,Connection closed unexpectedly
Editor\Connection\McpService.cs,中获取到工具,Tool obtained from
Editor\Connection\McpService.cs,开始执行命令,Begin executing command
Editor\Connection\McpService.cs,工具执行完成,Tool execution completed
Editor\Connection\McpService.cs,请求获取工具,Request to fetch tool
Editor\Connection\McpService.cs,客户端信息类,Client info class
Editor\Connection\McpService.cs,命令处理完成,Command processing finished
Editor\Connection\McpService.cs,监听器已关闭,Listener closed
Editor\Connection\McpService.cs,命令执行失败,Command execution failed
Editor\Connection\McpService.cs,命令类型为空,Command type is empty
Editor\Connection\McpService.cs,接收到长度为,Received length is
Editor\Connection\McpService.cs,接收到空命令,Received empty command
Editor\Connection\McpService.cs,通用函数执行,General function execution
Editor\Connection\McpService.cs,工具缓存完成,Tool cache initialized
Editor\Connection\McpService.cs,防止内存问题,Prevent memory issues
Editor\Connection\McpService.cs,命令执行成功,Command executed successfully
Editor\Connection\McpService.cs,工具缓存为空,Tool cache is empty
Editor\Connection\McpService.cs,字节长度前缀,Byte length prefix
Editor\Connection\McpService.cs,读取日志设置,Read log settings
Editor\Connection\McpService.cs,其他命令类型,Other command types
Editor\Connection\McpService.cs,静态工具类型,Static tool type
Editor\Connection\McpService.cs,异步执行命令,Execute command asynchronously
Editor\Connection\McpService.cs,监听器已停止,Listener stopped
Editor\Connection\McpService.cs,实例正在运行,Instance is running
Editor\Connection\McpService.cs,网络写入错误,Network write error
Editor\Connection\McpService.cs,但不等待结果,But do not wait for result
Editor\Connection\McpService.cs,客户端已连接,Client connected
Editor\Connection\McpService.cs,使用默认方式,Use default mode
Editor\Connection\McpService.cs,响应已发送,Response sent
Editor\Connection\McpService.cs,接收到命令,Command received
Editor\Connection\McpService.cs,尝试在端口,Trying on port
Editor\Connection\McpService.cs,监听器错误,Listener error
Editor\Connection\McpService.cs,类型和实例,Type and instance
Editor\Connection\McpService.cs,记录具体的,Logging details
Editor\Connection\McpService.cs,真正的错误,Actual error
Editor\Connection\McpService.cs,服务已停止,Service stopped
Editor\Connection\McpService.cs,未找到工具,Tool not found
Editor\Connection\McpService.cs,修正为标准,Corrected to standard
Editor\Connection\McpService.cs,消息过大,Message too large
Editor\Connection\McpService.cs,安全检查,Security check
Editor\Connection\McpService.cs,执行命令,Execute command
Editor\Connection\McpService.cs,启动完成,Startup completed
Editor\Connection\McpService.cs,正在停止,Stopping
Editor\Connection\McpService.cs,已被占用,Already in use
Editor\Connection\McpService.cs,队列长度,Queue length
Editor\Connection\McpService.cs,找到工具,Tool found
Editor\Connection\McpService.cs,命令参数,Command parameters
Editor\Connection\McpService.cs,正常关闭,Closed normally
Editor\Connection\McpService.cs,可用工具,Available tools
Editor\Connection\McpService.cs,辅助方法,Helper method
Editor\Connection\McpService.cs,不是错误,Not an error
Editor\Connection\McpService.cs,正在启动,Starting
Editor\Connection\McpService.cs,反序列化,Deserialization
Editor\Connection\McpService.cs,开始解析,Start parsing
Editor\Connection\McpService.cs,发送消息,Send message
Editor\Connection\McpService.cs,处理命令,Processing command
Editor\Connection\McpService.cs,最后错误,Last error
Editor\Connection\McpService.cs,启动失败,Startup failed
Editor\Connection\McpService.cs,缓存工具,Cached tools
Editor\Connection\McpService.cs,动态判断,Dynamically determine
Editor\Connection\McpService.cs,监听器,Listener
Editor\Connection\McpService.cs,的消息,Message of
Editor\Connection\McpService.cs,成功时,On success
Editor\Connection\McpService.cs,名拼接,Name concatenation
Editor\Connection\McpService.cs,内启动,Internal startup
Editor\Connection\McpService.cs,默认为,Default to
Editor\Connection\McpService.cs,已处理,Processed
Editor\Connection\McpService.cs,共缓存,Total cached
Editor\Connection\McpService.cs,个工具,tools
Editor\Connection\McpService.cs,而不是,Instead of
Editor\Connection\McpService.cs,个命令,commands
Editor\Connection\McpService.cs,结果,Result
Editor\Connection\McpService.cs,记录,Record
Editor\Connection\McpService.cs,使用,Use
Editor\Connection\McpService.cs,缓存,Cache
Editor\Connection\McpService.cs,失败,Failure
Editor\Connection\McpService.cs,端口,Port
Editor\Connection\McpService.cs,读取,Read
Editor\Connection\McpService.cs,限制,Limit
Editor\Connection\McpService.cs,命令,Command
Editor\Connection\McpService.cs,为空,Is empty
Editor\Connection\McpService.cs,无效,Invalid
Editor\Connection\McpService.cs,中的,In
Editor\Connection\McpService.cs,启动,Start
Editor\Connection\McpService.cs,最大,Maximum
Editor\Connection\McpService.cs,实例,Instance
Editor\Connection\McpService.cs,获取,Get
Editor\Connection\McpService.cs,根据,According to
Editor\Connection\McpService.cs,处理,Handle
Editor\Connection\McpService.cs,字段,Field
Editor\Connection\McpService.cs,格式,Format
Editor\Connection\McpService.cs,在,At
Editor\Connection\McpService.cs,和,And
Editor\Connection\McpService.cs,从,From
Editor\Executer\BatchCall.cs,批量调用初始化过程中发生未预期错误,Unexpected error during batch call initialization
Editor\Executer\BatchCall.cs,方法查找或执行设置过程中的异常,Exception during method lookup or execution setup
Editor\Executer\BatchCall.cs,异步顺序执行指定索引的函数,Asynchronously execute function at specified index in sequence
Editor\Executer\BatchCall.cs,只有所有调用都成功时才返回,Only returns if all calls succeed
Editor\Executer\BatchCall.cs,将中断执行并返回错误信息,Execution will be interrupted and error returned
Editor\Executer\BatchCall.cs,个函数调用必须是对象类型,Each function call must be an object
Editor\Executer\BatchCall.cs,保存当前函数的执行结果,Save current function's execution result
Editor\Executer\BatchCall.cs,统计成功和失败的调用数,Count successful and failed calls
Editor\Executer\BatchCall.cs,如果所有函数都执行完毕,If all functions are executed
Editor\Executer\BatchCall.cs,异步执行单个函数调用,Asynchronously execute a single function call
Editor\Executer\BatchCall.cs,检查执行结果是否成功,Check if the execution result is successful
Editor\Executer\BatchCall.cs,验证函数调用对象格式,Validate function call object format
Editor\Executer\BatchCall.cs,完成后递归执行下一个,Recursively execute the next after completion
Editor\Executer\BatchCall.cs,查找对应的工具方法,Find the corresponding tool method
Editor\Executer\BatchCall.cs,或无效结果视为失败,Or invalid result as failure
Editor\Executer\BatchCall.cs,字段必须是对象类型,The field must be an object
Editor\Executer\BatchCall.cs,调用回调并传递结果,Invoke callback and pass result
Editor\Executer\BatchCall.cs,创建中断执行的响应,Create response for interrupted execution
Editor\Executer\BatchCall.cs,执行过程中出现异常,Exception occurred during execution
Editor\Executer\BatchCall.cs,继续执行下一个函数,Continue to next function
Editor\Executer\BatchCall.cs,中断执行并返回错误,Interrupt execution and return error
Editor\Executer\BatchCall.cs,如果没有函数调用,If there are no function calls
Editor\Executer\BatchCall.cs,如果遇到执行错误,If execution error encountered
Editor\Executer\BatchCall.cs,开始异步顺序执行,Start asynchronous sequential execution
Editor\Executer\BatchCall.cs,个函数时遇到错误,Error when executing function
Editor\Executer\BatchCall.cs,确保方法已注册,Ensure the method is registered
Editor\Executer\BatchCall.cs,个函数调用失败,Function call failed
Editor\Executer\BatchCall.cs,创建执行上下文,Create execution context
Editor\Executer\BatchCall.cs,字段无效或为空,Field is invalid or empty
Editor\Executer\BatchCall.cs,初始化结果列表,Initialize the result list
Editor\Executer\BatchCall.cs,检查结果中的,Check in the result
Editor\Executer\BatchCall.cs,中断后续执行,Interrupt subsequent execution
Editor\Executer\BatchCall.cs,批量执行中断,Batch execution interrupted
Editor\Executer\BatchCall.cs,如果执行失败,If execution failed
Editor\Executer\BatchCall.cs,返回最终结果,Return the final result
Editor\Executer\BatchCall.cs,个函数调用的,Function call of
Editor\Executer\BatchCall.cs,异步执行方法,Asynchronous execution method
Editor\Executer\BatchCall.cs,应该是对象,Should be object
Editor\Executer\BatchCall.cs,直接返回,Return directly
Editor\Executer\BatchCall.cs,中断执行,Interrupt execution
Editor\Executer\BatchCall.cs,成功执行,Executed successfully
Editor\Executer\BatchCall.cs,异步版本,Asynchronous version
Editor\Executer\BatchCall.cs,执行到第,Executed to
Editor\Executer\BatchCall.cs,字段,Field
Editor\Executer\BatchCall.cs,提取,Extract
Editor\Executer\BatchCall.cs,验证,Validate
Editor\Executer\BatchCall.cs,第,No.
Editor\Executer\BatchCall.cs,和,And
Editor\Executer\DualStateMethodBase.cs,所有需要双阶段处理的工具方法类应继承此类,All tool method classes requiring dual-phase processing should inherit from this class
Editor\Executer\DualStateMethodBase.cs,子类必须实现此方法来定义目标定位逻辑,Subclass must implement this method for target location logic
Editor\Executer\DualStateMethodBase.cs,子类必须实现此方法来定义操作执行逻辑,Subclass must implement this method for operation execution logic
Editor\Executer\DualStateMethodBase.cs,子类可用此方法记录执行过程中的信息,Subclass can use this method to log information during execution
Editor\Executer\DualStateMethodBase.cs,提供基于两棵状态树的方法调用框架,Provides a method invocation framework based on two state trees
Editor\Executer\DualStateMethodBase.cs,子类必须实现此方法来定义参数键,Subclass must implement this method to define parameter keys
Editor\Executer\DualStateMethodBase.cs,定义该方法接受的所有可能参数键,Define all possible parameter keys accepted by this method
Editor\Executer\DualStateMethodBase.cs,用于调试和可视化状态路由逻辑,For debugging and visualizing the state routing logic
Editor\Executer\DualStateMethodBase.cs,创建执行操作状态树的抽象方法,Abstract method for creating the operation execution state tree
Editor\Executer\DualStateMethodBase.cs,创建目标定位状态树的抽象方法,Abstract method for creating the target locating state tree
Editor\Executer\DualStateMethodBase.cs,配置好的目标定位状态树实例,Configured target locating state tree instance
Editor\Executer\DualStateMethodBase.cs,配置好的执行操作状态树实例,Configured operation execution state tree instance
Editor\Executer\DualStateMethodBase.cs,然后通过执行操作树执行操作,Then perform operations through the execution state tree
Editor\Executer\DualStateMethodBase.cs,首先通过目标定位树找到目标,First locate the target via the target state tree
Editor\Executer\DualStateMethodBase.cs,当前方法支持的参数键列表,List of parameter keys supported by this method
Editor\Executer\DualStateMethodBase.cs,创建参数键列表的抽象方法,Abstract method to create parameter key list
Editor\Executer\DualStateMethodBase.cs,创建执行上下文并执行操作,Create execution context and perform operation
Editor\Executer\DualStateMethodBase.cs,检查目标定位阶段的错误,Check errors in target locating phase
Editor\Executer\DualStateMethodBase.cs,检查执行操作阶段的错误,Check errors in operation execution phase
Editor\Executer\DualStateMethodBase.cs,使用目标定位树找到目标,Use the target state tree to find target
Editor\Executer\DualStateMethodBase.cs,第二棵树用于执行操作,The second tree is for operation execution
Editor\Executer\DualStateMethodBase.cs,否则返回原始目标结果,Otherwise return original target result
Editor\Executer\DualStateMethodBase.cs,第一棵树用于目标定位,The first tree is for target location
Editor\Executer\DualStateMethodBase.cs,子类必须实现此属性,Subclass must implement this property
Editor\Executer\DualStateMethodBase.cs,方法调用的参数对象,Parameter object for method invocation
Editor\Executer\DualStateMethodBase.cs,文档生成和参数验证,Documentation generation and parameter validation
Editor\Executer\DualStateMethodBase.cs,目标定位状态树实例,Target locating state tree instance
Editor\Executer\DualStateMethodBase.cs,执行操作状态树实例,Operation execution state tree instance
Editor\Executer\DualStateMethodBase.cs,确保状态树已初始化,Ensure that state trees are initialized
Editor\Executer\DualStateMethodBase.cs,双状态树的文本表示,Text representation of dual state trees
Editor\Executer\DualStateMethodBase.cs,用于定位操作目标,For locating operation target
Editor\Executer\DualStateMethodBase.cs,表示已是最终响应,Indicates final response
Editor\Executer\DualStateMethodBase.cs,双状态树方法基类,Dual state tree method base class
Editor\Executer\DualStateMethodBase.cs,用于执行具体操作,For performing specific operations
Editor\Executer\DualStateMethodBase.cs,要记录的日志消息,Log message to record
Editor\Executer\DualStateMethodBase.cs,供后续操作树处理,For subsequent operation tree processing
Editor\Executer\DualStateMethodBase.cs,处理目标定位结果,Handle results of target location
Editor\Executer\DualStateMethodBase.cs,预览双状态树结构,Preview dual state tree structure
Editor\Executer\DualStateMethodBase.cs,首次访问时才创建,Create only on first access
Editor\Executer\DualStateMethodBase.cs,如果目标结果是,If target result is
Editor\Executer\DualStateMethodBase.cs,字段的匿名对象,Field's anonymous object
Editor\Executer\DualStateMethodBase.cs,记录信息日志,Log informational message
Editor\Executer\DualStateMethodBase.cs,异步执行完成,Asynchronous execution completed
Editor\Executer\DualStateMethodBase.cs,执行工具方法,Execute tool method
Editor\Executer\DualStateMethodBase.cs,避免重复创建,Avoid duplicate creation
Editor\Executer\DualStateMethodBase.cs,的缓存字段,Cached field of
Editor\Executer\DualStateMethodBase.cs,分两个阶段,In two phases
Editor\Executer\DualStateMethodBase.cs,执行目标树,Execute target tree
Editor\Executer\DualStateMethodBase.cs,懒加载模式,Lazy loading mode
Editor\Executer\DualStateMethodBase.cs,判断是否为,Determine if is
Editor\Executer\DualStateMethodBase.cs,则直接返回,Then return directly
Editor\Executer\DualStateMethodBase.cs,执行操作树,Execute operation tree
Editor\Executer\DualStateMethodBase.cs,完成执行,Execution finished
Editor\Executer\DualStateMethodBase.cs,第一阶段,First phase
Editor\Executer\DualStateMethodBase.cs,第二阶段,Second phase
Editor\Executer\DualStateMethodBase.cs,时输出,Output when
Editor\Executer\DualStateMethodBase.cs,即包含,That includes
Editor\Executer\DualStateMethodBase.cs,接口,Interface
Editor\Executer\DualStateMethodBase.cs,字段,Field
Editor\Executer\DualStateMethodBase.cs,仅在,Only at
Editor\Executer\DualStateMethodBase.cs,类型,Type
Editor\Executer\DualStateMethodBase.cs,用于,Used for
Editor\Executer\DualStateMethodBase.cs,实现,Implement
Editor\Executer\DualStateMethodBase.cs,数组,Array
Editor\Executer\DualStateMethodBase.cs,为,As
Editor\Executer\IToolMethod.cs,所有具体工具类都应实现此接口,All concrete tool classes must implement this interface
Editor\Executer\IToolMethod.cs,工具方法接口,Tool method interface
Editor\Executer\IToolMethod.cs,保持向后兼容,Remain backward compatible
Editor\Executer\IToolMethod.cs,执行工具方法,Execute tool method
Editor\Executer\IToolMethod.cs,参数对象,Parameter object
Editor\Executer\IToolMethod.cs,同步版本,Synchronous version
Editor\Executer\IToolMethod.cs,预览方法,Preview method
Editor\Executer\IToolMethod.cs,执行结果,Execution result
Editor\Executer\IToolMethod.cs,预览结果,Preview result
Editor\Executer\McpTool.cs,保持向后兼容,Remain backward compatible
Editor\Executer\McpTool.cs,或其他类型,Or other type
Editor\Executer\McpTool.cs,命令参数,Command parameters
Editor\Executer\McpTool.cs,同步版本,Synchronous version
Editor\Executer\McpTool.cs,处理命令,Process command
Editor\Executer\McpTool.cs,处理结果,Process result
Editor\Executer\McpTool.cs,可以是,Can be
Editor\Executer\McpTool.cs,类型,Type
Editor\Executer\SingleCall.cs,查找对应的工具方法,Find the corresponding tool method
Editor\Executer\SingleCall.cs,确保方法已注册,Ensure method is registered
Editor\Executer\SingleCall.cs,调用工具的,Call tool's
Editor\Executer\SingleCall.cs,同步版本,Synchronous version
Editor\Executer\SingleCall.cs,方法,Method
Editor\Executer\StateMethodBase.cs,子类必须实现此方法来定义状态路由逻辑,Subclass must implement this method to define state routing logic
Editor\Executer\StateMethodBase.cs,子类可用此方法记录执行过程中的信息,Subclass can use this method to log information during execution
Editor\Executer\StateMethodBase.cs,通过状态树路由到对应的处理方法,Route to the corresponding handler via the state tree
Editor\Executer\StateMethodBase.cs,子类必须实现此方法来定义参数键,Subclass must implement this method to define parameter keys
Editor\Executer\StateMethodBase.cs,若状态树执行失败则返回错误响应,Return error response if state tree execution fails
Editor\Executer\StateMethodBase.cs,定义该方法接受的所有可能参数键,Define all possible parameter keys accepted by this method
Editor\Executer\StateMethodBase.cs,用于调试和可视化状态路由逻辑,For debugging and visualizing state routing logic
Editor\Executer\StateMethodBase.cs,提供基于状态树的方法调用框架,Provide method call framework based on state tree
Editor\Executer\StateMethodBase.cs,所有工具方法类应继承此类,All tool method classes should inherit from this class
Editor\Executer\StateMethodBase.cs,当前方法支持的参数键列表,List of parameter keys supported by this method
Editor\Executer\StateMethodBase.cs,创建参数键列表的抽象方法,Abstract method for creating parameter key list
Editor\Executer\StateMethodBase.cs,如果结果为空且有错误信息,If the result is empty and there is an error message
Editor\Executer\StateMethodBase.cs,方法来定义状态路由逻辑,Method to define state routing logic
Editor\Executer\StateMethodBase.cs,用于路由和执行方法调用,For routing and executing method calls
Editor\Executer\StateMethodBase.cs,创建状态树的抽象方法,Abstract method for creating state tree
Editor\Executer\StateMethodBase.cs,子类必须实现此属性,Subclass must implement this property
Editor\Executer\StateMethodBase.cs,方法调用的参数对象,Parameter object for method call
Editor\Executer\StateMethodBase.cs,文档生成和参数验证,Documentation generation and parameter validation
Editor\Executer\StateMethodBase.cs,配置好的状态树实例,Configured state tree instance
Editor\Executer\StateMethodBase.cs,确保状态树已初始化,Ensure that the state tree is initialized
Editor\Executer\StateMethodBase.cs,要记录的日志消息,Log message to record
Editor\Executer\StateMethodBase.cs,状态树的文本表示,Text representation of state tree
Editor\Executer\StateMethodBase.cs,首次访问时才创建,Only create upon first access
Editor\Executer\StateMethodBase.cs,预览状态树结构,Preview state tree structure
Editor\Executer\StateMethodBase.cs,记录信息日志,Log informational message
Editor\Executer\StateMethodBase.cs,避免重复创建,Avoid duplicate creation
Editor\Executer\StateMethodBase.cs,状态方法基类,State method base class
Editor\Executer\StateMethodBase.cs,返回错误响应,Return error response
Editor\Executer\StateMethodBase.cs,执行工具方法,Execute tool method
Editor\Executer\StateMethodBase.cs,的缓存字段,Cached field of
Editor\Executer\StateMethodBase.cs,懒加载模式,Lazy loading mode
Editor\Executer\StateMethodBase.cs,状态树实例,State tree instance
Editor\Executer\StateMethodBase.cs,同步版本,Synchronous version
Editor\Executer\StateMethodBase.cs,异步执行,Asynchronous execution
Editor\Executer\StateMethodBase.cs,执行结果,Execution result
Editor\Executer\StateMethodBase.cs,时输出,Output when
Editor\Executer\StateMethodBase.cs,并实现,And implement
Editor\Executer\StateMethodBase.cs,接口,Interface
Editor\Executer\StateMethodBase.cs,实现,Implement
Editor\Executer\StateMethodBase.cs,数组,Array
Editor\Executer\StateMethodBase.cs,仅在,Only at
Editor\Executer\StateMethodBase.cs,用于,Used for
Editor\Executer\StateMethodBase.cs,为,As
Editor\Executer\ToolNameAttribute.cs,用于标记工具方法类的名称和分组的特性,Used to mark the name and group attribute of a tool method class
Editor\Executer\ToolNameAttribute.cs,优先级高于通过类名自动转换的,Priority is higher than automatic conversion by class name
Editor\Executer\ToolNameAttribute.cs,工具方法的分组名称,Group name for tool method
Editor\Executer\ToolNameAttribute.cs,为空则使用默认分组,Use default group if empty
Editor\Executer\ToolNameAttribute.cs,工具方法的名称,Tool method name
Editor\Executer\ToolNameAttribute.cs,资源管理,Resource management
Editor\Executer\ToolNameAttribute.cs,层级管理,Hierarchy management
Editor\Executer\ToolNameAttribute.cs,通常使用,Normally used
Editor\Executer\ToolNameAttribute.cs,未分组,Not grouped
Editor\Executer\ToolNameAttribute.cs,初始化,Initialization
Editor\Executer\ToolNameAttribute.cs,格式,Format
Editor\Executer\ToolNameAttribute.cs,命名,Naming
Editor\Executer\ToolNameAttribute.cs,如,Such as
Editor\Executer\ToolNameAttribute.cs,等,Etc.
Editor\Executer\ToolsCall.cs,使用正则表达式在大写字母前添加下划线,Use regex to add underscores before uppercase letters
Editor\Executer\ToolsCall.cs,但我们可以获取成功加载的类型,But we can obtain the successfully loaded types
Editor\Executer\ToolsCall.cs,通过反射查找所有程序集中实现,Find all implementations in all assemblies via reflection
Editor\Executer\ToolsCall.cs,某些程序集可能无法完全加载,Some assemblies may not load completely
Editor\Executer\ToolsCall.cs,获取所有已注册的方法名称,Get all registered method names
Editor\Executer\ToolsCall.cs,确保所有方法通过反射注册,Ensure all methods are registered by reflection
Editor\Executer\ToolsCall.cs,遍历所有已加载的程序集,Iterate through all loaded assemblies
Editor\Executer\ToolsCall.cs,获取指定名称的工具方法,Get tool method by specified name
Editor\Executer\ToolsCall.cs,获取已注册的方法实例,Get registered method instance
Editor\Executer\ToolsCall.cs,忽略无法访问的程序集,Ignore inaccessible assemblies
Editor\Executer\ToolsCall.cs,已经注册的工具实例,Already registered tool instance
Editor\Executer\ToolsCall.cs,否则将类名转换为,Otherwise convert class name to
Editor\Executer\ToolsCall.cs,如果未找到则返回,Return if not found
Editor\Executer\ToolsCall.cs,供外部调用使用,For external invocation
Editor\Executer\ToolsCall.cs,否则转换类名为,Otherwise convert class name to
Editor\Executer\ToolsCall.cs,然后转换为小写,Then convert to lowercase
Editor\Executer\ToolsCall.cs,手动注册方法,Manually register method
Editor\Executer\ToolsCall.cs,创建方法实例,Create method instance
Editor\Executer\ToolsCall.cs,命名法转换为,Naming convention conversion to
Editor\Executer\ToolsCall.cs,双重检查锁定,Double-check locking
Editor\Executer\ToolsCall.cs,工具方法实例,Tool method instance
Editor\Executer\ToolsCall.cs,获取方法名称,Get method name
Editor\Executer\ToolsCall.cs,指定的名称,Specified name
Editor\Executer\ToolsCall.cs,供外部调用,For external call
Editor\Executer\ToolsCall.cs,检查是否有,Check if there is
Editor\Executer\ToolsCall.cs,确保不为,Ensure not
Editor\Executer\ToolsCall.cs,工具名称,Tool name
Editor\Executer\ToolsCall.cs,静态方法,Static method
Editor\Executer\ToolsCall.cs,接口的类,Class implementing the interface
Editor\Executer\ToolsCall.cs,内部方法,Internal method
Editor\Executer\ToolsCall.cs,同步版本,Synchronous version
Editor\Executer\ToolsCall.cs,工具实例,Tool instance
Editor\Executer\ToolsCall.cs,方法名称,Method name
Editor\Executer\ToolsCall.cs,方法类型,Method type
Editor\Executer\ToolsCall.cs,方法实例,Method instance
Editor\Executer\ToolsCall.cs,优先使用,Preferred use
Editor\Executer\ToolsCall.cs,命名法,Naming convention
Editor\Executer\ToolsCall.cs,例如,For example
Editor\Executer\ToolsCall.cs,名称,Name
Editor\Executer\ToolsCall.cs,形式,Form
Editor\Executer\ToolsCall.cs,将,Will
Editor\GUI\McpServiceGUI.cs,检查端口是否被外部进程占用时发生错误,Error occurred while checking if port is occupied by external process
Editor\GUI\McpServiceGUI.cs,请检查是否有其他进程占用了所有端口,Please check if other processes are occupying all ports
Editor\GUI\McpServiceGUI.cs,防止连续多次点击被判定为多个双击,Prevent multiple consecutive clicks from being treated as double-clicks
Editor\GUI\McpServiceGUI.cs,动态计算可用高度并应用到滚动视图,Dynamically calculate available height and apply to scroll view
Editor\GUI\McpServiceGUI.cs,根据参数名和描述推断类型和示例值,Infer type and example value from parameter name and description
Editor\GUI\McpServiceGUI.cs,窗口中定位到方法所在的脚本文件,Locate the script file of the method in the window
Editor\GUI\McpServiceGUI.cs,动态计算工具方法列表的可用高度,Dynamically calculate available height of tool method list
Editor\GUI\McpServiceGUI.cs,确保该方法在字典中有一个条目,Ensure the method has an entry in the dictionary
Editor\GUI\McpServiceGUI.cs,检查是否存在上次点击时间记录,Check whether there is a last click time record
Editor\GUI\McpServiceGUI.cs,如果是可选参数且无法推断类型,If it is optional and type cannot be inferred
Editor\GUI\McpServiceGUI.cs,计算按钮和程序集标签的位置,Calculate position of button and assembly label
Editor\GUI\McpServiceGUI.cs,根据参数名和描述生成示例值,Generate example value by parameter name and description
Editor\GUI\McpServiceGUI.cs,处理方法帮助按钮的点击事件,Handle click event of method help button
Editor\GUI\McpServiceGUI.cs,确保分组在折叠字典中有条目,Ensure group has an entry in the collapse dictionary
Editor\GUI\McpServiceGUI.cs,处理方法调试按钮的点击事件,Handle click event of method debug button
Editor\GUI\McpServiceGUI.cs,提供所有绘制功能的静态方法,Provide all drawing functionality as static methods
Editor\GUI\McpServiceGUI.cs,检查是否有任何端口在使用,Check if any port is in use
Editor\GUI\McpServiceGUI.cs,必需参数默认返回空字符串,Required parameters default return empty string
Editor\GUI\McpServiceGUI.cs,尝试直接使用类型名称查找,Try to look up directly by type name
Editor\GUI\McpServiceGUI.cs,查找并杀死占用端口的进程,Find and kill process occupying the port
Editor\GUI\McpServiceGUI.cs,标题行和日志开关在同一行,Title and log switch are on the same row
Editor\GUI\McpServiceGUI.cs,程序集信息显示在方法名后,Assembly info displayed after method name
Editor\GUI\McpServiceGUI.cs,检查端口范围内是否有冲突,Check for conflicts in port range
Editor\GUI\McpServiceGUI.cs,使用垂直布局管理整个窗口,Use vertical layout to manage the whole window
Editor\GUI\McpServiceGUI.cs,打开方法所在的脚本文件,Open the script file of the method
Editor\GUI\McpServiceGUI.cs,将使用其他可用端口启动,Will start using other available ports
Editor\GUI\McpServiceGUI.cs,工具方法列表标题和间距,Tool method list header and spacing
Editor\GUI\McpServiceGUI.cs,如果有外部进程占用端口,If external process occupies port
Editor\GUI\McpServiceGUI.cs,检查端口占用时发生错误,Error occurred while checking port occupation
Editor\GUI\McpServiceGUI.cs,从右到左计算各区域位置,Calculate positions of areas from right to left
Editor\GUI\McpServiceGUI.cs,客户端连接状态相关变量,Client connection state related variables
Editor\GUI\McpServiceGUI.cs,转换为小写用于模式匹配,Convert to lowercase for pattern match
Editor\GUI\McpServiceGUI.cs,生成调试示例时发生错误,Error occurred while generating debug sample
Editor\GUI\McpServiceGUI.cs,检查是否是外部进程占用,Check whether it is occupied by external process
Editor\GUI\McpServiceGUI.cs,根据参数信息生成示例值,Generate sample value by parameter info
Editor\GUI\McpServiceGUI.cs,清理冲突端口时发生错误,Error occurred while cleaning conflicting ports
Editor\GUI\McpServiceGUI.cs,确保标签有足够的宽度,Ensure label is wide enough
Editor\GUI\McpServiceGUI.cs,在一行中显示折叠标题,Display collapse header in one row
Editor\GUI\McpServiceGUI.cs,窗口中高亮显示该资源,Highlight resource in window
Editor\GUI\McpServiceGUI.cs,控制面板已移至标题行,Control panel moved to title row
Editor\GUI\McpServiceGUI.cs,设置右对齐的标签样式,Set label style to right-align
Editor\GUI\McpServiceGUI.cs,用户选择清理冲突端口,User selects to clean conflicting ports
Editor\GUI\McpServiceGUI.cs,它会自动选择可用端口,It will auto select available port
Editor\GUI\McpServiceGUI.cs,工具方法列表相关变量,Tool method list related variables
Editor\GUI\McpServiceGUI.cs,按分组名称排序并绘制,Sort and draw by group name
Editor\GUI\McpServiceGUI.cs,额外增加滚动视图高度,Extra increase for scroll view height
Editor\GUI\McpServiceGUI.cs,获取程序集的显示名称,Get display name for assembly
Editor\GUI\McpServiceGUI.cs,处理调试按钮点击事件,Handle debug button click event
Editor\GUI\McpServiceGUI.cs,绘制客户端连接状态,Draw client connection state
Editor\GUI\McpServiceGUI.cs,计算程序集标签宽度,Calculate width of assembly label
Editor\GUI\McpServiceGUI.cs,标签后增加更多间距,Add more spacing after label
Editor\GUI\McpServiceGUI.cs,可选参数用灰色标记,Mark optional parameters in gray
Editor\GUI\McpServiceGUI.cs,生成方法调用的示例,Generate example method invocation
Editor\GUI\McpServiceGUI.cs,客户端列表滚动视图,Client list scroll view
Editor\GUI\McpServiceGUI.cs,窗口边距和滚动条等,Window margins and scrollbars, etc.
Editor\GUI\McpServiceGUI.cs,问号按钮和调试按钮,Question mark and debug buttons
Editor\GUI\McpServiceGUI.cs,获取方法的分组名称,Get method's group name
Editor\GUI\McpServiceGUI.cs,可选参数用普通字体,Optional parameters use regular font
Editor\GUI\McpServiceGUI.cs,将尝试终止占用进程,Will attempt to terminate occupying process
Editor\GUI\McpServiceGUI.cs,生成方法的示例参数,Generate example parameters for method
Editor\GUI\McpServiceGUI.cs,客户端连接状态标题,Client connection state title
Editor\GUI\McpServiceGUI.cs,会自动选择可用端口,Will automatically select available port
Editor\GUI\McpServiceGUI.cs,客户端连接状态部分,Client connection state section
Editor\GUI\McpServiceGUI.cs,按钮后增加更多间距,Add more spacing after button
Editor\GUI\McpServiceGUI.cs,必需参数用红色标记,Mark required parameters in red
Editor\GUI\McpServiceGUI.cs,绘制分组折叠标题,Draw group collapse header
Editor\GUI\McpServiceGUI.cs,询问用户是否清理,Ask user whether to clean
Editor\GUI\McpServiceGUI.cs,计算剩余可用高度,Calculate remaining usable height
Editor\GUI\McpServiceGUI.cs,让它填充剩余空间,Let it fill remaining space
Editor\GUI\McpServiceGUI.cs,记录本次点击时间,Record this click time
Editor\GUI\McpServiceGUI.cs,先设置为默认状态,Set to default first
Editor\GUI\McpServiceGUI.cs,绘制工具方法列表,Draw tool method list
Editor\GUI\McpServiceGUI.cs,无法生成调试示例,Unable to generate debug sample
Editor\GUI\McpServiceGUI.cs,检查启动是否成功,Check if startup succeeded
Editor\GUI\McpServiceGUI.cs,详细信息折叠控制,Detail collapse control
Editor\GUI\McpServiceGUI.cs,检查服务运行状态,Check service running state
Editor\GUI\McpServiceGUI.cs,计算连接持续时间,Calculate connection duration
Editor\GUI\McpServiceGUI.cs,添加工具方法列表,Add tool method list
Editor\GUI\McpServiceGUI.cs,两个按钮的总宽度,Total width of two buttons
Editor\GUI\McpServiceGUI.cs,右侧显示调试按钮,Show debug button on right
Editor\GUI\McpServiceGUI.cs,中不需要动态计算,No dynamic calculation needed here
Editor\GUI\McpServiceGUI.cs,创建参数行的样式,Create param row style
Editor\GUI\McpServiceGUI.cs,根据描述内容推断,Infer from description content
Editor\GUI\McpServiceGUI.cs,确保充分利用空间,Ensure full usage of space
Editor\GUI\McpServiceGUI.cs,如果没有找到脚本,If script not found
Editor\GUI\McpServiceGUI.cs,如果显示详细信息,If displaying details
Editor\GUI\McpServiceGUI.cs,避免误把连接状态,Avoid misidentifying connection state
Editor\GUI\McpServiceGUI.cs,处理按钮点击事件,Handle button click event
Editor\GUI\McpServiceGUI.cs,绘制方法折叠标题,Draw method collapse header
Editor\GUI\McpServiceGUI.cs,估算已占用的空间,Estimate used space
Editor\GUI\McpServiceGUI.cs,并且是否是当前,And whether it is current
Editor\GUI\McpServiceGUI.cs,程序集标签区域,Assembly label area
Editor\GUI\McpServiceGUI.cs,每个客户端约占,Each client takes about
Editor\GUI\McpServiceGUI.cs,客户端连接状态,Client connection status
Editor\GUI\McpServiceGUI.cs,显示其中的方法,Show methods among them
Editor\GUI\McpServiceGUI.cs,折叠标题栏样式,Collapse header bar style
Editor\GUI\McpServiceGUI.cs,暂无客户端连接,No client connection
Editor\GUI\McpServiceGUI.cs,结束主垂直布局,End main vertical layout
Editor\GUI\McpServiceGUI.cs,状态树结构部分,State tree structure section
Editor\GUI\McpServiceGUI.cs,不添加到参数中,Do not add to parameters
Editor\GUI\McpServiceGUI.cs,必需参数用粗体,Mark required parameters in bold
Editor\GUI\McpServiceGUI.cs,确保方法已注册,Ensure method registered
Editor\GUI\McpServiceGUI.cs,定位到脚本文件,Locate script file
Editor\GUI\McpServiceGUI.cs,绘制程序集标签,Draw assembly label
Editor\GUI\McpServiceGUI.cs,按分组分类显示,Group by category to display
Editor\GUI\McpServiceGUI.cs,避免文本被截断,Avoid text truncation
Editor\GUI\McpServiceGUI.cs,按分组分类方法,Group by category method
Editor\GUI\McpServiceGUI.cs,加载并打开脚本,Load and open script
Editor\GUI\McpServiceGUI.cs,程序集显示名称,Assembly display name
Editor\GUI\McpServiceGUI.cs,客户端基本信息,Client basic information
Editor\GUI\McpServiceGUI.cs,判断是否为双击,Determine if double-click
Editor\GUI\McpServiceGUI.cs,获取程序集名称,Get assembly name
Editor\GUI\McpServiceGUI.cs,窗口中找到脚本,Find script in window
Editor\GUI\McpServiceGUI.cs,无法在端口范围,Cannot within port range
Editor\GUI\McpServiceGUI.cs,被外部进程占用,Occupied by external process
Editor\GUI\McpServiceGUI.cs,打开脚本文件,Open script file
Editor\GUI\McpServiceGUI.cs,使用固定高度,Use fixed height
Editor\GUI\McpServiceGUI.cs,仅当端口处于,Only when port is at
Editor\GUI\McpServiceGUI.cs,如果生成失败,If generation failed
Editor\GUI\McpServiceGUI.cs,绘制折叠标题,Draw collapse header
Editor\GUI\McpServiceGUI.cs,计算文本行数,Calculate text lines
Editor\GUI\McpServiceGUI.cs,外部进程占用,Occupied by external process
Editor\GUI\McpServiceGUI.cs,折叠标题区域,Collapse header area
Editor\GUI\McpServiceGUI.cs,添加一些间距,Add some spacing
Editor\GUI\McpServiceGUI.cs,无法打开脚本,Unable to open script
Editor\GUI\McpServiceGUI.cs,支持折叠展开,Support folding
Editor\GUI\McpServiceGUI.cs,示例参数对象,Sample parameter object
Editor\GUI\McpServiceGUI.cs,不预填充内容,Do not prefill content
Editor\GUI\McpServiceGUI.cs,绘制调试按钮,Draw debug button
Editor\GUI\McpServiceGUI.cs,显示连接数量,Show connection count
Editor\GUI\McpServiceGUI.cs,问号按钮区域,Question mark area
Editor\GUI\McpServiceGUI.cs,获取分组名称,Get group name
Editor\GUI\McpServiceGUI.cs,才认为被占用,Then considered occupied
Editor\GUI\McpServiceGUI.cs,获取当前时间,Get current time
Editor\GUI\McpServiceGUI.cs,显示详细信息,Show details
Editor\GUI\McpServiceGUI.cs,并预填充示例,And prefill sample
Editor\GUI\McpServiceGUI.cs,只显示方法名,Show only method name
Editor\GUI\McpServiceGUI.cs,必需参数默认,Required parameter default
Editor\GUI\McpServiceGUI.cs,查找脚本资源,Find script resource
Editor\GUI\McpServiceGUI.cs,可选参数默认,Optional parameter default
Editor\GUI\McpServiceGUI.cs,通过反射获取,Get via reflection
Editor\GUI\McpServiceGUI.cs,使用基础模板,Use base template
Editor\GUI\McpServiceGUI.cs,检查端口占用,Check port usage
Editor\GUI\McpServiceGUI.cs,打开调试窗口,Open debug window
Editor\GUI\McpServiceGUI.cs,获取预览信息,Get preview info
Editor\GUI\McpServiceGUI.cs,时间间隔小于,Time interval less than
Editor\GUI\McpServiceGUI.cs,不再单独显示,No longer shown alone
Editor\GUI\McpServiceGUI.cs,左侧显示标题,Show title at left
Editor\GUI\McpServiceGUI.cs,调试按钮区域,Debug button area
Editor\GUI\McpServiceGUI.cs,显示端口信息,Show port info
Editor\GUI\McpServiceGUI.cs,可用工具方法,Available tool methods
Editor\GUI\McpServiceGUI.cs,返回基础模板,Return base template
Editor\GUI\McpServiceGUI.cs,分组折叠状态,Group collapse state
Editor\GUI\McpServiceGUI.cs,服务运行状态,Service run status
Editor\GUI\McpServiceGUI.cs,调试窗口按钮,Debug window button
Editor\GUI\McpServiceGUI.cs,获取方法类型,Get method type
Editor\GUI\McpServiceGUI.cs,绘制问号按钮,Draw question button
Editor\GUI\McpServiceGUI.cs,双击判定时间,Double-click threshold
Editor\GUI\McpServiceGUI.cs,显示预览信息,Show preview info
Editor\GUI\McpServiceGUI.cs,返回默认分组,Return to default group
Editor\GUI\McpServiceGUI.cs,如果分组展开,If group expanded
Editor\GUI\McpServiceGUI.cs,重置点击时间,Reset click time
Editor\GUI\McpServiceGUI.cs,判断是否有,Determine if exists
Editor\GUI\McpServiceGUI.cs,绘制完整的,Draw full
Editor\GUI\McpServiceGUI.cs,更淡的灰色,Lighter gray
Editor\GUI\McpServiceGUI.cs,再加上边距,And add margin
Editor\GUI\McpServiceGUI.cs,淡蓝色背景,Light blue background
Editor\GUI\McpServiceGUI.cs,估算高度,Estimate height
Editor\GUI\McpServiceGUI.cs,滚动视图,Scroll view
Editor\GUI\McpServiceGUI.cs,调试窗口,Debug window
Editor\GUI\McpServiceGUI.cs,增加间距,Increase spacing
Editor\GUI\McpServiceGUI.cs,至少保留,Retain at least
Editor\GUI\McpServiceGUI.cs,方法名称,Method name
Editor\GUI\McpServiceGUI.cs,剩余空间,Remaining space
Editor\GUI\McpServiceGUI.cs,参数名称,Parameter name
Editor\GUI\McpServiceGUI.cs,信息部分,Info section
Editor\GUI\McpServiceGUI.cs,方法实例,Method instance
Editor\GUI\McpServiceGUI.cs,使用端口,Use port
Editor\GUI\McpServiceGUI.cs,连接时间,Connection time
Editor\GUI\McpServiceGUI.cs,使用托管,Use managed
Editor\GUI\McpServiceGUI.cs,当作占用,Regard as occupied
Editor\GUI\McpServiceGUI.cs,正在监听,Listening
Editor\GUI\McpServiceGUI.cs,连接时长,Connection duration
Editor\GUI\McpServiceGUI.cs,最后活动,Last activity
Editor\GUI\McpServiceGUI.cs,异步检测,Async check
Editor\GUI\McpServiceGUI.cs,生成示例,Generate example
Editor\GUI\McpServiceGUI.cs,端口冲突,Port conflict
Editor\GUI\McpServiceGUI.cs,如果显示,If show
Editor\GUI\McpServiceGUI.cs,默认操作,Default action
Editor\GUI\McpServiceGUI.cs,最小宽度,Min width
Editor\GUI\McpServiceGUI.cs,日志开关,Log switch
Editor\GUI\McpServiceGUI.cs,是否可选,Optional or not
Editor\GUI\McpServiceGUI.cs,参数描述,Parameter description
Editor\GUI\McpServiceGUI.cs,连接管理,Connection management
Editor\GUI\McpServiceGUI.cs,如果展开,If expand
Editor\GUI\McpServiceGUI.cs,启动失败,Startup failure
Editor\GUI\McpServiceGUI.cs,如果没有,If none
Editor\GUI\McpServiceGUI.cs,尝试启动,Attempt start
Editor\GUI\McpServiceGUI.cs,分组名称,Group name
Editor\GUI\McpServiceGUI.cs,已启动,Started
Editor\GUI\McpServiceGUI.cs,无参数,No parameters
Editor\GUI\McpServiceGUI.cs,示例值,Example value
Editor\GUI\McpServiceGUI.cs,中显示,Show in
Editor\GUI\McpServiceGUI.cs,用于在,Used in
Editor\GUI\McpServiceGUI.cs,无法在,Cannot on
Editor\GUI\McpServiceGUI.cs,标题栏,Title bar
Editor\GUI\McpServiceGUI.cs,连接数,Connection count
Editor\GUI\McpServiceGUI.cs,最右侧,Rightmost
Editor\GUI\McpServiceGUI.cs,内启动,Inner startup
Editor\GUI\McpServiceGUI.cs,字符串,String
Editor\GUI\McpServiceGUI.cs,的端口,Port of
Editor\GUI\McpServiceGUI.cs,初始化,Initialization
Editor\GUI\McpServiceGUI.cs,未分组,Not grouped
Editor\GUI\McpServiceGUI.cs,参数名,Parameter name
Editor\GUI\McpServiceGUI.cs,程序集,Assembly
Editor\GUI\McpServiceGUI.cs,命令数,Command count
Editor\GUI\McpServiceGUI.cs,因为在,Because in
Editor\GUI\McpServiceGUI.cs,使用,Use
Editor\GUI\McpServiceGUI.cs,状态,State
Editor\GUI\McpServiceGUI.cs,失败,Failure
Editor\GUI\McpServiceGUI.cs,浮点,Float
Editor\GUI\McpServiceGUI.cs,打开,Open
Editor\GUI\McpServiceGUI.cs,端口,Port
Editor\GUI\McpServiceGUI.cs,端点,Endpoint
Editor\GUI\McpServiceGUI.cs,错误,Error
Editor\GUI\McpServiceGUI.cs,设置,Setting
Editor\GUI\McpServiceGUI.cs,清理,Clear
Editor\GUI\McpServiceGUI.cs,进程,Process
Editor\GUI\McpServiceGUI.cs,日志,Log
Editor\GUI\McpServiceGUI.cs,确定,Confirm
Editor\GUI\McpServiceGUI.cs,最大,Maximum
Editor\GUI\McpServiceGUI.cs,返回,Return
Editor\GUI\McpServiceGUI.cs,数字,Number
Editor\GUI\McpServiceGUI.cs,单击,Click
Editor\GUI\McpServiceGUI.cs,示例,Example
Editor\GUI\McpServiceGUI.cs,最小,Minimum
Editor\GUI\McpServiceGUI.cs,数组,Array
Editor\GUI\McpServiceGUI.cs,继续,Continue
Editor\GUI\McpServiceGUI.cs,参数,Parameter
Editor\GUI\McpServiceGUI.cs,选择,Select
Editor\GUI\McpServiceGUI.cs,双击,Double-click
Editor\GUI\McpServiceGUI.cs,是否,Whether
Editor\GUI\McpServiceGUI.cs,秒,Seconds
Editor\GUI\McpServiceGUI.cs,约,About
Editor\GUI\McpServiceGUI.cs,类,Class
Editor\GUI\McpServiceGUI.cs,分,Minute
Editor\GUI\McpServiceGUI.cs,在,At
Editor\GUI\McpDebugWindow.cs,只有当有执行结果且不是从历史记录加载时才显示,Only displayed if there is an execution result and not loaded from history
Editor\GUI\McpDebugWindow.cs,该分组的所有记录将被移动到默认分组,All records in this group will be moved to the default group
Editor\GUI\McpDebugWindow.cs,文本中展开所有字符串字段的换行符,Expand all newline characters in string fields within text
Editor\GUI\McpDebugWindow.cs,使用专门的输入样式确保自动换行,Use a dedicated input style for automatic wrapping
Editor\GUI\McpDebugWindow.cs,避免刚设置焦点就检测到失去焦点,Avoid detecting focus loss immediately after setting focus
Editor\GUI\McpDebugWindow.cs,根据文本内容动态计算输入框高度,Dynamically calculate input box height based on text
Editor\GUI\McpDebugWindow.cs,的结构判断是否为批量调用结果,Determine if structure is batch call result
Editor\GUI\McpDebugWindow.cs,如果格式化后与原文本差异很大,If formatted text differs greatly from original
Editor\GUI\McpDebugWindow.cs,使用垂直布局组来控制整体宽度,Use vertical layout group to control overall width
Editor\GUI\McpDebugWindow.cs,是因为字符串内容需要额外缩进,Because string content needs extra indentation
Editor\GUI\McpDebugWindow.cs,检查当前显示的是否为批量结果,Check if current display is batch result
Editor\GUI\McpDebugWindow.cs,为内容的每一行添加适当的缩进,Add proper indentation to each content line
Editor\GUI\McpDebugWindow.cs,打开调试窗口并预填充指定的,Open debug window and prefill with specified
Editor\GUI\McpDebugWindow.cs,绘制带颜色指示的剪贴板状态,Draw clipboard state with color indicator
Editor\GUI\McpDebugWindow.cs,匹配任意字段名和其字符串值,Match any field name and its string value
Editor\GUI\McpDebugWindow.cs,从包装对象中提取实际的结果,Extract actual result from wrapped object
Editor\GUI\McpDebugWindow.cs,与输入框保持一致的字体大小,Keep font size consistent with input box
Editor\GUI\McpDebugWindow.cs,与输入框保持一致的内边距,Keep padding consistent with input box
Editor\GUI\McpDebugWindow.cs,从错误响应中提取错误消息,Extract error message from error response
Editor\GUI\McpDebugWindow.cs,剪贴板内容可能不是有效的,Clipboard content may be invalid
Editor\GUI\McpDebugWindow.cs,确定要删除这条执行记录吗,Are you sure to delete this execution record?
Editor\GUI\McpDebugWindow.cs,将执行结果刷新到结果区域,Refresh execution result to result area
Editor\GUI\McpDebugWindow.cs,只有当有结果文本时才显示,Only show when there is result text
Editor\GUI\McpDebugWindow.cs,执行剪贴板内容时发生错误,Error occurred while executing clipboard content
Editor\GUI\McpDebugWindow.cs,已粘贴剪贴板内容到输入框,Clipboard content pasted to input box
Editor\GUI\McpDebugWindow.cs,避免与整个元素的选择冲突,Avoid conflict with selection of the entire element
Editor\GUI\McpDebugWindow.cs,为时间信息设置较淡的颜色,Set lighter color for time info
Editor\GUI\McpDebugWindow.cs,取较大值作为实际行数估算,Take the larger value as line count estimate
Editor\GUI\McpDebugWindow.cs,限制在最小和最大高度之间,Limit between minimum and maximum height
Editor\GUI\McpDebugWindow.cs,检查是否正在编辑此记录,Check if editing this record
Editor\GUI\McpDebugWindow.cs,使用固定高度的滚动区域,Use fixed-height scroll region
Editor\GUI\McpDebugWindow.cs,创建结果显示的滚动区域,Create scrolling region for result display
Editor\GUI\McpDebugWindow.cs,记录批量结果时发生错误,Error occurred when recording batch result
Editor\GUI\McpDebugWindow.cs,当前正在编辑的记录索引,Index of currently editing record
Editor\GUI\McpDebugWindow.cs,记录执行结果时发生错误,Error occurred when recording execution result
Editor\GUI\McpDebugWindow.cs,手动记录结果时发生错误,Error occurred when manually recording result
Editor\GUI\McpDebugWindow.cs,执行结果已保存到记录中,Execution result has been saved to records
Editor\GUI\McpDebugWindow.cs,分组下拉框直接作为标题,Group dropdown used directly as title
Editor\GUI\McpDebugWindow.cs,确保每个键值对单独一行,Ensure each key-value pair is in a separate line
Editor\GUI\McpDebugWindow.cs,获取指定位置的缩进级别,Get indent level for specified position
Editor\GUI\McpDebugWindow.cs,计算分组管理区域的高度,Calculate height of group management area
Editor\GUI\McpDebugWindow.cs,手动记录时没有执行时间,No execution time for manual record
Editor\GUI\McpDebugWindow.cs,与输入框保持一致的边距,Margin consistent with input box
Editor\GUI\McpDebugWindow.cs,判断单个结果的成功状态,Determine success state of single result
Editor\GUI\McpDebugWindow.cs,此操作不会影响其他分组,This action does not affect other groups
Editor\GUI\McpDebugWindow.cs,计算标题区域的实际高度,Calculate actual height of title area
Editor\GUI\McpDebugWindow.cs,根据剪贴板内容动态启用,Enable dynamically based on clipboard content
Editor\GUI\McpDebugWindow.cs,粘贴剪贴板内容到输入框,Paste clipboard content to input box
Editor\GUI\McpDebugWindow.cs,检查结果是否为错误响应,Check if result is error response
Editor\GUI\McpDebugWindow.cs,只在函数名区域检测双击,Detect double click only in function name area
Editor\GUI\McpDebugWindow.cs,确保有足够空间显示标题,Ensure enough space for title
Editor\GUI\McpDebugWindow.cs,处理记录元素的鼠标事件,Handle mouse events for record elements
Editor\GUI\McpDebugWindow.cs,限制宽度以防止水平溢出,Limit width to prevent horizontal overflow
Editor\GUI\McpDebugWindow.cs,获取当前分组的显示名称,Get display name of current group
Editor\GUI\McpDebugWindow.cs,考虑自动换行和固定宽度,Consider word wrap and fixed width
Editor\GUI\McpDebugWindow.cs,检查是否为批量调用结果,Check if it is a batch call result
Editor\GUI\McpDebugWindow.cs,统计信息已复制到剪贴板,Stats have been copied to clipboard
Editor\GUI\McpDebugWindow.cs,估算每行可显示的字符数,Estimate characters per line
Editor\GUI\McpDebugWindow.cs,考虑字体大小和宽度限制,Consider font size and width limit
Editor\GUI\McpDebugWindow.cs,复制批量调用的统计信息,Copy batch call statistics
Editor\GUI\McpDebugWindow.cs,减去边距和滚动条宽度,Minus margin and scrollbar width
Editor\GUI\McpDebugWindow.cs,只在刚开始编辑时设置,Only set at start of editing
Editor\GUI\McpDebugWindow.cs,避免继续处理其他事件,Avoid further handling of other events
Editor\GUI\McpDebugWindow.cs,根据固定宽度估算换行,Estimate line break by fixed width
Editor\GUI\McpDebugWindow.cs,限制宽度避免水平滚动,Limit width to avoid horizontal scroll
Editor\GUI\McpDebugWindow.cs,为序号和图标留出空间,Reserve space for number and icon
Editor\GUI\McpDebugWindow.cs,专门用于输入框的样式,Style dedicated to input box
Editor\GUI\McpDebugWindow.cs,选择记录并刷新到界面,Select record and refresh UI
Editor\GUI\McpDebugWindow.cs,手动记录当前执行结果,Manually record current execution result
Editor\GUI\McpDebugWindow.cs,确保不会超过指定宽度,Ensure not to exceed specified width
Editor\GUI\McpDebugWindow.cs,如果是则显示额外操作,Show extra operations if yes
Editor\GUI\McpDebugWindow.cs,创建输入框的滚动区域,Create scroll area for input box
Editor\GUI\McpDebugWindow.cs,没有可记录的执行结果,No executable result to record
Editor\GUI\McpDebugWindow.cs,记录单个函数调用结果,Record single function call result
Editor\GUI\McpDebugWindow.cs,格式化结果时发生错误,Error occurred while formatting result
Editor\GUI\McpDebugWindow.cs,先绘制标题在顶部居中,Draw title at the top and center first
Editor\GUI\McpDebugWindow.cs,记录批量函数调用结果,Record batch function call result
Editor\GUI\McpDebugWindow.cs,异步执行剪贴板内容中,Async execution of clipboard content
Editor\GUI\McpDebugWindow.cs,创建包装后的结果对象,Create wrapped result object
Editor\GUI\McpDebugWindow.cs,是否显示分组管理界面,Whether to show group management UI
Editor\GUI\McpDebugWindow.cs,存储当前结果并格式化,Store and format current result
Editor\GUI\McpDebugWindow.cs,分组功能会自动初始化,Group feature auto-initializes
Editor\GUI\McpDebugWindow.cs,刷新界面显示异步状态,Refresh UI to show async state
Editor\GUI\McpDebugWindow.cs,剪贴板内容不是有效的,Clipboard content is not valid
Editor\GUI\McpDebugWindow.cs,使用更精确的垂直布局,Use more precise vertical layout
Editor\GUI\McpDebugWindow.cs,记录列表操作按钮区域,Button region for record list actions
Editor\GUI\McpDebugWindow.cs,正在执行剪贴板内容,Executing clipboard content
Editor\GUI\McpDebugWindow.cs,格式化批量调用结果,Format batch call result
Editor\GUI\McpDebugWindow.cs,批量结果格式化失败,Failed to format batch result
Editor\GUI\McpDebugWindow.cs,批量调用中此项失败,This item failed in batch call
Editor\GUI\McpDebugWindow.cs,没有可格式化的结果,No result to format
Editor\GUI\McpDebugWindow.cs,如果值为空或是列表,If value is empty or list
Editor\GUI\McpDebugWindow.cs,检查是否为批量调用,Check if batch call
Editor\GUI\McpDebugWindow.cs,来获取函数名和参数,To get function name and parameters
Editor\GUI\McpDebugWindow.cs,固定高度的滚动区域,Fixed height scroll area
Editor\GUI\McpDebugWindow.cs,调用的内部通用方法,Internal general method called
Editor\GUI\McpDebugWindow.cs,执行剪贴板内容错误,Error executing clipboard content
Editor\GUI\McpDebugWindow.cs,确定要清空当前分组,Confirm to clear current group
Editor\GUI\McpDebugWindow.cs,获取当前的缩进级别,Get current indent level
Editor\GUI\McpDebugWindow.cs,返回格式化后的结果,Return the formatted result
Editor\GUI\McpDebugWindow.cs,方便显示格式化内容,Easy to display formatted content
Editor\GUI\McpDebugWindow.cs,恢复原来的起始位置,Revert to original start position
Editor\GUI\McpDebugWindow.cs,请检查名称是否重复,Please check for duplicate name
Editor\GUI\McpDebugWindow.cs,无法执行剪贴板内容,Unable to execute clipboard content
Editor\GUI\McpDebugWindow.cs,选中时显示背景颜色,Show background color when selected
Editor\GUI\McpDebugWindow.cs,标记编辑是否刚开始,Flag whether editing just started
Editor\GUI\McpDebugWindow.cs,尝试将文本格式化为,Try to format text as
Editor\GUI\McpDebugWindow.cs,拉伸以适应容器高度,Stretch to fit container height
Editor\GUI\McpDebugWindow.cs,检查剪贴板是否可用,Check if clipboard is available
Editor\GUI\McpDebugWindow.cs,无法预览剪贴板内容,Cannot preview clipboard content
Editor\GUI\McpDebugWindow.cs,为状态图标设置颜色,Set color for status icon
Editor\GUI\McpDebugWindow.cs,检查是否为批量结果,Check if batch result
Editor\GUI\McpDebugWindow.cs,无法粘贴剪贴板内容,Cannot paste clipboard content
Editor\GUI\McpDebugWindow.cs,当前执行的任务索引,Current executing task index
Editor\GUI\McpDebugWindow.cs,获取当前分组的记录,Get records of current group
Editor\GUI\McpDebugWindow.cs,显示错误信息失败,Failed to display error message
Editor\GUI\McpDebugWindow.cs,字段获取错误信息,Field get error info
Editor\GUI\McpDebugWindow.cs,等待异步回调完成,Wait for asynchronous callback to complete
Editor\GUI\McpDebugWindow.cs,绘制分组管理界面,Draw group management UI
Editor\GUI\McpDebugWindow.cs,分栏布局相关变量,Column layout related variable
Editor\GUI\McpDebugWindow.cs,因为这是历史记录,Because this is history record
Editor\GUI\McpDebugWindow.cs,根据行数计算高度,Calculate height by line count
Editor\GUI\McpDebugWindow.cs,分条显示每个结果,Show each result in list
Editor\GUI\McpDebugWindow.cs,不再反射判断类型,No longer reflect to determine type
Editor\GUI\McpDebugWindow.cs,开始编辑记录名称,Start editing record name
Editor\GUI\McpDebugWindow.cs,但给换行更多权重,But give line break more weight
Editor\GUI\McpDebugWindow.cs,存储当前执行结果,Store current execution result
Editor\GUI\McpDebugWindow.cs,对象或数组的开始,Start of object or array
Editor\GUI\McpDebugWindow.cs,没有发现错误信息,No error info found
Editor\GUI\McpDebugWindow.cs,恢复原来的内边距,Revert to original padding
Editor\GUI\McpDebugWindow.cs,与输入框保持一致,Consistent with input box
Editor\GUI\McpDebugWindow.cs,分组列表滚动位置,Group list scroll position
Editor\GUI\McpDebugWindow.cs,可能需要增加缩进,May need extra indentation
Editor\GUI\McpDebugWindow.cs,绘制结果显示区域,Draw result display area
Editor\GUI\McpDebugWindow.cs,检查当前行是否是,Check if current line is
Editor\GUI\McpDebugWindow.cs,执行记录相关变量,Execution record related variable
Editor\GUI\McpDebugWindow.cs,单个函数调用记录,Single function call record
Editor\GUI\McpDebugWindow.cs,强制启用自动换行,Force enable word wrap
Editor\GUI\McpDebugWindow.cs,无法复制统计信息,Unable to copy stats
Editor\GUI\McpDebugWindow.cs,绘制控制按钮区域,Draw control button region
Editor\GUI\McpDebugWindow.cs,检查是否包含内嵌,Check for embedded
Editor\GUI\McpDebugWindow.cs,获取剪贴板可用性,Get clipboard availability
Editor\GUI\McpDebugWindow.cs,显示所有错误汇总,Show all error summary
Editor\GUI\McpDebugWindow.cs,如果回调立即执行,If callback executes immediately
Editor\GUI\McpDebugWindow.cs,显示带颜色的状态,Show colored state
Editor\GUI\McpDebugWindow.cs,记录列表滚动位置,Record list scroll position
Editor\GUI\McpDebugWindow.cs,批量调用执行结果,Batch call results
Editor\GUI\McpDebugWindow.cs,输入单个函数调用,Input single function call
Editor\GUI\McpDebugWindow.cs,带滚动和动态高度,With scroll and dynamic height
Editor\GUI\McpDebugWindow.cs,显示文本输入框,Show text input box
Editor\GUI\McpDebugWindow.cs,预览剪贴板内容,Preview clipboard content
Editor\GUI\McpDebugWindow.cs,从执行记录加载,Load from execution record
Editor\GUI\McpDebugWindow.cs,不自动拉伸宽度,Do not auto stretch width
Editor\GUI\McpDebugWindow.cs,上次点击的索引,Last clicked index
Editor\GUI\McpDebugWindow.cs,计算缩进空格数,Calculate indent spaces
Editor\GUI\McpDebugWindow.cs,完成编辑并保存,Finish editing and save
Editor\GUI\McpDebugWindow.cs,确保有最小高度,Ensure minimum height
Editor\GUI\McpDebugWindow.cs,转换为实际索引,Convert to actual index
Editor\GUI\McpDebugWindow.cs,显示剪贴板状态,Show clipboard state
Editor\GUI\McpDebugWindow.cs,先处理键盘事件,Handle keyboard event first
Editor\GUI\McpDebugWindow.cs,字体和可用宽度,Font and available width
Editor\GUI\McpDebugWindow.cs,清空之前的结果,Clear previous result
Editor\GUI\McpDebugWindow.cs,用于测试和调试,For testing and debugging
Editor\GUI\McpDebugWindow.cs,内部的绘制区域,Internal draw area
Editor\GUI\McpDebugWindow.cs,记录名称已更新,Record name updated
Editor\GUI\McpDebugWindow.cs,选中的分组索引,Selected group index
Editor\GUI\McpDebugWindow.cs,向前查找到行首,Move forward to line start
Editor\GUI\McpDebugWindow.cs,格式化结果文本,Format result text
Editor\GUI\McpDebugWindow.cs,来检测文本变化,To detect text change
Editor\GUI\McpDebugWindow.cs,执行剪贴板内容,Execute clipboard content
Editor\GUI\McpDebugWindow.cs,确定要删除分组,Confirm to delete group
Editor\GUI\McpDebugWindow.cs,仅显示错误信息,Only show error info
Editor\GUI\McpDebugWindow.cs,如果是异步回调,If async callback
Editor\GUI\McpDebugWindow.cs,标题的上下边距,Title vertical margin
Editor\GUI\McpDebugWindow.cs,仅清空当前分组,Clear only current group
Editor\GUI\McpDebugWindow.cs,不使用固定高度,Not fixed height
Editor\GUI\McpDebugWindow.cs,剪贴板操作按钮,Clipboard operation button
Editor\GUI\McpDebugWindow.cs,适应较窄的面板,Fits narrow panel
Editor\GUI\McpDebugWindow.cs,格式化结果按钮,Format result button
Editor\GUI\McpDebugWindow.cs,记录时间和索引,Record time and index
Editor\GUI\McpDebugWindow.cs,不使用固定宽度,Not fixed width
Editor\GUI\McpDebugWindow.cs,包含冒号和换行,Contains colon and line break
Editor\GUI\McpDebugWindow.cs,无法解析输入的,Unable to parse input
Editor\GUI\McpDebugWindow.cs,无法格式化结果,Unable to format result
Editor\GUI\McpDebugWindow.cs,禁用水平滚动条,Disable horizontal scrollbar
Editor\GUI\McpDebugWindow.cs,完成执行并更新,Finish execution and update
Editor\GUI\McpDebugWindow.cs,启用垂直滚动条,Enable vertical scrollbar
Editor\GUI\McpDebugWindow.cs,调试客户端窗口,Debug client window
Editor\GUI\McpDebugWindow.cs,执行剪贴板中的,Execute from clipboard
Editor\GUI\McpDebugWindow.cs,增加更多空间,Add more space
Editor\GUI\McpDebugWindow.cs,结果显示区域,Result display area
Editor\GUI\McpDebugWindow.cs,使用固定宽度,Use fixed width
Editor\GUI\McpDebugWindow.cs,显示成功提示,Show success prompt
Editor\GUI\McpDebugWindow.cs,显示行数信息,Show line number info
Editor\GUI\McpDebugWindow.cs,分组相关变量,Group related variables
Editor\GUI\McpDebugWindow.cs,记录结果按钮,Record result button
Editor\GUI\McpDebugWindow.cs,批量调用记录,Batch call record
Editor\GUI\McpDebugWindow.cs,允许高度拉伸,Allow height stretch
Editor\GUI\McpDebugWindow.cs,粘贴到输入框,Paste to input box
Editor\GUI\McpDebugWindow.cs,正序显示序号,Show serial in order
Editor\GUI\McpDebugWindow.cs,处理包含内嵌,Handle embedded
Editor\GUI\McpDebugWindow.cs,编辑中的文本,Editing text
Editor\GUI\McpDebugWindow.cs,刷新记录列表,Refresh record list
Editor\GUI\McpDebugWindow.cs,上次点击时间,Last click time
Editor\GUI\McpDebugWindow.cs,启用自动换行,Enable word wrap
Editor\GUI\McpDebugWindow.cs,批量函数调用,Batch function call
Editor\GUI\McpDebugWindow.cs,从字符串执行,Execute from string
Editor\GUI\McpDebugWindow.cs,支持异步回调,Support async callback
Editor\GUI\McpDebugWindow.cs,序列化后展开,Expand after serialization
Editor\GUI\McpDebugWindow.cs,设置输入框的,Set for input box
Editor\GUI\McpDebugWindow.cs,创建分组失败,Create group failed
Editor\GUI\McpDebugWindow.cs,不限定字段名,No limit on field name
Editor\GUI\McpDebugWindow.cs,显示错误信息,Show error info
Editor\GUI\McpDebugWindow.cs,有前缀文本和,Has prefix text and
Editor\GUI\McpDebugWindow.cs,延迟一帧检查,Delay check by one frame
Editor\GUI\McpDebugWindow.cs,显示总体统计,Show overall stats
Editor\GUI\McpDebugWindow.cs,剪贴板格式的,Clipboard format of
Editor\GUI\McpDebugWindow.cs,回车确认编辑,Enter to confirm edit
Editor\GUI\McpDebugWindow.cs,计算括号平衡,Calculate bracket balance
Editor\GUI\McpDebugWindow.cs,构建分组选项,Build group options
Editor\GUI\McpDebugWindow.cs,的所有记录吗,All records of
Editor\GUI\McpDebugWindow.cs,禁止清空全部,Prohibit clearing all
Editor\GUI\McpDebugWindow.cs,记录列表区域,Record list area
Editor\GUI\McpDebugWindow.cs,在格式化后的,In formatted
Editor\GUI\McpDebugWindow.cs,编辑相关变量,Edit related variable
Editor\GUI\McpDebugWindow.cs,用于检测双击,For detecting double-click
Editor\GUI\McpDebugWindow.cs,处理分栏拖拽,Handle column dragging
Editor\GUI\McpDebugWindow.cs,表示异步执行,Indicate async execution
Editor\GUI\McpDebugWindow.cs,设置元素高度,Set element height
Editor\GUI\McpDebugWindow.cs,操作按钮区域,Operation button area
Editor\GUI\McpDebugWindow.cs,结果文本区域,Result text area
Editor\GUI\McpDebugWindow.cs,退出编辑模式,Exit edit mode
Editor\GUI\McpDebugWindow.cs,清空当前分组,Clear current group
Editor\GUI\McpDebugWindow.cs,同步执行完成,Synchronous execution finished
Editor\GUI\McpDebugWindow.cs,是否仍要粘贴,Still paste?
Editor\GUI\McpDebugWindow.cs,结果操作按钮,Result action button
Editor\GUI\McpDebugWindow.cs,分组管理区域,Group management area
Editor\GUI\McpDebugWindow.cs,每个元素都有,Each element has
Editor\GUI\McpDebugWindow.cs,包含统计信息,Contain stats info
Editor\GUI\McpDebugWindow.cs,处理鼠标事件,Handle mouse event
Editor\GUI\McpDebugWindow.cs,更新记录名称,Update record name
Editor\GUI\McpDebugWindow.cs,限制预览长度,Limit preview length
Editor\GUI\McpDebugWindow.cs,绘制输入区域,Draw input area
Editor\GUI\McpDebugWindow.cs,清理所有结果,Clear all results
Editor\GUI\McpDebugWindow.cs,清空当前结果,Clear current result
Editor\GUI\McpDebugWindow.cs,检测缩进变化,Detect indent change
Editor\GUI\McpDebugWindow.cs,未选中时绘制,Draw when not selected
Editor\GUI\McpDebugWindow.cs,检测失去焦点,Detect focus loss
Editor\GUI\McpDebugWindow.cs,错误信息汇总,Error message summary
Editor\GUI\McpDebugWindow.cs,标题文字高度,Title text height
Editor\GUI\McpDebugWindow.cs,基础行数计算,Base line number calculation
Editor\GUI\McpDebugWindow.cs,从剪贴板执行,Execute from clipboard
Editor\GUI\McpDebugWindow.cs,分组列表区域,Group list area
Editor\GUI\McpDebugWindow.cs,单个函数调用,Single function call
Editor\GUI\McpDebugWindow.cs,批量调用统计,Batch call statistics
Editor\GUI\McpDebugWindow.cs,增加额外边距,Add extra margin
Editor\GUI\McpDebugWindow.cs,检查是否完成,Check if completed
Editor\GUI\McpDebugWindow.cs,格式化结果,Format result
Editor\GUI\McpDebugWindow.cs,剪贴板操作,Clipboard operation
Editor\GUI\McpDebugWindow.cs,查找第一个,Find first
Editor\GUI\McpDebugWindow.cs,不自动拉伸,Do not auto stretch
Editor\GUI\McpDebugWindow.cs,仅显示错误,Show only error
Editor\GUI\McpDebugWindow.cs,格式化后的,Formatted
Editor\GUI\McpDebugWindow.cs,默认左侧占,Default take left
Editor\GUI\McpDebugWindow.cs,第二行按钮,Second row button
Editor\GUI\McpDebugWindow.cs,解析输入的,Parse input
Editor\GUI\McpDebugWindow.cs,检查是否有,Check if there is
Editor\GUI\McpDebugWindow.cs,带来的问题,The caused issues
Editor\GUI\McpDebugWindow.cs,收集完整的,Collect complete
Editor\GUI\McpDebugWindow.cs,判断结果的,Judge result's
Editor\GUI\McpDebugWindow.cs,带颜色指示,With color indicator
Editor\GUI\McpDebugWindow.cs,第一行按钮,First row button
Editor\GUI\McpDebugWindow.cs,新分组描述,New group description
Editor\GUI\McpDebugWindow.cs,支持富文本,Support rich text
Editor\GUI\McpDebugWindow.cs,默认为成功,Default is success
Editor\GUI\McpDebugWindow.cs,失败调用数,Failed call count
Editor\GUI\McpDebugWindow.cs,除了第一行,Except first line
Editor\GUI\McpDebugWindow.cs,如果结果为,If result is
Editor\GUI\McpDebugWindow.cs,加上适当的,Add proper
Editor\GUI\McpDebugWindow.cs,输入框区域,Input box area
Editor\GUI\McpDebugWindow.cs,或批量调用,Or batch call
Editor\GUI\McpDebugWindow.cs,匹配所有的,Match all
Editor\GUI\McpDebugWindow.cs,本身的结构,Own structure
Editor\GUI\McpDebugWindow.cs,尝试格式化,Try to format
Editor\GUI\McpDebugWindow.cs,不是有效的,Not valid
Editor\GUI\McpDebugWindow.cs,确保优先级,Ensure priority
Editor\GUI\McpDebugWindow.cs,剪贴板预览,Clipboard preview
Editor\GUI\McpDebugWindow.cs,要预填充的,To prefill
Editor\GUI\McpDebugWindow.cs,异步执行中,Async executing
Editor\GUI\McpDebugWindow.cs,验证剪贴板,Validate clipboard
Editor\GUI\McpDebugWindow.cs,为实际换行,For actual line break
Editor\GUI\McpDebugWindow.cs,执行剪贴板,Execute clipboard
Editor\GUI\McpDebugWindow.cs,显示函数名,Show function name
Editor\GUI\McpDebugWindow.cs,剪贴板为空,Clipboard empty
Editor\GUI\McpDebugWindow.cs,新分组名称,New group name
Editor\GUI\McpDebugWindow.cs,格式化失败,Formatting failed
Editor\GUI\McpDebugWindow.cs,制表符算作,Tab counts as
Editor\GUI\McpDebugWindow.cs,预览剪贴板,Preview clipboard
Editor\GUI\McpDebugWindow.cs,如果结果是,If result is
Editor\GUI\McpDebugWindow.cs,创建新分组,Create new group
Editor\GUI\McpDebugWindow.cs,时间和来源,Time and source
Editor\GUI\McpDebugWindow.cs,成功格式化,Format successful
Editor\GUI\McpDebugWindow.cs,且非空结果,And result not empty
Editor\GUI\McpDebugWindow.cs,直接判断,Directly determine
Editor\GUI\McpDebugWindow.cs,序号显示,Show serial number
Editor\GUI\McpDebugWindow.cs,内容过长,Content too long
Editor\GUI\McpDebugWindow.cs,内的双击,Inner double-click
Editor\GUI\McpDebugWindow.cs,整体状态,Overall status
Editor\GUI\McpDebugWindow.cs,执行结果,Execution result
Editor\GUI\McpDebugWindow.cs,原始结果,Original result
Editor\GUI\McpDebugWindow.cs,水平排列,Horizontal arrangement
Editor\GUI\McpDebugWindow.cs,如果不是,If not
Editor\GUI\McpDebugWindow.cs,确认清空,Confirm clear
Editor\GUI\McpDebugWindow.cs,预览失败,Preview failed
Editor\GUI\McpDebugWindow.cs,内容为空,Content empty
Editor\GUI\McpDebugWindow.cs,仍要粘贴,Still paste
Editor\GUI\McpDebugWindow.cs,基本高度,Basic height
Editor\GUI\McpDebugWindow.cs,创建成功,Created successfully
Editor\GUI\McpDebugWindow.cs,字段中的,In field
Editor\GUI\McpDebugWindow.cs,函数调用,Function call
Editor\GUI\McpDebugWindow.cs,缩进对齐,Indent align
Editor\GUI\McpDebugWindow.cs,字段且为,Field and is
Editor\GUI\McpDebugWindow.cs,尝试作为,Try as
Editor\GUI\McpDebugWindow.cs,现有分组,Existing group
Editor\GUI\McpDebugWindow.cs,刷新界面,Refresh UI
Editor\GUI\McpDebugWindow.cs,检测双击,Detect double-click
Editor\GUI\McpDebugWindow.cs,格式错误,Format error
Editor\GUI\McpDebugWindow.cs,序号宽度,Serial width
Editor\GUI\McpDebugWindow.cs,无法解析,Unable to parse
Editor\GUI\McpDebugWindow.cs,简化显示,Simplify display
Editor\GUI\McpDebugWindow.cs,记录成功,Record success
Editor\GUI\McpDebugWindow.cs,布局参数,Layout parameter
Editor\GUI\McpDebugWindow.cs,保持原样,Keep as is
Editor\GUI\McpDebugWindow.cs,倒序显示,Reverse order display
Editor\GUI\McpDebugWindow.cs,增加间距,Increase spacing
Editor\GUI\McpDebugWindow.cs,绘制内容,Draw content
Editor\GUI\McpDebugWindow.cs,正在执行,Executing
Editor\GUI\McpDebugWindow.cs,执行失败,Execution failed
Editor\GUI\McpDebugWindow.cs,清除焦点,Clear focus
Editor\GUI\McpDebugWindow.cs,处理多行,Handle multiline
Editor\GUI\McpDebugWindow.cs,蓝色高亮,Blue highlight
Editor\GUI\McpDebugWindow.cs,正常模式,Normal mode
Editor\GUI\McpDebugWindow.cs,读取失败,Read failed
Editor\GUI\McpDebugWindow.cs,左侧区域,Left area
Editor\GUI\McpDebugWindow.cs,内部边距,Internal padding
Editor\GUI\McpDebugWindow.cs,分栏布局,Column layout
Editor\GUI\McpDebugWindow.cs,操作按钮,Operation button
Editor\GUI\McpDebugWindow.cs,返回前缀,Return prefix
Editor\GUI\McpDebugWindow.cs,顶部间距,Top margin
Editor\GUI\McpDebugWindow.cs,否则返回,Otherwise return
Editor\GUI\McpDebugWindow.cs,记录结果,Record result
Editor\GUI\McpDebugWindow.cs,记录失败,Record failed
Editor\GUI\McpDebugWindow.cs,创建区域,Create area
Editor\GUI\McpDebugWindow.cs,右侧区域,Right area
Editor\GUI\McpDebugWindow.cs,总任务数,Total task count
Editor\GUI\McpDebugWindow.cs,分组管理,Group management
Editor\GUI\McpDebugWindow.cs,返回结果,Return result
Editor\GUI\McpDebugWindow.cs,单个调用,Single call
Editor\GUI\McpDebugWindow.cs,部分失败,Partial failure
Editor\GUI\McpDebugWindow.cs,批量调用,Batch call
Editor\GUI\McpDebugWindow.cs,手动记录,Manual record
Editor\GUI\McpDebugWindow.cs,暂无分组,No group
Editor\GUI\McpDebugWindow.cs,分组列表,Group list
Editor\GUI\McpDebugWindow.cs,说明文字,Description
Editor\GUI\McpDebugWindow.cs,开始编辑,Start editing
Editor\GUI\McpDebugWindow.cs,复制统计,Copy statistics
Editor\GUI\McpDebugWindow.cs,堆栈跟踪,Stack trace
Editor\GUI\McpDebugWindow.cs,可能不是,May not be
Editor\GUI\McpDebugWindow.cs,顺序执行,Sequential execution
Editor\GUI\McpDebugWindow.cs,状态图标,Status icon
Editor\GUI\McpDebugWindow.cs,适当缩进,Proper indent
Editor\GUI\McpDebugWindow.cs,未知错误,Unknown error
Editor\GUI\McpDebugWindow.cs,总调用数,Total calls
Editor\GUI\McpDebugWindow.cs,包含有效,Has valid
Editor\GUI\McpDebugWindow.cs,显示结果,Show result
Editor\GUI\McpDebugWindow.cs,原有功能,Existing functionality
Editor\GUI\McpDebugWindow.cs,未知分组,Unknown group
Editor\GUI\McpDebugWindow.cs,执行时间,Execution time
Editor\GUI\McpDebugWindow.cs,内容预览,Content preview
Editor\GUI\McpDebugWindow.cs,分组信息,Group info
Editor\GUI\McpDebugWindow.cs,对象开始,Object start
Editor\GUI\McpDebugWindow.cs,双击检测,Double-click detection
Editor\GUI\McpDebugWindow.cs,状态变量,Status variable
Editor\GUI\McpDebugWindow.cs,格式警告,Format warning
Editor\GUI\McpDebugWindow.cs,复制失败,Copy failed
Editor\GUI\McpDebugWindow.cs,错误信息,Error info
Editor\GUI\McpDebugWindow.cs,结果详情,Result details
Editor\GUI\McpDebugWindow.cs,设置焦点,Set focus
Editor\GUI\McpDebugWindow.cs,错误汇总,Error summary
Editor\GUI\McpDebugWindow.cs,创建分组,Create group
Editor\GUI\McpDebugWindow.cs,执行错误,Execution error
Editor\GUI\McpDebugWindow.cs,分条显示,Display line by line
Editor\GUI\McpDebugWindow.cs,缩小高度,Reduce height
Editor\GUI\McpDebugWindow.cs,取消编辑,Cancel editing
Editor\GUI\McpDebugWindow.cs,粘贴失败,Paste failed
Editor\GUI\McpDebugWindow.cs,无法记录,Unable to record
Editor\GUI\McpDebugWindow.cs,直接返回,Directly return
Editor\GUI\McpDebugWindow.cs,必须包含,Must contain
Editor\GUI\McpDebugWindow.cs,执行记录,Execution record
Editor\GUI\McpDebugWindow.cs,格式状态,Format state
Editor\GUI\McpDebugWindow.cs,避免二次,Avoid twice
Editor\GUI\McpDebugWindow.cs,结果为空,Result is empty
Editor\GUI\McpDebugWindow.cs,确认删除,Confirm deletion
Editor\GUI\McpDebugWindow.cs,直接使用,Direct use
Editor\GUI\McpDebugWindow.cs,只有包含,Only contains
Editor\GUI\McpDebugWindow.cs,编辑模式,Edit mode
Editor\GUI\McpDebugWindow.cs,保守估计,Conservative estimate
Editor\GUI\McpDebugWindow.cs,总高度,Total height
Editor\GUI\McpDebugWindow.cs,并保持,And keep
Editor\GUI\McpDebugWindow.cs,剪切板,Clipboard
Editor\GUI\McpDebugWindow.cs,适当的,Appropriate
Editor\GUI\McpDebugWindow.cs,保持为,Keep as
Editor\GUI\McpDebugWindow.cs,键值对,Key-value pair
Editor\GUI\McpDebugWindow.cs,个空格,Spaces
Editor\GUI\McpDebugWindow.cs,输入的,Input
Editor\GUI\McpDebugWindow.cs,上绘制,Draw above
Editor\GUI\McpDebugWindow.cs,执行中,Executing
Editor\GUI\McpDebugWindow.cs,在原始,In original
Editor\GUI\McpDebugWindow.cs,才处理,Process only then
Editor\GUI\McpDebugWindow.cs,输入框,Input box
Editor\GUI\McpDebugWindow.cs,已复制,Copied
Editor\GUI\McpDebugWindow.cs,第一行,First row
Editor\GUI\McpDebugWindow.cs,左上角,Top left
Editor\GUI\McpDebugWindow.cs,已截断,Truncated
Editor\GUI\McpDebugWindow.cs,第二行,Second row
Editor\GUI\McpDebugWindow.cs,检查其,Check its
Editor\GUI\McpDebugWindow.cs,列表项,Item in list
Editor\GUI\McpDebugWindow.cs,尝试从,Try from
Editor\GUI\McpDebugWindow.cs,的位置,Position of
Editor\GUI\McpDebugWindow.cs,格式化,Format
Editor\GUI\McpDebugWindow.cs,的缩进,Indent of
Editor\GUI\McpDebugWindow.cs,带滚动,With scroll
Editor\GUI\McpDebugWindow.cs,如果有,If any
Editor\GUI\McpDebugWindow.cs,但不是,But not
Editor\GUI\McpDebugWindow.cs,请输入,Please enter
Editor\GUI\McpDebugWindow.cs,限制在,Limit to
Editor\GUI\McpDebugWindow.cs,函数名,Function name
Editor\GUI\McpDebugWindow.cs,分隔条,Separator
Editor\GUI\McpDebugWindow.cs,简单的,Simple
Editor\GUI\McpDebugWindow.cs,有效的,Valid
Editor\GUI\McpDebugWindow.cs,使用,Use
Editor\GUI\McpDebugWindow.cs,管理,Manage
Editor\GUI\McpDebugWindow.cs,名称,Name
Editor\GUI\McpDebugWindow.cs,之间,Between
Editor\GUI\McpDebugWindow.cs,禁用,Disable
Editor\GUI\McpDebugWindow.cs,可选,Optional
Editor\GUI\McpDebugWindow.cs,空行,Empty line
Editor\GUI\McpDebugWindow.cs,调用,Call
Editor\GUI\McpDebugWindow.cs,字段,Field
Editor\GUI\McpDebugWindow.cs,分组,Group
Editor\GUI\McpDebugWindow.cs,计算,Calculate
Editor\GUI\McpDebugWindow.cs,基于,Based on
Editor\GUI\McpDebugWindow.cs,部分,Partial
Editor\GUI\McpDebugWindow.cs,展开,Expand
Editor\GUI\McpDebugWindow.cs,开始,Start
Editor\GUI\McpDebugWindow.cs,清空,Clear
Editor\GUI\McpDebugWindow.cs,边框,Border
Editor\GUI\McpDebugWindow.cs,刷新,Refresh
Editor\GUI\McpDebugWindow.cs,失败,Failure
Editor\GUI\McpDebugWindow.cs,函数,Function
Editor\GUI\McpDebugWindow.cs,提示,Prompt
Editor\GUI\McpDebugWindow.cs,错误,Error
Editor\GUI\McpDebugWindow.cs,支持,Support
Editor\GUI\McpDebugWindow.cs,行数,Line count
Editor\GUI\McpDebugWindow.cs,高度,Height
Editor\GUI\McpDebugWindow.cs,解析,Parse
Editor\GUI\McpDebugWindow.cs,的行,Row of
Editor\GUI\McpDebugWindow.cs,格式,Format
Editor\GUI\McpDebugWindow.cs,内容,Content
Editor\GUI\McpDebugWindow.cs,文本,Text
Editor\GUI\McpDebugWindow.cs,更新,Update
Editor\GUI\McpDebugWindow.cs,取消,Cancel
Editor\GUI\McpDebugWindow.cs,样式,Style
Editor\GUI\McpDebugWindow.cs,添加,Add
Editor\GUI\McpDebugWindow.cs,显示,Show
Editor\GUI\McpDebugWindow.cs,检测,Detect
Editor\GUI\McpDebugWindow.cs,索引,Index
Editor\GUI\McpDebugWindow.cs,内部,Internal
Editor\GUI\McpDebugWindow.cs,原始,Original
Editor\GUI\McpDebugWindow.cs,成功,Success
Editor\GUI\McpDebugWindow.cs,检查,Check
Editor\GUI\McpDebugWindow.cs,返回,Return
Editor\GUI\McpDebugWindow.cs,单击,Click
Editor\GUI\McpDebugWindow.cs,删除,Delete
Editor\GUI\McpDebugWindow.cs,描述,Description
Editor\GUI\McpDebugWindow.cs,模式,Mode
Editor\GUI\McpDebugWindow.cs,间距,Spacing
Editor\GUI\McpDebugWindow.cs,注意,Note
Editor\GUI\McpDebugWindow.cs,字符,Character
Editor\GUI\McpDebugWindow.cs,状态,Status
Editor\GUI\McpDebugWindow.cs,特征,Feature
Editor\GUI\McpDebugWindow.cs,影响,Impact
Editor\GUI\McpDebugWindow.cs,标题,Title
Editor\GUI\McpDebugWindow.cs,确定,Confirm
Editor\GUI\McpDebugWindow.cs,橙色,Orange
Editor\GUI\McpDebugWindow.cs,执行,Execute
Editor\GUI\McpDebugWindow.cs,验证,Validate
Editor\GUI\McpDebugWindow.cs,输入,Input
Editor\GUI\McpDebugWindow.cs,不受,Not subject to
Editor\GUI\McpDebugWindow.cs,切换,Switch
Editor\GUI\McpDebugWindow.cs,隐藏,Hide
Editor\GUI\McpDebugWindow.cs,时间,Time
Editor\GUI\McpDebugWindow.cs,来源,Source
Editor\GUI\McpDebugWindow.cs,行,Line
Editor\GUI\McpDebugWindow.cs,或,Or
Editor\GUI\McpDebugWindow.cs,如,Such as
Editor\GUI\McpDebugWindow.cs,空,Empty
Editor\GUI\McpDebugWindow.cs,块,Block
Editor\GUI\McpDebugWindow.cs,非,Non
Editor\GUI\McpDebugWindow.cs,从,From
Editor\GUI\McpDebugWindow.cs,的,Of
Editor\GUI\McpDebugWindow.cs,在,At
Editor\GUI\McpDebugWindow.cs,吗,?
Editor\GUI\McpDebugWindow.cs,和,And
Editor\GUI\NodeSpriteInfoDrawer.cs,并支持载入图片按钮,And support load picture button
Editor\GUI\NodeSpriteInfoDrawer.cs,计算字段的矩形区域,Calculate field rectangle area
Editor\GUI\NodeSpriteInfoDrawer.cs,三个标签的总宽度,Total width of three labels
Editor\GUI\NodeSpriteInfoDrawer.cs,绘制标签和字段,Draw label and field
Editor\GUI\NodeSpriteInfoDrawer.cs,不缩进子属性,Don't indent child property
Editor\GUI\NodeSpriteInfoDrawer.cs,显示在同一行,Show in one line
Editor\GUI\NodeSpriteInfoDrawer.cs,每个字段占,Each field occupies
Editor\GUI\NodeSpriteInfoDrawer.cs,的自定义,Customized of
Editor\GUI\NodeSpriteInfoDrawer.cs,恢复缩进,Restore indent
Editor\GUI\NodeSpriteInfoDrawer.cs,标签宽度,Label width
Editor\GUI\NodeSpriteInfoDrawer.cs,间距,Spacing
Editor\GUI\NodeSpriteInfoDrawer.cs,宽度,Width
Editor\GUI\NodeSpriteInfoDrawer.cs,和,And
Editor\GUI\NodeSpriteInfoDrawer.cs,让,Let
Editor\GUI\UIDefineRuleObjectEditor.cs,优先选择在指定路径下的文件,Prefer file under specified path
Editor\GUI\UIDefineRuleObjectEditor.cs,如果在指定路径下没找到,If not found under specified path
Editor\GUI\UIDefineRuleObjectEditor.cs,构建完整的文件路径,Build complete file path
Editor\GUI\UIDefineRuleObjectEditor.cs,解析结果并构建消息,Parse result and construct message
Editor\GUI\UIDefineRuleObjectEditor.cs,请基于这些信息基于,Please base on this info
Editor\GUI\UIDefineRuleObjectEditor.cs,制作规则和配置信息,Create rules and config info
Editor\GUI\UIDefineRuleObjectEditor.cs,拷贝内容到剪贴板,Copy content to clipboard
Editor\GUI\UIDefineRuleObjectEditor.cs,使用第一个找到的,Use first found
Editor\GUI\UIDefineRuleObjectEditor.cs,如果直接加载失败,If direct load fails
Editor\GUI\UIDefineRuleObjectEditor.cs,如果立即有结果,If immediate result
Editor\GUI\UIDefineRuleObjectEditor.cs,自定义折叠标题,Customize collapse title
Editor\GUI\UIDefineRuleObjectEditor.cs,获取序列化属性,Get serialized property
Editor\GUI\UIDefineRuleObjectEditor.cs,字符串以便解析,String for parsing
Editor\GUI\UIDefineRuleObjectEditor.cs,绘制基本属性,Draw basic property
Editor\GUI\UIDefineRuleObjectEditor.cs,将结果转换为,Convert result to
Editor\GUI\UIDefineRuleObjectEditor.cs,注册完成回调,Register completion callback
Editor\GUI\UIDefineRuleObjectEditor.cs,批量载入所有,Load all in batch
Editor\GUI\UIDefineRuleObjectEditor.cs,规则到剪贴板,Rules to clipboard
Editor\GUI\UIDefineRuleObjectEditor.cs,拷贝到剪贴板,Copy to clipboard
Editor\GUI\UIDefineRuleObjectEditor.cs,尝试查找文件,Attempt to find file
Editor\GUI\UIDefineRuleObjectEditor.cs,验证并获取,Validate and get
Editor\GUI\UIDefineRuleObjectEditor.cs,每个字段占,Each field occupies
Editor\GUI\UIDefineRuleObjectEditor.cs,构建发送到,Build send to
Editor\GUI\UIDefineRuleObjectEditor.cs,的自定义,Customize of
Editor\GUI\UIDefineRuleObjectEditor.cs,创建参数,Create parameter
Editor\GUI\UIDefineRuleObjectEditor.cs,规则信息,Rule info
Editor\GUI\UIDefineRuleObjectEditor.cs,直接使用,Direct use
Editor\GUI\UIDefineRuleObjectEditor.cs,操作按钮,Operation button
Editor\GUI\UIDefineRuleObjectEditor.cs,项目中的,In project
Editor\GUI\UIDefineRuleObjectEditor.cs,界面开发,UI development
Editor\GUI\UIDefineRuleObjectEditor.cs,公共方法,Public method
Editor\GUI\UIDefineRuleObjectEditor.cs,折叠状态,Collapse state
Editor\GUI\UIDefineRuleObjectEditor.cs,尝试加载,Attempt to load
Editor\GUI\UIDefineRuleObjectEditor.cs,以下是,As below
Editor\GUI\UIDefineRuleObjectEditor.cs,的消息,Message of
Editor\GUI\UIDefineRuleObjectEditor.cs,列表,List
Editor\GUI\UIDefineRuleObjectEditor.cs,规则,Rule
Editor\GUI\UIDefineRuleObjectEditor.cs,按钮,Button
Editor\GUI\UIDefineRuleObjectEditor.cs,调用,Call
Editor\GUI\UIDefineRuleObjectEditor.cs,宽度,Width
Editor\GUI\UIDefineRuleObjectEditor.cs,使用,Use
Editor\GUI\UIDefineRuleObjectEditor.cs,绘制,Draw
Editor\GUI\UIDefineRuleObjectEditor.cs,包含,Contain
Editor\GUI\UIDefineRuleObjectEditor.cs,创建,Create
Editor\GUI\UIDefineRuleObjectEditor.cs,实例,Instance
Editor\GUI\UIDefineRuleObjectEditor.cs,名称,Name
Editor\GUI\UIDefineRuleObjectEditor.cs,清空,Clear
Editor\GUI\UIDefineRuleObjectEditor.cs,获取,Get
Editor\GUI\UIDefineRuleObjectEditor.cs,实现,Implement
Editor\GUI\UIDefineRuleObjectEditor.cs,拷贝,Copy
Editor\GUI\UIDefineRuleObjectEditor.cs,的,Of
Editor\GUI\UIDefineRuleObjectEditor.cs,和,And
Editor\Model\FigmaSettings.cs,不会被提交到版本控制,Will not be committed to version control
Editor\Model\FigmaSettings.cs,预览图最大尺寸,Maximum size of preview image
Editor\Model\FigmaSettings.cs,集成相关的配置,Integration related configuration
Editor\Model\FigmaSettings.cs,自动转换图片为,Automatically convert images to
Editor\Model\FigmaSettings.cs,预览图保存路径,Preview image save path
Editor\Model\FigmaSettings.cs,自动下载图片,Automatically download images
Editor\Model\FigmaSettings.cs,初始化默认值,Initialize default values
Editor\Model\FigmaSettings.cs,图片缩放倍数,Image scale factor
Editor\Model\FigmaSettings.cs,资产数据路径,Asset data path
Editor\Model\FigmaSettings.cs,默认下载路径,Default download path
Editor\Model\FigmaSettings.cs,引擎支持效果,Engine-supported features
Editor\Model\FigmaSettings.cs,用于管理与,Used to manage and
Editor\Model\FigmaSettings.cs,构造函数,Constructor
Editor\Model\FigmaSettings.cs,访问令牌,Access token
Editor\Model\FigmaSettings.cs,保存在,Save in
Editor\Model\FigmaSettings.cs,设置类,Settings class
Editor\Model\FigmaSettings.cs,格式,Format
Editor\Model\FigmaSettings.cs,中,In
Editor\Model\McpExecuteRecordObject.cs,这个方法会在任何记录操作前被调用,This method is called before any record operation
Editor\Model\McpExecuteRecordObject.cs,将该分组的记录移动到默认分组,Move the records of this group to the default group
Editor\Model\McpExecuteRecordObject.cs,确保分组功能已启用并初始化,Ensure grouping feature is enabled and initialized
Editor\Model\McpExecuteRecordObject.cs,不使用分组时返回全局记录,Return global records when grouping is not used
Editor\Model\McpExecuteRecordObject.cs,条旧记录迁移到默认分组,Old records migrated to default group
Editor\Model\McpExecuteRecordObject.cs,如果删除的是当前分组,If the deleted group is the current group
Editor\Model\McpExecuteRecordObject.cs,用于存放未分类的记录,Used to store uncategorized records
Editor\Model\McpExecuteRecordObject.cs,传统模式下也需要保存,Need to save in traditional mode as well
Editor\Model\McpExecuteRecordObject.cs,迁移旧记录到默认分组,Migrate old records to default group
Editor\Model\McpExecuteRecordObject.cs,确保分组功能已初始化,Ensure grouping feature is initialized
Editor\Model\McpExecuteRecordObject.cs,添加到全局记录列表,Add to global record list
Editor\Model\McpExecuteRecordObject.cs,清空当前分组的记录,Clear records in the current group
Editor\Model\McpExecuteRecordObject.cs,获取当前分组的记录,Get records in the current group
Editor\Model\McpExecuteRecordObject.cs,移动记录到指定分组,Move records to the specified group
Editor\Model\McpExecuteRecordObject.cs,向当前分组添加记录,Add records to the current group
Editor\Model\McpExecuteRecordObject.cs,已清空当前分组记录,Current group records have been cleared
Editor\Model\McpExecuteRecordObject.cs,向指定分组添加记录,Add records to the specified group
Editor\Model\McpExecuteRecordObject.cs,方法来持久化数据,Method to persist data
Editor\Model\McpExecuteRecordObject.cs,不能删除默认分组,Cannot delete default group
Editor\Model\McpExecuteRecordObject.cs,是否启用分组功能,Whether to enable grouping feature
Editor\Model\McpExecuteRecordObject.cs,如果已经初始化过,If already initialized
Editor\Model\McpExecuteRecordObject.cs,记录也能正确保存,Records can also be saved correctly
Editor\Model\McpExecuteRecordObject.cs,获取分组统计信息,Get group statistics info
Editor\Model\McpExecuteRecordObject.cs,检查分组是否存在,Check if the group exists
Editor\Model\McpExecuteRecordObject.cs,确保只初始化一次,Ensure initialization only occurs once
Editor\Model\McpExecuteRecordObject.cs,切换到指定分组,Switch to the specified group
Editor\Model\McpExecuteRecordObject.cs,添加到当前分组,Add to the current group
Editor\Model\McpExecuteRecordObject.cs,切换到默认分组,Switch to the default group
Editor\Model\McpExecuteRecordObject.cs,列表中有旧数据,There is old data in the list
Editor\Model\McpExecuteRecordObject.cs,确保有默认分组,Ensure there is a default group
Editor\Model\McpExecuteRecordObject.cs,初始化默认分组,Initialize the default group
Editor\Model\McpExecuteRecordObject.cs,是否为默认分组,Whether it is the default group
Editor\Model\McpExecuteRecordObject.cs,当前选中的分组,Currently selected group
Editor\Model\McpExecuteRecordObject.cs,迁移到默认分组,Migrate to the default group
Editor\Model\McpExecuteRecordObject.cs,仅清空当前分组,Clear only the current group
Editor\Model\McpExecuteRecordObject.cs,如果当前分组,If current group
Editor\Model\McpExecuteRecordObject.cs,禁止清空全部,Prohibit clearing all
Editor\Model\McpExecuteRecordObject.cs,启用分组功能,Enable grouping feature
Editor\Model\McpExecuteRecordObject.cs,使用分组模式,Use grouping mode
Editor\Model\McpExecuteRecordObject.cs,分组管理功能,Group management function
Editor\Model\McpExecuteRecordObject.cs,获取当前分组,Get current group
Editor\Model\McpExecuteRecordObject.cs,系统默认分组,System default group
Editor\Model\McpExecuteRecordObject.cs,分组显示名称,Group display name
Editor\Model\McpExecuteRecordObject.cs,分组不存在,Group does not exist
Editor\Model\McpExecuteRecordObject.cs,重置为默认,Reset to default
Editor\Model\McpExecuteRecordObject.cs,重命名分组,Rename group
Editor\Model\McpExecuteRecordObject.cs,创建新分组,Create new group
Editor\Model\McpExecuteRecordObject.cs,初始化标记,Initialization flag
Editor\Model\McpExecuteRecordObject.cs,确保保存,Ensure saving
Editor\Model\McpExecuteRecordObject.cs,分组描述,Group description
Editor\Model\McpExecuteRecordObject.cs,分组唯一,Group unique
Editor\Model\McpExecuteRecordObject.cs,直接返回,Return directly
Editor\Model\McpExecuteRecordObject.cs,默认分组,Default group
Editor\Model\McpExecuteRecordObject.cs,确保即使,Ensure even if
Editor\Model\McpExecuteRecordObject.cs,记录来源,Source of record
Editor\Model\McpExecuteRecordObject.cs,删除分组,Delete group
Editor\Model\McpExecuteRecordObject.cs,传统模式,Traditional mode
Editor\Model\McpExecuteRecordObject.cs,获取分组,Get group
Editor\Model\McpExecuteRecordObject.cs,默认启用,Enabled by default
Editor\Model\McpExecuteRecordObject.cs,如果全局,If global
Editor\Model\McpExecuteRecordObject.cs,创建时间,Creation time
Editor\Model\McpExecuteRecordObject.cs,执行时间,Execution time
Editor\Model\McpExecuteRecordObject.cs,未开启,Not enabled
Editor\Model\McpExecuteRecordObject.cs,已存在,Already exists
Editor\Model\McpExecuteRecordObject.cs,个记录,Record(s)
Editor\Model\McpExecuteRecordObject.cs,分组,Group
Editor\Model\McpExecuteRecordObject.cs,成功,Success
Editor\Model\McpExecuteRecordObject.cs,使用,Use
Editor\Model\McpExecuteRecordObject.cs,毫秒,Millisecond
Editor\Model\McpExecuteRecordObject.cs,已将,Already
Editor\Model\McpExecuteRecordObject.cs,无效,Invalid
Editor\Model\McpExecuteRecordObject.cs,失败,Failure
Editor\Model\McpExecuteRecordObject.cs,或,Or
Editor\Model\McpSettings.cs,相关的配置和偏好设置,Related configuration and preferences
Editor\Model\McpSettings.cs,设置管理器,Settings manager
Editor\Model\McpSettings.cs,设置实例,Settings instance
Editor\Model\McpSettings.cs,用于管理,Used for management
Editor\Model\McpSettings.cs,保存设置,Save settings
Editor\Model\McpSettings.cs,保存到,Save to
Editor\Model\McpSettings.cs,设置,Setting
Editor\Model\McpSettings.cs,获取,Get
Editor\Model\McpUISettings.cs,下载界面控件需要的图片资源,Download image resources required by UI controls
Editor\Model\McpUISettings.cs,将图片信息记录到规则文件,Record image information to a rule file
Editor\Model\McpUISettings.cs,设置稿的坐标系已统一为,The coordinate system of the design draft has been unified as
Editor\Model\McpUISettings.cs,记录更改方式到规则文件,Record modification method to rule file
Editor\Model\McpUISettings.cs,文本相关组件必须使用,Text-related components must use
Editor\Model\McpUISettings.cs,下载并分析设计稿结构,Download and analyze the structure of the design draft
Editor\Model\McpUISettings.cs,和根容器并设置好尺寸,And the root container and set the proper size
Editor\Model\McpUISettings.cs,按照设计稿创建必要的,Create necessary (items) according to the design draft
Editor\Model\McpUISettings.cs,组件名称和原来的节点,Component name and the original node
Editor\Model\McpUISettings.cs,配置动画和过渡效果,Configure animation and transition effects
Editor\Model\McpUISettings.cs,从序列化数据中恢复,Restore from serialized data
Editor\Model\McpUISettings.cs,测试不同分辨率适配,Test adaptation for different resolutions
Editor\Model\McpUISettings.cs,工具和设计稿信息,Tool and design draft information
Editor\Model\McpUISettings.cs,测试多平台兼容性,Test multi-platform compatibility
Editor\Model\McpUISettings.cs,配置字体和本地化,Configure fonts and localization
Editor\Model\McpUISettings.cs,进行界面布局调整,Adjust UI layout
Editor\Model\McpUISettings.cs,根据项目需求定制,Customize according to project requirements
Editor\Model\McpUISettings.cs,层级进行组件调整,Adjust components by hierarchy
Editor\Model\McpUISettings.cs,优化性能和内存,Optimize performance and memory
Editor\Model\McpUISettings.cs,丰富的动画支持,Richer animation support
Editor\Model\McpUISettings.cs,优化响应式布局,Optimize responsive layout
Editor\Model\McpUISettings.cs,响应式设计优先,Responsive design first
Editor\Model\McpUISettings.cs,通用字体文件夹,Common font folder
Editor\Model\McpUISettings.cs,处理输入和事件,Handle input and events
Editor\Model\McpUISettings.cs,配置锚点和布局,Configure anchor points and layout
Editor\Model\McpUISettings.cs,灵活的渲染管线,Flexible rendering pipeline
Editor\Model\McpUISettings.cs,处理事件和交互,Handle events and interactions
Editor\Model\McpUISettings.cs,通用精灵文件夹,Common sprite folder
Editor\Model\McpUISettings.cs,类型获取默认的,Get the default by type
Editor\Model\McpUISettings.cs,可扩展架构设计,Extensible architecture design
Editor\Model\McpUISettings.cs,通用纹理文件夹,Common texture folder
Editor\Model\McpUISettings.cs,性能优化优先,Performance optimization first
Editor\Model\McpUISettings.cs,配置渲染管线,Configure rendering pipeline
Editor\Model\McpUISettings.cs,类型数据列表,Type data list
Editor\Model\McpUISettings.cs,工具使用方法,Instructions for tool usage
Editor\Model\McpUISettings.cs,绑定代码逻辑,Bind code logic
Editor\Model\McpUISettings.cs,类型都有数据,All types have data
Editor\Model\McpUISettings.cs,多分辨率适配,Multi-resolution adaptation
Editor\Model\McpUISettings.cs,事件系统独立,Independent event system
Editor\Model\McpUISettings.cs,锚点系统布局,Anchor system layout
Editor\Model\McpUISettings.cs,将下载的图片,Downloaded images
Editor\Model\McpUISettings.cs,配置组件属性,Configure component properties
Editor\Model\McpUISettings.cs,文件定义结构,File definition structure
Editor\Model\McpUISettings.cs,适合移动平台,Suitable for mobile platforms
Editor\Model\McpUISettings.cs,优化屏幕适配,Optimize screen adaptation
Editor\Model\McpUISettings.cs,仅圆角的图片,Only images with rounded corners
Editor\Model\McpUISettings.cs,加载到指定的,Load to the specified (place)
Editor\Model\McpUISettings.cs,支持复杂交互,Support complex interactions
Editor\Model\McpUISettings.cs,测试和调试,Testing and debugging
Editor\Model\McpUISettings.cs,组件化开发,Component-based development
Editor\Model\McpUISettings.cs,到规则文件,To rule file
Editor\Model\McpUISettings.cs,类型的数据,Type's data
Editor\Model\McpUISettings.cs,面板和组件,Panel and component(s)
Editor\Model\McpUISettings.cs,可以不下载,May not need to download
Editor\Model\McpUISettings.cs,跨平台兼容,Cross-platform compatibility
Editor\Model\McpUISettings.cs,记录创建的,Record created
Editor\Model\McpUISettings.cs,可序列化的,Serializable
Editor\Model\McpUISettings.cs,类型的环境,Type's environment
Editor\Model\McpUISettings.cs,当前选择的,Currently selected
Editor\Model\McpUISettings.cs,分析自定义,Analyze customization
Editor\Model\McpUISettings.cs,类型的步骤,Type's steps
Editor\Model\McpUISettings.cs,获取默认的,Get the default
Editor\Model\McpUISettings.cs,编辑器资源,Editor resources
Editor\Model\McpUISettings.cs,中心为原点,Center as origin
Editor\Model\McpUISettings.cs,创建默认的,Create default
Editor\Model\McpUISettings.cs,纹理管理,Texture management
Editor\Model\McpUISettings.cs,按理想的,According to ideal
Editor\Model\McpUISettings.cs,系统需求,System requirements
Editor\Model\McpUISettings.cs,包和组件,Package and component(s)
Editor\Model\McpUISettings.cs,图形支持,Graphics support
Editor\Model\McpUISettings.cs,脚本逻辑,Script logic
Editor\Model\McpUISettings.cs,样式文件,Style file
Editor\Model\McpUISettings.cs,设计需求,Design requirements
Editor\Model\McpUISettings.cs,环境说明,Environment description
Editor\Model\McpUISettings.cs,优化性能,Optimize performance
Editor\Model\McpUISettings.cs,事件系统,Event system
Editor\Model\McpUISettings.cs,标准兼容,Standard compatibility
Editor\Model\McpUISettings.cs,尺寸匹配,Size matching
Editor\Model\McpUISettings.cs,返回当前,Return current
Editor\Model\McpUISettings.cs,类型数据,Type data
Editor\Model\McpUISettings.cs,获取当前,Get current
Editor\Model\McpUISettings.cs,优化重要,Optimize importance
Editor\Model\McpUISettings.cs,序列化的,Serialized
Editor\Model\McpUISettings.cs,构建步骤,Build steps
Editor\Model\McpUISettings.cs,结构文件,Structure file
Editor\Model\McpUISettings.cs,适配规则,Adaptation rule
Editor\Model\McpUISettings.cs,实现核心,Core implementation
Editor\Model\McpUISettings.cs,构建环境,Build environment
Editor\Model\McpUISettings.cs,类型枚举,Type enumeration
Editor\Model\McpUISettings.cs,确保所有,Ensure all
Editor\Model\McpUISettings.cs,组件上,On component
Editor\Model\McpUISettings.cs,可视化,Visualization
Editor\Model\McpUISettings.cs,替换为,Replace with
Editor\Model\McpUISettings.cs,编辑器,Editor
Editor\Model\McpUISettings.cs,样式表,Style sheet
Editor\Model\McpUISettings.cs,尺寸和,Size and
Editor\Model\McpUISettings.cs,坐标系,Coordinate system
Editor\Model\McpUISettings.cs,序列化,Serialization
Editor\Model\McpUISettings.cs,初始化,Initialization
Editor\Model\McpUISettings.cs,自定义,Customize
Editor\Model\McpUISettings.cs,直接将,Directly (put)
Editor\Model\McpUISettings.cs,现代,Modern
Editor\Model\McpUISettings.cs,架构,Architecture
Editor\Model\McpUISettings.cs,和根,And root
Editor\Model\McpUISettings.cs,使用,Use
Editor\Model\McpUISettings.cs,优化,Optimize
Editor\Model\McpUISettings.cs,界面,Interface
Editor\Model\McpUISettings.cs,组件,Component
Editor\Model\McpUISettings.cs,创建,Create
Editor\Model\McpUISettings.cs,绑定,Bind
Editor\Model\McpUISettings.cs,设置,Setting
Editor\Model\McpUISettings.cs,分析,Analyze
Editor\Model\McpUISettings.cs,回顾,Review
Editor\Model\McpUISettings.cs,纹理,Texture
Editor\Model\McpUISettings.cs,利用,Utilize
Editor\Model\McpUISettings.cs,所有,All
Editor\Model\McpUISettings.cs,支持,Support
Editor\Model\McpUISettings.cs,字体,Font
Editor\Model\McpUISettings.cs,导入,Import
Editor\Model\McpUISettings.cs,根据,According to
Editor\Model\McpUISettings.cs,处理,Process
Editor\Model\McpUISettings.cs,布局,Layout
Editor\Model\McpUISettings.cs,配置,Configuration
Editor\Model\McpUISettings.cs,类型,Type
Editor\Model\McpUISettings.cs,系统,System
Editor\Model\McpUISettings.cs,设计,Design
Editor\Model\McpUISettings.cs,基于,Based on
Editor\Model\McpUISettings.cs,用于,For
Editor\Model\McpUISettings.cs,的,Of
Editor\Model\McpUISettings.cs,将,Will
Editor\Model\McpUISettings.cs,和,And
Editor\Provider\FigmaSettingsProvider.cs,启用这些选项可以避免下载某些可以通过,Enabling these options can avoid downloading certain things that can be (handled) via
Editor\Provider\FigmaSettingsProvider.cs,访问令牌保存在本地编辑器设置中,Access token is saved in local editor settings
Editor\Provider\FigmaSettingsProvider.cs,根据项目需求启用引擎支持效果,Enable engine-supported features based on project requirements
Editor\Provider\FigmaSettingsProvider.cs,节点数据和简化数据的保存位置,Save location for node and simplified data
Editor\Provider\FigmaSettingsProvider.cs,设置合适的下载路径和缩放倍数,Set appropriate download path and scaling factor
Editor\Provider\FigmaSettingsProvider.cs,图片和资源的本地保存位置,Local save location for images and resources
Editor\Provider\FigmaSettingsProvider.cs,包括访问令牌和下载选项,Includes access token and download options
Editor\Provider\FigmaSettingsProvider.cs,中生成个人访问令牌用于,Generate personal access token in (xxx) for
Editor\Provider\FigmaSettingsProvider.cs,功能时保存预览图的位置,Where to save preview images when using the feature
Editor\Provider\FigmaSettingsProvider.cs,下载图片后自动设置为,Automatically set to after downloading images
Editor\Provider\FigmaSettingsProvider.cs,不会被提交到版本控制,Will not be committed to version control
Editor\Provider\FigmaSettingsProvider.cs,控制下载图片的分辨率,Control the resolution of downloaded images
Editor\Provider\FigmaSettingsProvider.cs,控制预览图的最大尺寸,Control the maximum size of preview images
Editor\Provider\FigmaSettingsProvider.cs,访问令牌保存在本地,Access token saved locally
Editor\Provider\FigmaSettingsProvider.cs,获取设计资源的行为,Behavior of obtaining design resources
Editor\Provider\FigmaSettingsProvider.cs,支持运行时动态调整,Support runtime dynamic adjustment
Editor\Provider\FigmaSettingsProvider.cs,原生组件实现的效果,Features implemented by native components
Editor\Provider\FigmaSettingsProvider.cs,生成工具自动创建,Automatically created by generation tool
Editor\Provider\FigmaSettingsProvider.cs,引擎支持效果说明,Engine-supported feature description
Editor\Provider\FigmaSettingsProvider.cs,引擎支持效果设置,Engine-supported feature settings
Editor\Provider\FigmaSettingsProvider.cs,这些设置将影响从,These settings will affect from
Editor\Provider\FigmaSettingsProvider.cs,组件而非下载图片,Components instead of downloaded images
Editor\Provider\FigmaSettingsProvider.cs,预览图最大尺寸,Maximum size of preview image
Editor\Provider\FigmaSettingsProvider.cs,描边效果将使用,Stroke effect will use
Editor\Provider\FigmaSettingsProvider.cs,渐变效果将使用,Gradient effect will use
Editor\Provider\FigmaSettingsProvider.cs,圆角矩形将使用,Round-cornered rectangle will use
Editor\Provider\FigmaSettingsProvider.cs,预览图保存路径,Preview image save path
Editor\Provider\FigmaSettingsProvider.cs,下载设置说明,Download settings description
Editor\Provider\FigmaSettingsProvider.cs,不会被提交到,Will not be committed to
Editor\Provider\FigmaSettingsProvider.cs,使用流程说明,Usage process description
Editor\Provider\FigmaSettingsProvider.cs,默认下载路径,Default download path
Editor\Provider\FigmaSettingsProvider.cs,减少资源占用,Reduce resource usage
Editor\Provider\FigmaSettingsProvider.cs,数据资产路径,Data asset path
Editor\Provider\FigmaSettingsProvider.cs,下载设计资源,Download design resources
Editor\Provider\FigmaSettingsProvider.cs,自动下载图片,Automatically download images
Editor\Provider\FigmaSettingsProvider.cs,图片缩放倍数,Image scaling factor
Editor\Provider\FigmaSettingsProvider.cs,引擎支持效果,Engine-supported features
Editor\Provider\FigmaSettingsProvider.cs,用于高清显示,For high definition display
Editor\Provider\FigmaSettingsProvider.cs,而非下载图片,Instead of downloading images
Editor\Provider\FigmaSettingsProvider.cs,工具中使用,Used in tool
Editor\Provider\FigmaSettingsProvider.cs,自动转换为,Automatically convert to
Editor\Provider\FigmaSettingsProvider.cs,设置提供器,Settings provider
Editor\Provider\FigmaSettingsProvider.cs,引擎对特定,Engine for specific (features)
Editor\Provider\FigmaSettingsProvider.cs,效果的支持,Support for effects
Editor\Provider\FigmaSettingsProvider.cs,窗口中显示,Display in window
Editor\Provider\FigmaSettingsProvider.cs,的集成设置,Integration settings
Editor\Provider\FigmaSettingsProvider.cs,集成配置,Integration configuration
Editor\Provider\FigmaSettingsProvider.cs,圆角支持,Rounded corner support
Editor\Provider\FigmaSettingsProvider.cs,缩放倍数,Scaling factor
Editor\Provider\FigmaSettingsProvider.cs,渐变支持,Gradient support
Editor\Provider\FigmaSettingsProvider.cs,设置说明,Settings description
Editor\Provider\FigmaSettingsProvider.cs,提高性能,Improve performance
Editor\Provider\FigmaSettingsProvider.cs,下载路径,Download path
Editor\Provider\FigmaSettingsProvider.cs,推荐开启,Recommended to enable
Editor\Provider\FigmaSettingsProvider.cs,帮助信息,Help information
Editor\Provider\FigmaSettingsProvider.cs,获取方式,Acquisition method
Editor\Provider\FigmaSettingsProvider.cs,使用流程,Usage process
Editor\Provider\FigmaSettingsProvider.cs,访问令牌,Access token
Editor\Provider\FigmaSettingsProvider.cs,自动保存,Auto save
Editor\Provider\FigmaSettingsProvider.cs,使用说明,Instructions
Editor\Provider\FigmaSettingsProvider.cs,下载设置,Download settings
Editor\Provider\FigmaSettingsProvider.cs,描边支持,Stroke support
Editor\Provider\FigmaSettingsProvider.cs,相关设置,Related settings
Editor\Provider\FigmaSettingsProvider.cs,用于在,Used in
Editor\Provider\FigmaSettingsProvider.cs,安全性,Security
Editor\Provider\FigmaSettingsProvider.cs,如果为,If (it) is
Editor\Provider\FigmaSettingsProvider.cs,初始化,Initialization
Editor\Provider\FigmaSettingsProvider.cs,配置与,Configuration and
Editor\Provider\FigmaSettingsProvider.cs,启用后,After enabling
Editor\Provider\FigmaSettingsProvider.cs,建议,Recommendation
Editor\Provider\FigmaSettingsProvider.cs,像素,Pixel
Editor\Provider\FigmaSettingsProvider.cs,使用,Use
Editor\Provider\FigmaSettingsProvider.cs,通过,Through
Editor\Provider\FigmaSettingsProvider.cs,优势,Advantage
Editor\Provider\FigmaSettingsProvider.cs,组件,Component
Editor\Provider\FigmaSettingsProvider.cs,设置,Setting
Editor\Provider\FigmaSettingsProvider.cs,简介,Introduction
Editor\Provider\FigmaSettingsProvider.cs,访问,Access
Editor\Provider\FigmaSettingsProvider.cs,登录,Login
Editor\Provider\FigmaSettingsProvider.cs,格式,Format
Editor\Provider\FigmaSettingsProvider.cs,配置,Configuration
Editor\Provider\FigmaSettingsProvider.cs,中,In
Editor\Provider\FigmaSettingsProvider.cs,的,Of
Editor\Provider\FigmaSettingsProvider.cs,在,At
Editor\Provider\McpSettingsProvider.cs,能够帮助开发者快速创建高质量的,Can help developers quickly create high-quality
Editor\Provider\McpSettingsProvider.cs,代码管理和项目优化功能,Code management and project optimization features
Editor\Provider\McpSettingsProvider.cs,模型的深度集成,Deep integration of models
Editor\Provider\McpSettingsProvider.cs,在激活时初始化,Initialize on activation
Editor\Provider\McpSettingsProvider.cs,提供了智能的,Provides intelligent
Editor\Provider\McpSettingsProvider.cs,是一个强大的,Is a powerful
Editor\Provider\McpSettingsProvider.cs,绘制完整的,Draw complete
Editor\Provider\McpSettingsProvider.cs,窗口中显示,Display in window
Editor\Provider\McpSettingsProvider.cs,设置提供器,Settings provider
Editor\Provider\McpSettingsProvider.cs,扩展工具,Extension tool
Editor\Provider\McpSettingsProvider.cs,自动保存,Auto save
Editor\Provider\McpSettingsProvider.cs,用于在,Used in
Editor\Provider\McpSettingsProvider.cs,通过与,Through and
Editor\Provider\McpSettingsProvider.cs,生成,Generate
Editor\Provider\McpSettingsProvider.cs,项目,Project
Editor\Provider\McpSettingsProvider.cs,管理,Management
Editor\Provider\McpSettingsProvider.cs,设置,Setting
Editor\Provider\McpSettingsProvider.cs,状态,Status
Editor\Provider\McpSettingsProvider.cs,的,Of
Editor\Provider\McpUISettingsProvider.cs,构建步骤写入到代码中作为默认值吗,Write build steps into code as default values?
Editor\Provider\McpUISettingsProvider.cs,类型都有独立的构建步骤和环境配置,Each type has its own build steps and environment configuration
Editor\Provider\McpUISettingsProvider.cs,环境说明写入到代码中作为默认值吗,Write environment description into code as default value?
Editor\Provider\McpUISettingsProvider.cs,系统的自动生成规则和偏好设置,System's auto-generated rules and preferences
Editor\Provider\McpUISettingsProvider.cs,计数大括号找到方法结束位置,Count braces to find method end position
Editor\Provider\McpUISettingsProvider.cs,构建步骤已成功写入到代码中,Build steps successfully written to code
Editor\Provider\McpUISettingsProvider.cs,环境说明已成功写入到代码中,Environment description successfully written to code
Editor\Provider\McpUISettingsProvider.cs,生成时的环境和约束条件,Environment and constraints during generation
Editor\Provider\McpUISettingsProvider.cs,自动生成的默认构建步骤,Auto-generated default build steps
Editor\Provider\McpUISettingsProvider.cs,自动生成的默认环境说明,Auto-generated default environment description
Editor\Provider\McpUISettingsProvider.cs,找到方法体的开始大括号,Find start brace of method body
Editor\Provider\McpUISettingsProvider.cs,环境说明写入到代码中,Write environment description to code
Editor\Provider\McpUISettingsProvider.cs,构建步骤写入到代码中,Write build steps to code
Editor\Provider\McpUISettingsProvider.cs,找不到方法开始大括号,Could not find start brace of method
Editor\Provider\McpUISettingsProvider.cs,组件的默认行为和结构,Default behavior and structure of component
Editor\Provider\McpUISettingsProvider.cs,构建步骤为默认值吗,Are build steps default value?
Editor\Provider\McpUISettingsProvider.cs,写入过程中发生错误,Error during writing process
Editor\Provider\McpUISettingsProvider.cs,重置列表以刷新显示,Reset list to refresh display
Editor\Provider\McpUISettingsProvider.cs,这些设置将影响通过,These settings will affect via
Editor\Provider\McpUISettingsProvider.cs,环境说明为默认值吗,Is environment description default value?
Editor\Provider\McpUISettingsProvider.cs,绘制偏好组件列表,Draw preference component list
Editor\Provider\McpUISettingsProvider.cs,找到方法开始位置,Find method start position
Editor\Provider\McpUISettingsProvider.cs,生成的步骤流程,Generated step flow
Editor\Provider\McpUISettingsProvider.cs,添加写入按钮,Add write button
Editor\Provider\McpUISettingsProvider.cs,生成规则配置,Generate rule configuration
Editor\Provider\McpUISettingsProvider.cs,构建步骤列表,Build steps list
Editor\Provider\McpUISettingsProvider.cs,环境说明失败,Environment description failure
Editor\Provider\McpUISettingsProvider.cs,构建步骤失败,Build step failure
Editor\Provider\McpUISettingsProvider.cs,确定要将当前,Confirm to make current
Editor\Provider\McpUISettingsProvider.cs,保存当前数据,Save current data
Editor\Provider\McpUISettingsProvider.cs,替换整个方法,Replace entire method
Editor\Provider\McpUISettingsProvider.cs,添加重置按钮,Add reset button
Editor\Provider\McpUISettingsProvider.cs,转义双引号,Escape double quotes
Editor\Provider\McpUISettingsProvider.cs,方法的代码,Method code
Editor\Provider\McpUISettingsProvider.cs,工具生成的,Generated by tool
Editor\Provider\McpUISettingsProvider.cs,按顺序执行,Execute in order
Editor\Provider\McpUISettingsProvider.cs,窗口中显示,Display in window
Editor\Provider\McpUISettingsProvider.cs,设置提供器,Settings provider
Editor\Provider\McpUISettingsProvider.cs,确定要重置,Confirm to reset
Editor\Provider\McpUISettingsProvider.cs,类型选择器,Type selector
Editor\Provider\McpUISettingsProvider.cs,环境说明,Environment description
Editor\Provider\McpUISettingsProvider.cs,写入失败,Write failed
Editor\Provider\McpUISettingsProvider.cs,确认重置,Confirm reset
Editor\Provider\McpUISettingsProvider.cs,类型数据,Type data
Editor\Provider\McpUISettingsProvider.cs,获取当前,Get current
Editor\Provider\McpUISettingsProvider.cs,构建新的,Build new
Editor\Provider\McpUISettingsProvider.cs,写入成功,Write successful
Editor\Provider\McpUISettingsProvider.cs,类型选择,Type selection
Editor\Provider\McpUISettingsProvider.cs,当前选择,Current selection
Editor\Provider\McpUISettingsProvider.cs,构建步骤,Build step
Editor\Provider\McpUISettingsProvider.cs,确认写入,Confirm writing
Editor\Provider\McpUISettingsProvider.cs,相关设置,Related settings
Editor\Provider\McpUISettingsProvider.cs,方法代码,Method code
Editor\Provider\McpUISettingsProvider.cs,自动保存,Auto save
Editor\Provider\McpUISettingsProvider.cs,找不到,Not found
Editor\Provider\McpUISettingsProvider.cs,将当前,Make current
Editor\Provider\McpUISettingsProvider.cs,用于在,Used in
Editor\Provider\McpUISettingsProvider.cs,新步骤,New step
Editor\Provider\McpUISettingsProvider.cs,序列化,Serialization
Editor\Provider\McpUISettingsProvider.cs,初始化,Initialization
Editor\Provider\McpUISettingsProvider.cs,生成,Generate
Editor\Provider\McpUISettingsProvider.cs,确定,Confirm
Editor\Provider\McpUISettingsProvider.cs,写入,Write
Editor\Provider\McpUISettingsProvider.cs,定义,Definition
Editor\Provider\McpUISettingsProvider.cs,切换,Switch
Editor\Provider\McpUISettingsProvider.cs,当前,Current
Editor\Provider\McpUISettingsProvider.cs,配置,Configuration
Editor\Provider\McpUISettingsProvider.cs,类型,Type
Editor\Provider\McpUISettingsProvider.cs,绘制,Draw
Editor\Provider\McpUISettingsProvider.cs,重置,Reset
Editor\Provider\McpUISettingsProvider.cs,简介,Introduction
Editor\Provider\McpUISettingsProvider.cs,每种,Each
Editor\Provider\McpUISettingsProvider.cs,取消,Cancel
Editor\Provider\McpUISettingsProvider.cs,方法,Method
Editor\Provider\McpUISettingsProvider.cs,的,Of
Editor\Selector\HierarchySelector.cs,如果未找到或类型不匹配则返回,If not found or type mismatch, then return
Editor\Selector\HierarchySelector.cs,检查对象是否在当前场景的,Check if object is in current scene
Editor\Selector\HierarchySelector.cs,检查对象类型是否匹配,Check if object type matches
Editor\Selector\HierarchySelector.cs,通用的按路径查找方法,Generic search-by-path method
Editor\Selector\HierarchySelector.cs,获取对象的详细信息,Get detailed object information
Editor\Selector\HierarchySelector.cs,检查是否至少提供了,Check if at least provided
Editor\Selector\HierarchySelector.cs,场景层级对象选择器,Scene hierarchy object selector
Editor\Selector\HierarchySelector.cs,其他类型的对象不在,Other types of objects are not in
Editor\Selector\HierarchySelector.cs,如果对象在当前场景,If the object is in the current scene
Editor\Selector\HierarchySelector.cs,查找并返回唯一的,Find and return unique
Editor\Selector\HierarchySelector.cs,要获取信息的对象,Object to get information of
Editor\Selector\HierarchySelector.cs,对象信息字符串,Object information string
Editor\Selector\HierarchySelector.cs,只在当前场景的,Only in the current scene
Editor\Selector\HierarchySelector.cs,要检查的对象,Object to check
Editor\Selector\HierarchySelector.cs,只在当前场景,Only in the current scene
Editor\Selector\HierarchySelector.cs,检查其场景,Check its scene
Editor\Selector\HierarchySelector.cs,找到的对象,Found object
Editor\Selector\HierarchySelector.cs,类型对象,Type object
Editor\Selector\HierarchySelector.cs,否则返回,Otherwise return
Editor\Selector\HierarchySelector.cs,通用的按,General by
Editor\Selector\HierarchySelector.cs,查找方法,Search method
Editor\Selector\HierarchySelector.cs,要查找的,To search
Editor\Selector\HierarchySelector.cs,查找对象,Search object
Editor\Selector\HierarchySelector.cs,参数之一,One of the parameters
Editor\Selector\HierarchySelector.cs,对象类型,Object type
Editor\Selector\HierarchySelector.cs,优先使用,Prefer to use
Editor\Selector\HierarchySelector.cs,的场景,Scene of
Editor\Selector\HierarchySelector.cs,如果是,If is
Editor\Selector\HierarchySelector.cs,中查找,Search in
Editor\Selector\HierarchySelector.cs,检查其,Check its
Editor\Selector\HierarchySelector.cs,中返回,Return in
Editor\Selector\HierarchySelector.cs,对象的,Object's
Editor\Selector\HierarchySelector.cs,参数,Parameter
Editor\Selector\HierarchySelector.cs,使用,Use
Editor\Selector\HierarchySelector.cs,路径,Path
Editor\Selector\HierarchySelector.cs,获取,Get
Editor\Selector\HierarchySelector.cs,只在,Only in
Editor\Selector\HierarchySelector.cs,查找,Search
Editor\Selector\HierarchySelector.cs,解析,Parse
Editor\Selector\HierarchySelector.cs,中,In
Editor\Selector\HierarchySelector.cs,或,Or
Editor\Selector\HierarchySelector.cs,按,By
Editor\Selector\IObjectSelector.cs,创建当前方法支持的参数键列表,Create list of parameter keys supported by current method
Editor\Selector\IObjectSelector.cs,定义统一的对象查找方法,Define unified object search method
Editor\Selector\IObjectSelector.cs,构建对象查找状态树,Build object search state tree
Editor\Selector\IObjectSelector.cs,对象选择器接口,Object selector interface
Editor\Selector\ObjectSelector.cs,如果未找到或类型不匹配则返回,If not found or type mismatch, then return
Editor\Selector\ObjectSelector.cs,创建当前方法支持的参数键列表,Create list of parameter keys supported by current method
Editor\Selector\ObjectSelector.cs,检查对象类型是否匹配,Check if object type matches
Editor\Selector\ObjectSelector.cs,找到的对象或错误信息,Found object or error information
Editor\Selector\ObjectSelector.cs,通用的按路径查找方法,Generic search-by-path method
Editor\Selector\ObjectSelector.cs,获取对象的详细信息,Get detailed object information
Editor\Selector\ObjectSelector.cs,检查是否至少提供了,Check if at least provided
Editor\Selector\ObjectSelector.cs,构建对象查找状态树,Build object search state tree
Editor\Selector\ObjectSelector.cs,查找并返回唯一的,Find and return unique
Editor\Selector\ObjectSelector.cs,简化的对象选择器,Simplified object selector
Editor\Selector\ObjectSelector.cs,要获取信息的对象,Object to get information of
Editor\Selector\ObjectSelector.cs,按路径搜索处理,Search and handle by path
Editor\Selector\ObjectSelector.cs,对象信息字符串,Object information string
Editor\Selector\ObjectSelector.cs,路径查找对象,Find object by path
Editor\Selector\ObjectSelector.cs,确保至少提供,Ensure that at least provided
Editor\Selector\ObjectSelector.cs,状态树上下文,State tree context
Editor\Selector\ObjectSelector.cs,尝试获取组件,Try to get component
Editor\Selector\ObjectSelector.cs,构建的状态树,Built state tree
Editor\Selector\ObjectSelector.cs,未找到则返回,If not found then return
Editor\Selector\ObjectSelector.cs,默认搜索处理,Default search handling
Editor\Selector\ObjectSelector.cs,必须继承自,Must inherit from
Editor\Selector\ObjectSelector.cs,返回唯一的,Return unique
Editor\Selector\ObjectSelector.cs,可直接调用,Can be called directly
Editor\Selector\ObjectSelector.cs,对象的路径,Path of the object
Editor\Selector\ObjectSelector.cs,找到的对象,Found object
Editor\Selector\ObjectSelector.cs,尝试作为,Try as
Editor\Selector\ObjectSelector.cs,路径加载,Path loading
Editor\Selector\ObjectSelector.cs,类型对象,Type object
Editor\Selector\ObjectSelector.cs,直接返回,Return directly
Editor\Selector\ObjectSelector.cs,通用的按,General by
Editor\Selector\ObjectSelector.cs,查找方法,Search method
Editor\Selector\ObjectSelector.cs,搜索处理,Search processing
Editor\Selector\ObjectSelector.cs,路径失败,Path failed
Editor\Selector\ObjectSelector.cs,要查找的,To search
Editor\Selector\ObjectSelector.cs,查找对象,Search object
Editor\Selector\ObjectSelector.cs,路径查找,Path search
Editor\Selector\ObjectSelector.cs,参数之一,One of the parameters
Editor\Selector\ObjectSelector.cs,对象类型,Object type
Editor\Selector\ObjectSelector.cs,优先使用,Prefer to use
Editor\Selector\ObjectSelector.cs,路径或,Path or
Editor\Selector\ObjectSelector.cs,支持按,Support by
Editor\Selector\ObjectSelector.cs,参数的,Parameter's
Editor\Selector\ObjectSelector.cs,对象的,Object's
Editor\Selector\ObjectSelector.cs,如果,If
Editor\Selector\ObjectSelector.cs,通过,Through
Editor\Selector\ObjectSelector.cs,参数,Parameter
Editor\Selector\ObjectSelector.cs,使用,Use
Editor\Selector\ObjectSelector.cs,包含,Include
Editor\Selector\ObjectSelector.cs,类型,Type
Editor\Selector\ObjectSelector.cs,路径,Path
Editor\Selector\ObjectSelector.cs,名称,Name
Editor\Selector\ObjectSelector.cs,获取,Get
Editor\Selector\ObjectSelector.cs,查找,Search
Editor\Selector\ObjectSelector.cs,数组,Array
Editor\Selector\ObjectSelector.cs,解析,Parse
Editor\Selector\ObjectSelector.cs,或,Or
Editor\Selector\ObjectSelector.cs,如,Such as
Editor\Selector\ObjectSelector.cs,是,Is
Editor\Selector\ObjectSelector.cs,和,And
Editor\Selector\ObjectSelector.cs,按,By
Editor\Selector\ProjectSelector.cs,专门处理项目资产中的对象查找,Specifically handle object search in project assets
Editor\Selector\ProjectSelector.cs,如果未找到或类型不匹配则返回,If not found or type mismatch, then return
Editor\Selector\ProjectSelector.cs,获取指定类型的所有项目资产,Get all project assets for the specified type
Editor\Selector\ProjectSelector.cs,检查对象是否是项目资产,Check if object is a project asset
Editor\Selector\ProjectSelector.cs,在指定文件夹中查找资产,Find asset in specified folder
Editor\Selector\ProjectSelector.cs,如果对象是项目资产返回,Return if object is project asset
Editor\Selector\ProjectSelector.cs,检查对象类型是否匹配,Check if object type matches
Editor\Selector\ProjectSelector.cs,通用的按路径查找方法,Generic search-by-path method
Editor\Selector\ProjectSelector.cs,获取对象的详细信息,Get detailed object information
Editor\Selector\ProjectSelector.cs,检查是否至少提供了,Check if at least provided
Editor\Selector\ProjectSelector.cs,检查对象是否是资产,Check if object is asset
Editor\Selector\ProjectSelector.cs,只在项目资产中查找,Only search in project assets
Editor\Selector\ProjectSelector.cs,项目资产对象选择器,Project asset object selector
Editor\Selector\ProjectSelector.cs,要获取信息的对象,Object to get information of
Editor\Selector\ProjectSelector.cs,对象信息字符串,Object information string
Editor\Selector\ProjectSelector.cs,资产类型的查找,Finding of asset type
Editor\Selector\ProjectSelector.cs,类型资产列表,Type asset list
Editor\Selector\ProjectSelector.cs,要检查的对象,Object to check
Editor\Selector\ProjectSelector.cs,找到的所有,All found
Editor\Selector\ProjectSelector.cs,找到的对象,Found object
Editor\Selector\ProjectSelector.cs,类型的资产,Asset of type
Editor\Selector\ProjectSelector.cs,否则返回,Otherwise return
Editor\Selector\ProjectSelector.cs,通用的按,General by
Editor\Selector\ProjectSelector.cs,查找方法,Search method
Editor\Selector\ProjectSelector.cs,要查找的,To search
Editor\Selector\ProjectSelector.cs,支持各种,Support various
Editor\Selector\ProjectSelector.cs,查找对象,Search object
Editor\Selector\ProjectSelector.cs,资产路径,Asset path
Editor\Selector\ProjectSelector.cs,查找所有,Find all
Editor\Selector\ProjectSelector.cs,参数之一,One of the parameters
Editor\Selector\ProjectSelector.cs,对象类型,Object type
Editor\Selector\ProjectSelector.cs,优先使用,Prefer to use
Editor\Selector\ProjectSelector.cs,找到的,Found
Editor\Selector\ProjectSelector.cs,对象的,Object's
Editor\Selector\ProjectSelector.cs,参数,Parameter
Editor\Selector\ProjectSelector.cs,使用,Use
Editor\Selector\ProjectSelector.cs,获取,Get
Editor\Selector\ProjectSelector.cs,查找,Search
Editor\Selector\ProjectSelector.cs,解析,Parse
Editor\Selector\ProjectSelector.cs,或,Or
Editor\StateTree\StateTree.cs,找到第一个匹配的可选参数就使用它,Use the first matching optional parameter found
Editor\StateTree\StateTree.cs,序列化字段和非序列化对象引用,Serialized fields and non-serialized object references
Editor\StateTree\StateTree.cs,添加可选参数到支持的键列表,Add optional parameter to supported key list
Editor\StateTree\StateTree.cs,如果没有则回退到旧版本的,If not, fall back to the old version
Editor\StateTree\StateTree.cs,检查参数是否存在且不为空,Check if parameter exists and is not empty
Editor\StateTree\StateTree.cs,枚举并打印当前节点的边,Enumerate and print the edges of the current node
Editor\StateTree\StateTree.cs,如果没有找到常规匹配,If no regular match is found
Editor\StateTree\StateTree.cs,首先检查是否有常规的,First check if there is a regular (matching)
Editor\StateTree\StateTree.cs,新的上下文叶子函数,New context leaf function
Editor\StateTree\StateTree.cs,查找所有可选参数键,Find all optional parameter keys
Editor\StateTree\StateTree.cs,避免与父边标签重复,Avoid duplicating parent edge tag
Editor\StateTree\StateTree.cs,优先使用新版本的,Prefer to use new version
Editor\StateTree\StateTree.cs,执行上下文包装类,Execution context wrapper class
Editor\StateTree\StateTree.cs,如果还是没有找到,If still not found
Editor\StateTree\StateTree.cs,则在子层级打印该,Then print it in the subhierarchy
Editor\StateTree\StateTree.cs,类型直接返回值,Type directly returns value
Editor\StateTree\StateTree.cs,如果是可选参数,If it is an optional parameter
Editor\StateTree\StateTree.cs,并调用新版本的,And call the new version's
Editor\StateTree\StateTree.cs,用于打印状态树,Used to print state tree
Editor\StateTree\StateTree.cs,存储可选参数的,Storage for optional parameters
Editor\StateTree\StateTree.cs,递归到子节点,Recursively to child nodes
Editor\StateTree\StateTree.cs,如果子节点的,If the child node's
Editor\StateTree\StateTree.cs,与边标签不同,Different from the edge tag
Editor\StateTree\StateTree.cs,执行错误信息,Execute error message
Editor\StateTree\StateTree.cs,打印一次节点,Print node once
Editor\StateTree\StateTree.cs,若当前节点有,If current node has
Editor\StateTree\StateTree.cs,尝试默认分支,Try default branch
Editor\StateTree\StateTree.cs,检查可选参数,Check optional parameters
Editor\StateTree\StateTree.cs,沿树唯一路径,Along the unique path of the tree
Editor\StateTree\StateTree.cs,当前层变量,Variable at current layer
Editor\StateTree\StateTree.cs,打印边标签,Print edge tag
Editor\StateTree\StateTree.cs,隐式转换,Implicit conversion
Editor\StateTree\StateTree.cs,向后兼容,Backward compatibility
Editor\StateTree\StateTree.cs,叶子节点,Leaf node
Editor\StateTree\StateTree.cs,叶子函数,Leaf function
Editor\StateTree\StateTree.cs,美化打印,Beautified print
Editor\StateTree\StateTree.cs,为边标签,As edge tag
Editor\StateTree\StateTree.cs,通配标识,Wildcard identifier
Editor\StateTree\StateTree.cs,打印标题,Print title
Editor\StateTree\StateTree.cs,根节点,Root node
Editor\StateTree\StateTree.cs,转换为,Convert to
Editor\StateTree\StateTree.cs,新版本,New version
Editor\StateTree\StateTree.cs,迁移到,Migrate to
Editor\StateTree\StateTree.cs,上下文,Context
Editor\StateTree\StateTree.cs,跳过,Skip
Editor\StateTree\StateTree.cs,支持,Support
Editor\StateTree\StateTree.cs,添加,Add
Editor\StateTree\StateTree.cs,标识,Identifier
Editor\StateTree\StateTree.cs,重写,Override
Editor\StateTree\StateTree.cs,运行,Run
Editor\StateTree\StateTree.cs,已从,Already from
Editor\StateTree\StateTree.cs,匹配,Match
Editor\StateTree\StateTree.cs,方法,Method
Editor\StateTree\StateTree.cs,框线,Box line
Editor\StateTree\StateTree.cs,键,Key
Editor\StateTree\StateTreeBuilder.cs,当指定的参数存在时进入子分支并设置,Enter subbranch and set when specified parameter exists
Editor\StateTree\StateTreeBuilder.cs,当指定的参数存在时执行对应的动作,Execute corresponding action when the specified parameter exists
Editor\StateTree\StateTreeBuilder.cs,当指定的参数存在时进入子分支,Enter subbranch when specified parameter exists
Editor\StateTree\StateTreeBuilder.cs,并添加到可选参数集合中,And add to optional parameter collection
Editor\StateTree\StateTreeBuilder.cs,参数存在时执行的动作,Action to execute when parameter exists
Editor\StateTree\StateTreeBuilder.cs,直接使用参数名作为,Directly use parameter name as
Editor\StateTree\StateTreeBuilder.cs,添加可选参数分支,Add optional parameter branch
Editor\StateTree\StateTreeBuilder.cs,添加可选参数节点,Add optional parameter node
Editor\StateTree\StateTreeBuilder.cs,要检查的参数名,Parameter name to check
Editor\StateTree\StateTreeBuilder.cs,子分支的变量,Variable of subbranch
Editor\StateTree\StateTreeBuilder.cs,导致异常,Cause anomaly
Editor\StateTree\StateTreeBuilder.cs,相当于,Equivalent to
Editor\StateTree\StateTreeBuilder.cs,的组合,Combination of
Editor\StateTree\StateTreeBuilder.cs,防止,Prevent
Editor\StateTree\StateTreeContext.cs,判断对象是否为可序列化的基本类型,Determine whether object is a serializable base type
Editor\StateTree\StateTreeContext.cs,是否找到该对象引用且类型匹配,Whether the object reference is found and type matches
Editor\StateTree\StateTreeContext.cs,序列化字段和非序列化对象引用,Serialized fields and non-serialized object references
Editor\StateTree\StateTreeContext.cs,可以用于创建新的上下文实例,Can be used to create new context instance
Editor\StateTree\StateTreeContext.cs,对象和其他复杂对象存储到,Object and other complex objects are stored to
Editor\StateTree\StateTreeContext.cs,基本类型和可序列化对象,Base types and serializable objects
Editor\StateTree\StateTreeContext.cs,获取对象引用的泛型版本,Get generic version of object reference
Editor\StateTree\StateTreeContext.cs,是否找到该键且类型匹配,Whether the key is found and type matches
Editor\StateTree\StateTreeContext.cs,对象等不可序列化的数据,Unserializable data such as objects
Editor\StateTree\StateTreeContext.cs,非序列化的对象引用字典,Non-serialized object reference dictionary
Editor\StateTree\StateTreeContext.cs,如果元素是可序列化的,If element is serializable
Editor\StateTree\StateTreeContext.cs,检查指定键是否存在于,Check if the specified key exists in
Editor\StateTree\StateTreeContext.cs,尝试获取指定类型的值,Try getting the value of the specified type
Editor\StateTree\StateTreeContext.cs,对象类型不可序列化,Object type is not serializable
Editor\StateTree\StateTreeContext.cs,是否找到该对象引用,Whether the object reference is found
Editor\StateTree\StateTreeContext.cs,可序列化的参数数据,Serializable parameter data
Editor\StateTree\StateTreeContext.cs,是否为可序列化类型,Whether it is a serializable type
Editor\StateTree\StateTreeContext.cs,可选的对象引用字典,Optional object reference dictionary
Editor\StateTree\StateTreeContext.cs,可序列化类型存储到,Serializable types are stored to
Editor\StateTree\StateTreeContext.cs,基本类型可序列化,Base type is serializable
Editor\StateTree\StateTreeContext.cs,执行上下文包装类,Execution context wrapper class
Editor\StateTree\StateTreeContext.cs,如果没找到则返回,If not found then return
Editor\StateTree\StateTreeContext.cs,是否移除了任何值,Whether any value was removed
Editor\StateTree\StateTreeContext.cs,输出的对象引用,Output object reference
Editor\StateTree\StateTreeContext.cs,如果是基本类型,If it is a base type
Editor\StateTree\StateTreeContext.cs,新的上下文实例,New context instance
Editor\StateTree\StateTreeContext.cs,移除指定键的值,Remove the value for the specified key
Editor\StateTree\StateTreeContext.cs,统一的获取方法,Unified method to get
Editor\StateTree\StateTreeContext.cs,当前上下文实例,Current context instance
Editor\StateTree\StateTreeContext.cs,可能有性能影响,May affect performance
Editor\StateTree\StateTreeContext.cs,尝试序列化测试,Try serialization test
Editor\StateTree\StateTreeContext.cs,是否找到该字段,Whether the field is found
Editor\StateTree\StateTreeContext.cs,期望的对象类型,Expected object type
Editor\StateTree\StateTreeContext.cs,调用完成回调,Invoke completion callback
Editor\StateTree\StateTreeContext.cs,是否找到该键,Whether found the key
Editor\StateTree\StateTreeContext.cs,获取对象引用,Get object reference
Editor\StateTree\StateTreeContext.cs,启动异步协程,Start asynchronous coroutine
Editor\StateTree\StateTreeContext.cs,值优先存储到,Store value preferentially to
Editor\StateTree\StateTreeContext.cs,注册完成回调,Register completion callback
Editor\StateTree\StateTreeContext.cs,是否存在该键,Whether the key exists
Editor\StateTree\StateTreeContext.cs,期望的值类型,Expected value type
Editor\StateTree\StateTreeContext.cs,枚举可序列化,Enum is serializable
Editor\StateTree\StateTreeContext.cs,设置对象引用,Set object reference
Editor\StateTree\StateTreeContext.cs,尝试类型转换,Try type conversion
Editor\StateTree\StateTreeContext.cs,要检查的对象,Object to check
Editor\StateTree\StateTreeContext.cs,直接返回值,Return value directly
Editor\StateTree\StateTreeContext.cs,尝试获取值,Try to get value
Editor\StateTree\StateTreeContext.cs,数组和集合,Array and collection
Editor\StateTree\StateTreeContext.cs,来启动协程,To start coroutine
Editor\StateTree\StateTreeContext.cs,查找优先级,Priority for search
Editor\StateTree\StateTreeContext.cs,要移除的键,Key to be removed
Editor\StateTree\StateTreeContext.cs,要访问的键,Key to access
Editor\StateTree\StateTreeContext.cs,复制上下文,Copy context
Editor\StateTree\StateTreeContext.cs,要检查的键,Key to check
Editor\StateTree\StateTreeContext.cs,创建上下文,Create context
Editor\StateTree\StateTreeContext.cs,找到的值,Found value
Editor\StateTree\StateTreeContext.cs,支持通过,Support by
Editor\StateTree\StateTreeContext.cs,基于现有,Based on existing
Editor\StateTree\StateTreeContext.cs,用于存储,Used for storing
Editor\StateTree\StateTreeContext.cs,中都移除,Remove all from
Editor\StateTree\StateTreeContext.cs,构造函数,Constructor
Editor\StateTree\StateTreeContext.cs,都没找到,None found
Editor\StateTree\StateTreeContext.cs,对象引用,Object reference
Editor\StateTree\StateTreeContext.cs,结束回调,End callback
Editor\StateTree\StateTreeContext.cs,设置规则,Set rule
Editor\StateTree\StateTreeContext.cs,谨慎使用,Use with caution
Editor\StateTree\StateTreeContext.cs,语法访问,Syntax access
Editor\StateTree\StateTreeContext.cs,输出的值,Output value
Editor\StateTree\StateTreeContext.cs,优先查找,Preferably search
Editor\StateTree\StateTreeContext.cs,可序列化,Serializable
Editor\StateTree\StateTreeContext.cs,转换失败,Conversion failed
Editor\StateTree\StateTreeContext.cs,中移除,Remove from
Editor\StateTree\StateTreeContext.cs,优先从,Prefer from
Editor\StateTree\StateTreeContext.cs,迁移到,Migrate to
Editor\StateTree\StateTreeContext.cs,同时从,Also from
Editor\StateTree\StateTreeContext.cs,字段值,Field value
Editor\StateTree\StateTreeContext.cs,字段键,Field key
Editor\StateTree\StateTreeContext.cs,输出的,Output of
Editor\StateTree\StateTreeContext.cs,中的值,Value in
Editor\StateTree\StateTreeContext.cs,对象键,Object key
Editor\StateTree\StateTreeContext.cs,对象等,Objects, etc.
Editor\StateTree\StateTreeContext.cs,中没有,Not in
Editor\StateTree\StateTreeContext.cs,索引器,Indexer
Editor\StateTree\StateTreeContext.cs,使用,Use
Editor\StateTree\StateTreeContext.cs,已从,Already from
Editor\StateTree\StateTreeContext.cs,如果,If
Editor\StateTree\StateTreeContext.cs,数据,Data
Editor\StateTree\StateTreeContext.cs,设置,Setting
Editor\StateTree\StateTreeContext.cs,支持,Support
Editor\StateTree\StateTreeContext.cs,协程,Coroutine
Editor\StateTree\StateTreeContext.cs,返回,Return
Editor\StateTree\StateTreeContext.cs,获取,Get
Editor\StateTree\StateTreeContext.cs,本身,Itself
Editor\StateTree\StateTreeContext.cs,查找,Search
Editor\StateTree\StateTreeContext.cs,中,In
Editor\StateTree\StateTreeContext.cs,键,Key
Editor\StateTree\StateTreeContext.cs,值,Value
Editor\StateTree\StateTreeContext.cs,或,Or
Editor\StateTree\StateTreeContext.cs,和,And
Editor\StateTree\StateTreeContext.cs,从,From
Editor\Tools\BaseEditor.cs,创建当前方法支持的参数键列表,Create list of parameter keys supported by current method
Editor\Tools\BaseEditor.cs,处理获取编辑器状态的操作,Handle operation to get editor status
Editor\Tools\BaseEditor.cs,处理获取编辑器窗口的操作,Handle operation to get editor window
Editor\Tools\BaseEditor.cs,处理获取选择对象的操作,Handle operation to get selected object
Editor\Tools\BaseEditor.cs,对应方法名,Corresponding method name
Editor\Tools\BaseEditor.cs,系统管理,System management
Editor\Tools\GamePlay.cs,创建当前方法支持的参数键列表,Create list of parameter keys supported by current method
Editor\Tools\GamePlay.cs,初始化反射相关的类型和方法,Initialize types and methods related to reflection
Editor\Tools\GamePlay.cs,窗口相关的反射类型和方法,Reflection types and methods related to window
Editor\Tools\GamePlay.cs,实现预定义大小的设置逻辑,Implement logic to set predefined size
Editor\Tools\GamePlay.cs,发送鼠标按下和松开事件,Send mouse down and up events
Editor\Tools\GamePlay.cs,处理进入播放模式的操作,Handle the operation of entering play mode
Editor\Tools\GamePlay.cs,此功能需要更复杂的实现,This feature requires a more complex implementation
Editor\Tools\GamePlay.cs,修正截图上下颠倒的问题,Fix upside-down screenshot issue
Editor\Tools\GamePlay.cs,处理停止播放模式的操作,Handle the operation of stopping play mode
Editor\Tools\GamePlay.cs,处理设置窗口大小操作,Handle operation to set window size
Editor\Tools\GamePlay.cs,确保区域在有效范围内,Ensure the area is within valid range
Editor\Tools\GamePlay.cs,处理获取窗口信息操作,Handle operation to get window information
Editor\Tools\GamePlay.cs,模拟输入的数据结构,Simulated input data structure
Editor\Tools\GamePlay.cs,修正上下反转的问题,Fix up-down flip issue
Editor\Tools\GamePlay.cs,处理最小化窗口操作,Handle operation to minimize window
Editor\Tools\GamePlay.cs,截图和图像处理相关,Related to screenshot and image processing
Editor\Tools\GamePlay.cs,处理最大化窗口操作,Handle operation to maximize window
Editor\Tools\GamePlay.cs,恢复播放模式的操作,Restore play mode operation
Editor\Tools\GamePlay.cs,处理格式转换操作,Handle format conversion operation
Editor\Tools\GamePlay.cs,发送鼠标移动事件,Send mouse move events
Editor\Tools\GamePlay.cs,在游戏运行时通过,While running the game via
Editor\Tools\GamePlay.cs,游戏窗口管理工具,Game window manager tool
Editor\Tools\GamePlay.cs,处理图像压缩操作,Handle image compression operation
Editor\Tools\GamePlay.cs,处理开始录制操作,Handle start recording operation
Editor\Tools\GamePlay.cs,处理模拟点击操作,Handle simulated click operation
Editor\Tools\GamePlay.cs,保存压缩后的图像,Save compressed image
Editor\Tools\GamePlay.cs,实现拖拽模拟逻辑,Implement drag simulation logic
Editor\Tools\GamePlay.cs,处理模拟拖拽操作,Handle simulated drag operation
Editor\Tools\GamePlay.cs,处理批量截图操作,Handle batch screenshot operation
Editor\Tools\GamePlay.cs,处理聚焦窗口操作,Handle focus window operation
Editor\Tools\GamePlay.cs,处理图像缩放操作,Handle image resize operation
Editor\Tools\GamePlay.cs,处理停止录制操作,Handle stop recording operation
Editor\Tools\GamePlay.cs,可能需要第三方库,May require third-party library
Editor\Tools\GamePlay.cs,截图和图像处理,Screenshot and image processing
Editor\Tools\GamePlay.cs,窗口预定义大小,Predefined window size
Editor\Tools\GamePlay.cs,使用预定义大小,Use predefined size
Editor\Tools\GamePlay.cs,使用自定义大小,Use custom size
Editor\Tools\GamePlay.cs,支持输入模拟,Support input simulation
Editor\Tools\GamePlay.cs,处理区域截图,Handle region screenshot
Editor\Tools\GamePlay.cs,图像处理功能,Image processing function
Editor\Tools\GamePlay.cs,调整图像大小,Resize image
Editor\Tools\GamePlay.cs,确保目录存在,Ensure directory exists
Editor\Tools\GamePlay.cs,处理截图操作,Handle screenshot operation
Editor\Tools\GamePlay.cs,处理按键模拟,Handle key simulation
Editor\Tools\GamePlay.cs,清理原始纹理,Clear original texture
Editor\Tools\GamePlay.cs,如果需要缩放,If scaling is needed
Editor\Tools\GamePlay.cs,转换图像格式,Convert image format
Editor\Tools\GamePlay.cs,通过反射获取,Get via reflection
Editor\Tools\GamePlay.cs,输入模拟功能,Input simulation feature
Editor\Tools\GamePlay.cs,输入模拟相关,Related to input simulation
Editor\Tools\GamePlay.cs,垂直翻转纹理,Vertical flip texture
Editor\Tools\GamePlay.cs,发送按键事件,Send key event
Editor\Tools\GamePlay.cs,开始批量截图,Start batch screenshot
Editor\Tools\GamePlay.cs,系统模拟点击,System simulated click
Editor\Tools\GamePlay.cs,窗口管理功能,Window management function
Editor\Tools\GamePlay.cs,处理滚轮模拟,Handle mouse wheel simulation
Editor\Tools\GamePlay.cs,窗口管理相关,Related to window management
Editor\Tools\GamePlay.cs,设置按键事件,Set key event
Editor\Tools\GamePlay.cs,执行输入模拟,Perform input simulation
Editor\Tools\GamePlay.cs,输入类型枚举,Input type enumeration
Editor\Tools\GamePlay.cs,播放控制功能,Playback control feature
Editor\Tools\GamePlay.cs,执行截图操作,Perform screenshot operation
Editor\Tools\GamePlay.cs,执行区域截图,Perform region screenshot
Editor\Tools\GamePlay.cs,创建区域纹理,Create region texture
Editor\Tools\GamePlay.cs,覆盖原文件,Overwrite original file
Editor\Tools\GamePlay.cs,并读取像素,And read pixels
Editor\Tools\GamePlay.cs,计算新尺寸,Calculate new size
Editor\Tools\GamePlay.cs,对应方法名,Corresponding method name
Editor\Tools\GamePlay.cs,创建状态树,Create state tree
Editor\Tools\GamePlay.cs,输入模拟,Input simulation
Editor\Tools\GamePlay.cs,窗口信息,Window information
Editor\Tools\GamePlay.cs,窗口管理,Window management
Editor\Tools\GamePlay.cs,窗口操作,Window operation
Editor\Tools\GamePlay.cs,保存图像,Save image
Editor\Tools\GamePlay.cs,游戏控制,Game control
Editor\Tools\GamePlay.cs,窗口大小,Window size
Editor\Tools\GamePlay.cs,压缩图像,Compress image
Editor\Tools\GamePlay.cs,辅助方法,Auxiliary method
Editor\Tools\GamePlay.cs,图像处理,Image processing
Editor\Tools\GamePlay.cs,模拟滚轮,Simulate mouse wheel
Editor\Tools\GamePlay.cs,截图相关,Screenshot related
Editor\Tools\GamePlay.cs,模拟点击,Simulate click
Editor\Tools\GamePlay.cs,加载纹理,Load texture
Editor\Tools\GamePlay.cs,高级功能,Advanced feature
Editor\Tools\GamePlay.cs,模拟按键,Simulate key press
Editor\Tools\GamePlay.cs,播放控制,Playback control
Editor\Tools\GamePlay.cs,模拟拖拽,Simulate drag
Editor\Tools\GamePlay.cs,缩放纹理,Scale texture
Editor\Tools\GamePlay.cs,截图功能,Screenshot feature
Editor\Tools\GamePlay.cs,处理暂停,Handle pause
Editor\Tools\GamePlay.cs,窗口实例,Window instance
Editor\Tools\GamePlay.cs,窗口的,Window's
Editor\Tools\GamePlay.cs,创建,Create
Editor\Tools\GamePlay.cs,设置,Set
Editor\Tools\GamePlay.cs,获取,Get
Editor\Tools\GamePlay.cs,窗口,Window
Editor\Tools\GamePlay.cs,类型,Type
Editor\Tools\ObjectDelete.cs,检查是否是资源删除来决定是否需要确认,Check if resource deletion requires confirmation
Editor\Tools\ObjectDelete.cs,异步处理需要用户确认的删除操作,Asynchronously handle delete actions requiring user confirmation
Editor\Tools\ObjectDelete.cs,异步处理未明确确认的删除操作,Asynchronously handle unconfirmed deletions
Editor\Tools\ObjectDelete.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\ObjectDelete.cs,处理需要用户确认的删除操作,Handle delete actions requiring user confirmation
Editor\Tools\ObjectDelete.cs,从执行上下文中提取唯一目标,Extract unique target from execution context
Editor\Tools\ObjectDelete.cs,检查是否是资源删除操作,Check if it is a resource deletion operation
Editor\Tools\ObjectDelete.cs,参数判断是否是资源路径,Determine if parameter is a resource path
Editor\Tools\ObjectDelete.cs,资源删除需要确认对话框,Resource delete requires confirmation dialog
Editor\Tools\ObjectDelete.cs,检查是否是资源文件删除,Check if resource file is being deleted
Editor\Tools\ObjectDelete.cs,处理未确认的删除操作,Handle unconfirmed delete actions
Editor\Tools\ObjectDelete.cs,如果是预制体资产本身,If it is the prefab asset itself
Editor\Tools\ObjectDelete.cs,检查预制体重定向逻辑,Check prefab redirection logic
Editor\Tools\ObjectDelete.cs,检查是否是预制体实例,Check if it is a prefab instance
Editor\Tools\ObjectDelete.cs,资源删除需要用户确认,Resource deletion requires user confirmation
Editor\Tools\ObjectDelete.cs,用户确认后执行删除,Perform deletion after user confirmation
Editor\Tools\ObjectDelete.cs,创建目标定位状态树,Create target location state tree
Editor\Tools\ObjectDelete.cs,检查是否是资源删除,Check if it is a resource deletion
Editor\Tools\ObjectDelete.cs,判断是否为资源文件,Determine if it is a resource file
Editor\Tools\ObjectDelete.cs,仅用于资源文件删除,For resource file deletions only
Editor\Tools\ObjectDelete.cs,创建操作执行状态树,Create operation execution state tree
Editor\Tools\ObjectDelete.cs,检查预制体重定向,Check prefab redirection
Editor\Tools\ObjectDelete.cs,默认为未确认删除,Default as unconfirmed deletion
Editor\Tools\ObjectDelete.cs,则认为是资源删除,Then regarded as resource deletion
Editor\Tools\ObjectDelete.cs,返回第一个找到的,Return the first found
Editor\Tools\ObjectDelete.cs,直接删除无需确认,Direct delete without confirmation
Editor\Tools\ObjectDelete.cs,这是预制体实例,This is a prefab instance
Editor\Tools\ObjectDelete.cs,避免序列化问题,Avoid serialization issues
Editor\Tools\ObjectDelete.cs,可以正常删除,Can delete normally
Editor\Tools\ObjectDelete.cs,目标查找参数,Target lookup parameter
Editor\Tools\ObjectDelete.cs,场景对象删除,Scene object deletion
Editor\Tools\ObjectDelete.cs,不是资源删除,Not a resource deletion
Editor\Tools\ObjectDelete.cs,继续正常处理,Continue normal processing
Editor\Tools\ObjectDelete.cs,资源文件删除,Resource file deletion
Editor\Tools\ObjectDelete.cs,只取第一个,Only take the first
Editor\Tools\ObjectDelete.cs,未确认删除,Unconfirmed deletion
Editor\Tools\ObjectDelete.cs,对应方法名,Corresponding method name
Editor\Tools\ObjectDelete.cs,如果路径以,If path starts with
Editor\Tools\ObjectDelete.cs,应该使用,Should use
Editor\Tools\ObjectDelete.cs,确认删除,Confirm deletion
Editor\Tools\ObjectDelete.cs,删除单个,Delete single
Editor\Tools\ObjectDelete.cs,先尝试从,First attempt from
Editor\Tools\ObjectDelete.cs,直接删除,Delete directly
Editor\Tools\ObjectDelete.cs,对象编辑,Object editing
Editor\Tools\ObjectDelete.cs,仅对,For only
Editor\Tools\ObjectDelete.cs,场景,Scene
Editor\Tools\ObjectDelete.cs,开头,Start
Editor\Tools\ObjectDelete.cs,通过,Through
Editor\Tools\ObjectDelete.cs,使用,Use
Editor\Tools\ObjectDelete.cs,命令,Command
Editor\Tools\ObjectDelete.cs,交给,Entrust to
Editor\Tools\ObjectDelete.cs,获取,Get
Editor\Tools\ObjectDelete.cs,适用,Applicable
Editor\Tools\ObjectDelete.cs,删除,Delete
Editor\Tools\ObjectDelete.cs,处理,Handle
Editor\Tools\RequestHttp.cs,如果数据不为空且没有明确的文本,If data is not empty and no explicit text
Editor\Tools\RequestHttp.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\RequestHttp.cs,判断是否为文件数据或大型内容,Determine if data is file or large content
Editor\Tools\RequestHttp.cs,仅对非文件数据且非大型内容,Only for non-file and non-large content
Editor\Tools\RequestHttp.cs,立即输出日志并刷新控制台,Immediately output log and refresh console
Editor\Tools\RequestHttp.cs,检查响应对象是否表示成功,Check if response indicates success
Editor\Tools\RequestHttp.cs,文件数据或大型内容不返回,No return for file data or large content
Editor\Tools\RequestHttp.cs,使用反射检查匿名对象的,Check anonymous object with reflection
Editor\Tools\RequestHttp.cs,获得一致的文件路径返回,Obtain consistent file path return
Editor\Tools\RequestHttp.cs,复制认证和请求头参数,Copy authentication and request header parameters
Editor\Tools\RequestHttp.cs,协程版本的文件下载器,Coroutine-based file downloader
Editor\Tools\RequestHttp.cs,带重试机制的执行方法,Execution method with retry mechanism
Editor\Tools\RequestHttp.cs,调用单个文件下载方法,Invoke single file download
Editor\Tools\RequestHttp.cs,尝试从查询参数中获取,Try to get from query parameters
Editor\Tools\RequestHttp.cs,检查是否使用表单数据,Check if form data is used
Editor\Tools\RequestHttp.cs,启动单个文件下载协程,Start a single file download coroutine
Editor\Tools\RequestHttp.cs,根据方法类型创建请求,Create request according to method type
Editor\Tools\RequestHttp.cs,检查是否为二进制数据,Check if data is binary
Editor\Tools\RequestHttp.cs,接受所有证书的处理器,Handler that accepts all certificates
Editor\Tools\RequestHttp.cs,使用协程进行批量下载,Batch download via coroutine
Editor\Tools\RequestHttp.cs,每下载完成一个文件,After each file download
Editor\Tools\RequestHttp.cs,如果是最后一次尝试,If last attempt
Editor\Tools\RequestHttp.cs,判断是否为文件数据,Check if it is file data
Editor\Tools\RequestHttp.cs,有时间处理日志显示,Have time to handle log display
Editor\Tools\RequestHttp.cs,让用户实时看到进度,Allow users to see progress in real time
Editor\Tools\RequestHttp.cs,构建包含查询参数的,Construct with query parameters included
Editor\Tools\RequestHttp.cs,添加额外的表单字段,Add extra form fields
Editor\Tools\RequestHttp.cs,支持实时控制台刷新,Support real-time console refresh
Editor\Tools\RequestHttp.cs,使用协程下载文件,Download file with coroutine
Editor\Tools\RequestHttp.cs,如果是成功的响应,If response is successful
Editor\Tools\RequestHttp.cs,启动协程批量下载,Start batch download coroutine
Editor\Tools\RequestHttp.cs,使用它来配置请求,Use it to configure request
Editor\Tools\RequestHttp.cs,确保保存目录存在,Ensure save directory exists
Editor\Tools\RequestHttp.cs,添加自定义请求头,Add custom request header
Editor\Tools\RequestHttp.cs,等待所有下载完成,Wait for all downloads to complete
Editor\Tools\RequestHttp.cs,批量协程下载完成,Batch coroutine download completed
Editor\Tools\RequestHttp.cs,用于获取额外配置,For fetching extra config
Editor\Tools\RequestHttp.cs,创建单个下载参数,Create single download parameter
Editor\Tools\RequestHttp.cs,批量协程下载文件,Batch download files by coroutine
Editor\Tools\RequestHttp.cs,可能是二进制文件,Could be binary file
Editor\Tools\RequestHttp.cs,开始批量协程下载,Begin batch coroutine download
Editor\Tools\RequestHttp.cs,简单的连通性测试,Simple connectivity test
Editor\Tools\RequestHttp.cs,规范化保存目录,Normalize save directory
Editor\Tools\RequestHttp.cs,尝试按逗号分割,Try splitting by comma
Editor\Tools\RequestHttp.cs,确保文件名合法,Ensure filename is valid
Editor\Tools\RequestHttp.cs,如果没有扩展名,If no extension
Editor\Tools\RequestHttp.cs,如果是文件数据,If it is file data
Editor\Tools\RequestHttp.cs,但不阻塞主线程,But do not block main thread
Editor\Tools\RequestHttp.cs,规范化保存路径,Normalize save path
Editor\Tools\RequestHttp.cs,请求的通用方法,General request method
Editor\Tools\RequestHttp.cs,并发下载计数器,Concurrent download counter
Editor\Tools\RequestHttp.cs,中推断文件类型,Infer file type in
Editor\Tools\RequestHttp.cs,仅用于开发测试,For development test only
Editor\Tools\RequestHttp.cs,获取请求体数据,Get request body data
Editor\Tools\RequestHttp.cs,最大并发下载数,Max concurrent downloads
Editor\Tools\RequestHttp.cs,默认二进制文件,Default binary file
Editor\Tools\RequestHttp.cs,是否为文件类型,Is file type
Editor\Tools\RequestHttp.cs,处理其他事件,Handle other events
Editor\Tools\RequestHttp.cs,默认图片格式,Default image format
Editor\Tools\RequestHttp.cs,请求执行失败,Request execution failed
Editor\Tools\RequestHttp.cs,不阻塞主线程,Do not block main thread
Editor\Tools\RequestHttp.cs,处理批量下载,Handle batch download
Editor\Tools\RequestHttp.cs,等待请求完成,Wait for request to complete
Editor\Tools\RequestHttp.cs,文件上传失败,File upload failed
Editor\Tools\RequestHttp.cs,检查下载结果,Check download result
Editor\Tools\RequestHttp.cs,批量下载进度,Batch download progress
Editor\Tools\RequestHttp.cs,获取内容类型,Get content type
Editor\Tools\RequestHttp.cs,确保目录存在,Ensure directory exists
Editor\Tools\RequestHttp.cs,包含查询参数,Include query parameters
Editor\Tools\RequestHttp.cs,开始协程下载,Start coroutine download
Editor\Tools\RequestHttp.cs,请求执行错误,Request execution error
Editor\Tools\RequestHttp.cs,请求处理方法,Request processing method
Editor\Tools\RequestHttp.cs,等待上传完成,Wait for upload completion
Editor\Tools\RequestHttp.cs,同步执行请求,Synchronously execute request
Editor\Tools\RequestHttp.cs,处理文件上传,Handle file upload
Editor\Tools\RequestHttp.cs,批量下载失败,Batch download failed
Editor\Tools\RequestHttp.cs,表示异步执行,Indicates asynchronous execution
Editor\Tools\RequestHttp.cs,同时报告进度,Report progress simultaneously
Editor\Tools\RequestHttp.cs,使用项目路径,Use project path
Editor\Tools\RequestHttp.cs,配置请求参数,Configure request parameters
Editor\Tools\RequestHttp.cs,如果有上下文,If has context
Editor\Tools\RequestHttp.cs,文件下载失败,File download failed
Editor\Tools\RequestHttp.cs,文件下载成功,File download succeeded
Editor\Tools\RequestHttp.cs,逐个下载文件,Download files one by one
Editor\Tools\RequestHttp.cs,批量下载文件,Batch download files
Editor\Tools\RequestHttp.cs,核心实现方法,Core implementation method
Editor\Tools\RequestHttp.cs,设置认证信息,Set authentication info
Editor\Tools\RequestHttp.cs,获取完整路径,Get full path
Editor\Tools\RequestHttp.cs,如果是字符串,If it is a string
Editor\Tools\RequestHttp.cs,创建下载请求,Create download request
Editor\Tools\RequestHttp.cs,默认使用协程,Default use coroutine
Editor\Tools\RequestHttp.cs,生成最终结果,Produce final result
Editor\Tools\RequestHttp.cs,处理文件下载,Handle file download
Editor\Tools\RequestHttp.cs,协程下载成功,Coroutine download succeeded
Editor\Tools\RequestHttp.cs,返回文件路径,Return file path
Editor\Tools\RequestHttp.cs,批量下载完成,Batch download completed
Editor\Tools\RequestHttp.cs,等待空闲槽位,Wait for idle slot
Editor\Tools\RequestHttp.cs,启动协程下载,Start coroutine download
Editor\Tools\RequestHttp.cs,报告下载进度,Report download progress
Editor\Tools\RequestHttp.cs,开始批量下载,Start batch download
Editor\Tools\RequestHttp.cs,协程下载文件,Download file with coroutine
Editor\Tools\RequestHttp.cs,等待下载完成,Wait for download completion
Editor\Tools\RequestHttp.cs,否则相对于,Otherwise relative to
Editor\Tools\RequestHttp.cs,个文件成功,Files succeeded
Editor\Tools\RequestHttp.cs,获取响应头,Get response header
Editor\Tools\RequestHttp.cs,生成文件名,Generate filename
Editor\Tools\RequestHttp.cs,对应方法名,Corresponding method name
Editor\Tools\RequestHttp.cs,提取文件名,Extract filename
Editor\Tools\RequestHttp.cs,转换为毫秒,Convert to milliseconds
Editor\Tools\RequestHttp.cs,带重试机制,With retry mechanism
Editor\Tools\RequestHttp.cs,协程枚举器,Coroutine enumerator
Editor\Tools\RequestHttp.cs,创建状态树,Create state tree
Editor\Tools\RequestHttp.cs,执行具体的,Execute specific
Editor\Tools\RequestHttp.cs,如果路径以,If path starts with
Editor\Tools\RequestHttp.cs,返回结果,Return result
Editor\Tools\RequestHttp.cs,参数验证,Parameter validation
Editor\Tools\RequestHttp.cs,同步等待,Sync wait
Editor\Tools\RequestHttp.cs,个文件到,Files to
Editor\Tools\RequestHttp.cs,等待一帧,Wait one frame
Editor\Tools\RequestHttp.cs,完成回调,Completion callback
Editor\Tools\RequestHttp.cs,网络功能,Network function
Editor\Tools\RequestHttp.cs,视频文件,Video file
Editor\Tools\RequestHttp.cs,构建完整,Build complete
Editor\Tools\RequestHttp.cs,基本配置,Basic config
Editor\Tools\RequestHttp.cs,图片文件,Image file
Editor\Tools\RequestHttp.cs,保存文件,Save file
Editor\Tools\RequestHttp.cs,直接返回,Directly return
Editor\Tools\RequestHttp.cs,下载文件,Download file
Editor\Tools\RequestHttp.cs,下载失败,Download failed
Editor\Tools\RequestHttp.cs,进度回调,Progress callback
Editor\Tools\RequestHttp.cs,辅助方法,Auxiliary method
Editor\Tools\RequestHttp.cs,处理响应,Handle response
Editor\Tools\RequestHttp.cs,文档文件,Document file
Editor\Tools\RequestHttp.cs,发送请求,Send request
Editor\Tools\RequestHttp.cs,成功回调,Success callback
Editor\Tools\RequestHttp.cs,检查超时,Check timeout
Editor\Tools\RequestHttp.cs,解析参数,Parse parameters
Editor\Tools\RequestHttp.cs,强制刷新,Force refresh
Editor\Tools\RequestHttp.cs,配置请求,Configure request
Editor\Tools\RequestHttp.cs,上传文件,Upload file
Editor\Tools\RequestHttp.cs,字体文件,Font file
Editor\Tools\RequestHttp.cs,尝试解析,Try parsing
Editor\Tools\RequestHttp.cs,执行请求,Execute request
Editor\Tools\RequestHttp.cs,等待重试,Wait and retry
Editor\Tools\RequestHttp.cs,保存路径,Save path
Editor\Tools\RequestHttp.cs,超时时间,Timeout
Editor\Tools\RequestHttp.cs,音频文件,Audio file
Editor\Tools\RequestHttp.cs,证书验证,Certificate validation
Editor\Tools\RequestHttp.cs,个文件,Files
Editor\Tools\RequestHttp.cs,如果是,If is
Editor\Tools\RequestHttp.cs,上下文,Context
Editor\Tools\RequestHttp.cs,控制台,Console
Editor\Tools\RequestHttp.cs,文件夹,Folder
Editor\Tools\RequestHttp.cs,重定向,Redirect
Editor\Tools\RequestHttp.cs,尝试从,Attempt from
Editor\Tools\RequestHttp.cs,请求,Request
Editor\Tools\RequestHttp.cs,主机,Host
Editor\Tools\RequestHttp.cs,使用,Use
Editor\Tools\RequestHttp.cs,阈值,Threshold
Editor\Tools\RequestHttp.cs,刷新,Refresh
Editor\Tools\RequestHttp.cs,下载,Download
Editor\Tools\RequestHttp.cs,响应,Response
Editor\Tools\RequestHttp.cs,失败,Failed
Editor\Tools\RequestHttp.cs,认证,Authentication
Editor\Tools\RequestHttp.cs,数据,Data
Editor\Tools\RequestHttp.cs,创建,Create
Editor\Tools\RequestHttp.cs,可选,Optional
Editor\Tools\RequestHttp.cs,文件,File
Editor\Tools\RequestHttp.cs,成功,Success
Editor\Tools\RequestHttp.cs,检查,Check
Editor\Tools\RequestHttp.cs,字节,Byte
Editor\Tools\RequestHttp.cs,资源,Resource
Editor\Tools\RequestHttp.cs,返回,Return
Editor\Tools\RequestHttp.cs,属性,Property
Editor\Tools\RequestHttp.cs,执行,Execute
Editor\Tools\RequestHttp.cs,异步,Async
Editor\Tools\RequestHttp.cs,数组,Array
Editor\Tools\RequestHttp.cs,解析,Parse
Editor\Tools\RequestHttp.cs,处理,Handle
Editor\Tools\RequestHttp.cs,开头,Prefix
Editor\Tools\RequestHttp.cs,包含,Contain
Editor\Tools\RequestHttp.cs,同步,Synchronous
Editor\Tools\RequestHttp.cs,秒,Second
Editor\Tools\RequestHttp.cs,头,Header
Editor\Tools\RequestHttp.cs,让,Let
Editor\Tools\RequestHttp.cs,从,From
Editor\Tools\Console\ConsoleRead.cs,原来的控制台操作实现已移动到,Original console operations have been relocated to
Editor\Tools\Console\ConsoleRead.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\Console\ConsoleRead.cs,实际的控制台操作功能已移至,Actual console operation features have been moved to
Editor\Tools\Console\ConsoleRead.cs,统一的控制台日志获取逻辑,Unified console log fetching logic
Editor\Tools\Console\ConsoleRead.cs,处理获取全部控制台日志,Handle retrieving all console logs
Editor\Tools\Console\ConsoleRead.cs,过滤包含指定文本的日志,Filter logs containing specified text
Editor\Tools\Console\ConsoleRead.cs,处理获取部分控制台日志,Handle retrieving partial console logs
Editor\Tools\Console\ConsoleRead.cs,处理未知操作的回调方法,Callback for handling unknown operations
Editor\Tools\Console\ConsoleRead.cs,处理清空控制台的操作,Handle clearing of console
Editor\Tools\Console\ConsoleRead.cs,提取消息类型参数,Extract message type parameter
Editor\Tools\Console\ConsoleRead.cs,是否已正确初始化,Whether correctly initialized
Editor\Tools\Console\ConsoleRead.cs,不设置则获取全部,Fetch all if not set
Editor\Tools\Console\ConsoleRead.cs,最大返回消息数,Maximum number of messages returned
Editor\Tools\Console\ConsoleRead.cs,获取控制台条目,Get console entries
Editor\Tools\Console\ConsoleRead.cs,不包含堆栈跟踪,Stack trace not included
Editor\Tools\Console\ConsoleRead.cs,消息类型列表,Message type list
Editor\Tools\Console\ConsoleRead.cs,默认全部类型,Default to all types
Editor\Tools\Console\ConsoleRead.cs,包含堆栈跟踪,Include stack trace
Editor\Tools\Console\ConsoleRead.cs,提取格式参数,Extract format parameter
Editor\Tools\Console\ConsoleRead.cs,文本过滤器,Text filter
Editor\Tools\Console\ConsoleRead.cs,无堆栈跟踪,No stack trace
Editor\Tools\Console\ConsoleRead.cs,清空控制台,Clear console
Editor\Tools\Console\ConsoleRead.cs,对应方法名,Corresponding method name
Editor\Tools\Console\ConsoleRead.cs,提取参数,Extract parameter
Editor\Tools\Console\ConsoleRead.cs,操作类型,Operation type
Editor\Tools\Console\ConsoleRead.cs,输出格式,Output format
Editor\Tools\Console\ConsoleRead.cs,开发工具,Development tool
Editor\Tools\Console\ConsoleRead.cs,的操作,Operation of
Editor\Tools\Console\ConsoleRead.cs,无过滤,No filter
Editor\Tools\Console\ConsoleRead.cs,有过滤,With filter
Editor\Tools\Console\ConsoleRead.cs,默认,Default
Editor\Tools\Console\ConsoleRead.cs,使用,Use
Editor\Tools\Console\ConsoleRead.cs,注意,Note
Editor\Tools\Console\ConsoleRead.cs,检查,Check
Editor\Tools\Console\ConsoleRead.cs,中,In
Editor\Tools\Console\ConsoleWrite.cs,创建一个简单的异常对象用于日志,Create a simple exception object for logging
Editor\Tools\Console\ConsoleWrite.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\Console\ConsoleWrite.cs,处理写入异常日志的操作,Handle writing exception logs
Editor\Tools\Console\ConsoleWrite.cs,处理写入警告日志的操作,Handle writing warning logs
Editor\Tools\Console\ConsoleWrite.cs,处理写入断言日志的操作,Handle writing assert logs
Editor\Tools\Console\ConsoleWrite.cs,用于在控制台中定位相关,Used to locate related in console
Editor\Tools\Console\ConsoleWrite.cs,处理未知操作的回调方法,Callback for learning unknown operations
Editor\Tools\Console\ConsoleWrite.cs,处理写入错误日志的操作,Handle writing error logs
Editor\Tools\Console\ConsoleWrite.cs,处理写入普通日志的操作,Handle writing normal logs
Editor\Tools\Console\ConsoleWrite.cs,要写入的日志消息内容,Content of log message to write
Editor\Tools\Console\ConsoleWrite.cs,格式化断言日志消息,Format assert log message
Editor\Tools\Console\ConsoleWrite.cs,提取上下文对象,Extract context object
Editor\Tools\Console\ConsoleWrite.cs,断言条件表达式,Assert condition expression
Editor\Tools\Console\ConsoleWrite.cs,上下文对象名称,Context object name
Editor\Tools\Console\ConsoleWrite.cs,格式化日志消息,Format log message
Editor\Tools\Console\ConsoleWrite.cs,用于分类和过滤,Used for categorization and filtering
Editor\Tools\Console\ConsoleWrite.cs,提取消息参数,Extract message parameter
Editor\Tools\Console\ConsoleWrite.cs,提取条件参数,Extract condition parameter
Editor\Tools\Console\ConsoleWrite.cs,提取标签参数,Extract tag parameter
Editor\Tools\Console\ConsoleWrite.cs,对应方法名,Corresponding method name
Editor\Tools\Console\ConsoleWrite.cs,日志标签,Log tag
Editor\Tools\Console\ConsoleWrite.cs,操作类型,Operation type
Editor\Tools\Console\ConsoleWrite.cs,用于断言,For assertion
Editor\Tools\Console\ConsoleWrite.cs,尝试通过,Attempt via
Editor\Tools\Console\ConsoleWrite.cs,加载资源,Load resource
Editor\Tools\Console\ConsoleWrite.cs,开发工具,Development tool
Editor\Tools\Console\ConsoleWrite.cs,尝试找到,Attempt to find
Editor\Tools\Console\ConsoleWrite.cs,仅用于,Used only for
Editor\Tools\Console\ConsoleWrite.cs,类型,Type
Editor\Tools\Console\ConsoleWrite.cs,可选,Optional
Editor\Tools\Hierarchy\HierarchyApply.cs,应用预制体实例的更改到预制体资源,Apply prefab instance changes to prefab asset
Editor\Tools\Hierarchy\HierarchyApply.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\Hierarchy\HierarchyApply.cs,是否可以连接到指定的预制体,Whether can connect to specified prefab
Editor\Tools\Hierarchy\HierarchyApply.cs,如果没有路径分隔符且没有,If no path separator and no
Editor\Tools\Hierarchy\HierarchyApply.cs,先创建一个新的预制体实例,Create a new prefab instance first
Editor\Tools\Hierarchy\HierarchyApply.cs,尝试复制兼容的组件属性,Try copying compatible component properties
Editor\Tools\Hierarchy\HierarchyApply.cs,尝试使用替换组件的方式,Attempt replacement of component method
Editor\Tools\Hierarchy\HierarchyApply.cs,处理链接预制体的操作,Handle connecting prefab operation
Editor\Tools\Hierarchy\HierarchyApply.cs,记录原对象的变换信息,Record transforms of original object
Editor\Tools\Hierarchy\HierarchyApply.cs,选择断开连接后的对象,Select objects after disconnecting
Editor\Tools\Hierarchy\HierarchyApply.cs,检查是否为预制体实例,Check if it is a prefab instance
Editor\Tools\Hierarchy\HierarchyApply.cs,复制兼容的组件属性,Copy compatible component properties
Editor\Tools\Hierarchy\HierarchyApply.cs,预制体的所有组件在,All components of prefab in
Editor\Tools\Hierarchy\HierarchyApply.cs,用预制体实例替换,Replace with prefab instance
Editor\Tools\Hierarchy\HierarchyApply.cs,选择连接后的对象,Select object after connect
Editor\Tools\Hierarchy\HierarchyApply.cs,默认连接到预制体,Default connect to prefab
Editor\Tools\Hierarchy\HierarchyApply.cs,是否与预制体兼容,Whether compatible with prefab
Editor\Tools\Hierarchy\HierarchyApply.cs,版本中可能不可用,May be unavailable in version
Editor\Tools\Hierarchy\HierarchyApply.cs,检查是否强制链接,Check if force-link
Editor\Tools\Hierarchy\HierarchyApply.cs,尝试按路径查找,Try searching by path
Editor\Tools\Hierarchy\HierarchyApply.cs,与预制体的连接,Connection with prefab
Editor\Tools\Hierarchy\HierarchyApply.cs,获取预制体资源,Get prefab asset
Editor\Tools\Hierarchy\HierarchyApply.cs,解析预制体路径,Parse prefab path
Editor\Tools\Hierarchy\HierarchyApply.cs,应用预制体更改,Apply prefab changes
Editor\Tools\Hierarchy\HierarchyApply.cs,复制序列化字段,Copy serialized fields
Editor\Tools\Hierarchy\HierarchyApply.cs,尝试按名称查找,Try to search by name
Editor\Tools\Hierarchy\HierarchyApply.cs,获取预制体信息,Get prefab info
Editor\Tools\Hierarchy\HierarchyApply.cs,然后替换原对象,Then replace original object
Editor\Tools\Hierarchy\HierarchyApply.cs,到指定的预制体,To specified prefab
Editor\Tools\Hierarchy\HierarchyApply.cs,加载预制体资源,Load prefab asset
Editor\Tools\Hierarchy\HierarchyApply.cs,断开预制体连接,Disconnect prefab connection
Editor\Tools\Hierarchy\HierarchyApply.cs,获取预制体路径,Get prefab path
Editor\Tools\Hierarchy\HierarchyApply.cs,创建预制体实例,Create prefab instance
Editor\Tools\Hierarchy\HierarchyApply.cs,比较组件类型,Compare component types
Editor\Tools\Hierarchy\HierarchyApply.cs,用于链接操作,For linking operation
Editor\Tools\Hierarchy\HierarchyApply.cs,复制变换信息,Copy transform info
Editor\Tools\Hierarchy\HierarchyApply.cs,记录撤销操作,Record undo operation
Editor\Tools\Hierarchy\HierarchyApply.cs,连接到预制体,Connect to prefab
Editor\Tools\Hierarchy\HierarchyApply.cs,设置变换信息,Set transform info
Editor\Tools\Hierarchy\HierarchyApply.cs,检查现有连接,Check existing connection
Editor\Tools\Hierarchy\HierarchyApply.cs,中都应该存在,Should all exist in
Editor\Tools\Hierarchy\HierarchyApply.cs,跳过脚本引用,Skip script references
Editor\Tools\Hierarchy\HierarchyApply.cs,搜索预制体,Search prefab
Editor\Tools\Hierarchy\HierarchyApply.cs,方法在某些,Method in some
Editor\Tools\Hierarchy\HierarchyApply.cs,删除原对象,Delete original object
Editor\Tools\Hierarchy\HierarchyApply.cs,对应方法名,Corresponding method name
Editor\Tools\Hierarchy\HierarchyApply.cs,基本检查,Basic check
Editor\Tools\Hierarchy\HierarchyApply.cs,自动添加,Auto add
Editor\Tools\Hierarchy\HierarchyApply.cs,层级管理,Hierarchy management
Editor\Tools\Hierarchy\HierarchyApply.cs,使用现代,Use modern
Editor\Tools\Hierarchy\HierarchyApply.cs,到预制体,To prefab
Editor\Tools\Hierarchy\HierarchyApply.cs,强制连接,Force connect
Editor\Tools\Hierarchy\HierarchyApply.cs,在断开前,Before disconnecting
Editor\Tools\Hierarchy\HierarchyApply.cs,获取目标,Get target
Editor\Tools\Hierarchy\HierarchyApply.cs,尝试按,Try by
Editor\Tools\Hierarchy\HierarchyApply.cs,未找到,Not found
Editor\Tools\Hierarchy\HierarchyApply.cs,扩展名,Extension
Editor\Tools\Hierarchy\HierarchyApply.cs,先检查,Check first
Editor\Tools\Hierarchy\HierarchyApply.cs,断开,Disconnect
Editor\Tools\Hierarchy\HierarchyApply.cs,连接,Connect
Editor\Tools\Hierarchy\HierarchyApply.cs,注意,Note
Editor\Tools\Hierarchy\HierarchyApply.cs,检查,Check
Editor\Tools\Hierarchy\HierarchyApply.cs,查找,Lookup
Editor\Tools\Hierarchy\HierarchyCreate.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\Hierarchy\HierarchyCreate.cs,延迟调用确保退出重命名状态,Delay call to ensure exit rename mode
Editor\Tools\Hierarchy\HierarchyCreate.cs,先取消选中以退出重命名模式,Deselect first to exit rename mode
Editor\Tools\Hierarchy\HierarchyCreate.cs,如果没有路径分隔符且没有,If no path separator and no
Editor\Tools\Hierarchy\HierarchyCreate.cs,多次尝试检测新创建的对象,Try detecting newly created object multiple times
Editor\Tools\Hierarchy\HierarchyCreate.cs,因为菜单创建可能需要时间,Menu creation may take time
Editor\Tools\Hierarchy\HierarchyCreate.cs,取消选中并退出重命名模式,Deselect and exit rename mode
Editor\Tools\Hierarchy\HierarchyCreate.cs,处理从现有对象复制的操作,Handle operations copied from existing objects
Editor\Tools\Hierarchy\HierarchyCreate.cs,多种方法尝试退出编辑状态,Attempt to exit edit status by multiple methods
Editor\Tools\Hierarchy\HierarchyCreate.cs,处理预制体路径查找逻辑,Handle prefab path lookup logic
Editor\Tools\Hierarchy\HierarchyCreate.cs,检查是否找到了新对象,Check if a new object was found
Editor\Tools\Hierarchy\HierarchyCreate.cs,记录变换和属性的变更,Record changes of transform and property
Editor\Tools\Hierarchy\HierarchyCreate.cs,记录创建前的选中对象,Record selected object before creating
Editor\Tools\Hierarchy\HierarchyCreate.cs,确保对象完全初始化,Ensure object is fully initialized
Editor\Tools\Hierarchy\HierarchyCreate.cs,默认使用源对象名称,Default to use source object's name
Editor\Tools\Hierarchy\HierarchyCreate.cs,处理从基元类型创建,Handle creation from primitive type
Editor\Tools\Hierarchy\HierarchyCreate.cs,等待预制体保存完成,Wait until prefab save completed
Editor\Tools\Hierarchy\HierarchyCreate.cs,如果没有找到新对象,If no new object found
Editor\Tools\Hierarchy\HierarchyCreate.cs,如果直接查找失败,If direct search failed
Editor\Tools\Hierarchy\HierarchyCreate.cs,如果找到了新对象,If found a new object
Editor\Tools\Hierarchy\HierarchyCreate.cs,表示保持本地坐标,Indicate to keep local coordinates
Editor\Tools\Hierarchy\HierarchyCreate.cs,检查父对象是否有,Check if parent object has
Editor\Tools\Hierarchy\HierarchyCreate.cs,尝试在场景中搜索,Try searching in scene
Editor\Tools\Hierarchy\HierarchyCreate.cs,强制退出编辑状态,Force quit edit mode
Editor\Tools\Hierarchy\HierarchyCreate.cs,是否保存为预制体,Whether to save as prefab
Editor\Tools\Hierarchy\HierarchyCreate.cs,强制结束编辑状态,Force end editing status
Editor\Tools\Hierarchy\HierarchyCreate.cs,检查菜单执行结果,Check menu execution result
Editor\Tools\Hierarchy\HierarchyCreate.cs,父对象名称或路径,Parent object name or path
Editor\Tools\Hierarchy\HierarchyCreate.cs,处理从预制体创建,Handle creation from prefab
Editor\Tools\Hierarchy\HierarchyCreate.cs,键事件来退出编辑,Key event to exit editing
Editor\Tools\Hierarchy\HierarchyCreate.cs,生成创建成功消息,Generate create success message
Editor\Tools\Hierarchy\HierarchyCreate.cs,处理从菜单创建,Handle creation from menu
Editor\Tools\Hierarchy\HierarchyCreate.cs,从基元类型创建,Create from primitive
Editor\Tools\Hierarchy\HierarchyCreate.cs,但菜单执行成功,But menu executed successfully
Editor\Tools\Hierarchy\HierarchyCreate.cs,预先选中父对象,Preselect parent object
Editor\Tools\Hierarchy\HierarchyCreate.cs,完成对象初始化,Complete object initialization
Editor\Tools\Hierarchy\HierarchyCreate.cs,创建的通用设置,Generic settings for creation
Editor\Tools\Hierarchy\HierarchyCreate.cs,清理失败的对象,Clear failed objects
Editor\Tools\Hierarchy\HierarchyCreate.cs,解析预制体路径,Parse prefab path
Editor\Tools\Hierarchy\HierarchyCreate.cs,复制创建新对象,Copy and create new object
Editor\Tools\Hierarchy\HierarchyCreate.cs,处理预制体保存,Handle prefab save
Editor\Tools\Hierarchy\HierarchyCreate.cs,应用其他设置,Apply other settings
Editor\Tools\Hierarchy\HierarchyCreate.cs,确保目录存在,Ensure directory exists
Editor\Tools\Hierarchy\HierarchyCreate.cs,生成成功消息,Generate success message
Editor\Tools\Hierarchy\HierarchyCreate.cs,作为基元类型,As primitive type
Editor\Tools\Hierarchy\HierarchyCreate.cs,应用通用设置,Apply generic settings
Editor\Tools\Hierarchy\HierarchyCreate.cs,直接代码创建,Create via code directly
Editor\Tools\Hierarchy\HierarchyCreate.cs,从预制体创建,Create from prefab
Editor\Tools\Hierarchy\HierarchyCreate.cs,父对象下创建,Create under parent object
Editor\Tools\Hierarchy\HierarchyCreate.cs,优化携程调用,Optimize coroutine call
Editor\Tools\Hierarchy\HierarchyCreate.cs,每次重试之间,Between each retry
Editor\Tools\Hierarchy\HierarchyCreate.cs,再次等待一帧,Wait another frame
Editor\Tools\Hierarchy\HierarchyCreate.cs,刷新相关窗口,Refresh related windows
Editor\Tools\Hierarchy\HierarchyCreate.cs,设置激活状态,Set activation state
Editor\Tools\Hierarchy\HierarchyCreate.cs,完成目录创建,Complete directory creation
Editor\Tools\Hierarchy\HierarchyCreate.cs,包括名称设置,Including name setting
Editor\Tools\Hierarchy\HierarchyCreate.cs,实例化预制体,Instantiate prefab
Editor\Tools\Hierarchy\HierarchyCreate.cs,保存为预制体,Save as prefab
Editor\Tools\Hierarchy\HierarchyCreate.cs,注册撤销操作,Register undo action
Editor\Tools\Hierarchy\HierarchyCreate.cs,父对象唯一,Parent object unique
Editor\Tools\Hierarchy\HierarchyCreate.cs,查找源对象,Find source object
Editor\Tools\Hierarchy\HierarchyCreate.cs,对应方法名,Corresponding method name
Editor\Tools\Hierarchy\HierarchyCreate.cs,执行菜单项,Execute menu item
Editor\Tools\Hierarchy\HierarchyCreate.cs,会自动添加,Will auto add
Editor\Tools\Hierarchy\HierarchyCreate.cs,如果指定了,If specified
Editor\Tools\Hierarchy\HierarchyCreate.cs,设置父对象,Set parent object
Editor\Tools\Hierarchy\HierarchyCreate.cs,第二个参数,Second parameter
Editor\Tools\Hierarchy\HierarchyCreate.cs,获取父对象,Get parent object
Editor\Tools\Hierarchy\HierarchyCreate.cs,处理创建空,Handle create empty
Editor\Tools\Hierarchy\HierarchyCreate.cs,搜索预制体,Search prefab
Editor\Tools\Hierarchy\HierarchyCreate.cs,预制体路径,Prefab path
Editor\Tools\Hierarchy\HierarchyCreate.cs,智能处理,Smart handling
Editor\Tools\Hierarchy\HierarchyCreate.cs,层级管理,Hierarchy management
Editor\Tools\Hierarchy\HierarchyCreate.cs,处理创建,Handle creation
Editor\Tools\Hierarchy\HierarchyCreate.cs,普通对象,Normal object
Editor\Tools\Hierarchy\HierarchyCreate.cs,进行设置,Perform settings
Editor\Tools\Hierarchy\HierarchyCreate.cs,等待一帧,Wait one frame
Editor\Tools\Hierarchy\HierarchyCreate.cs,直接创建,Create directly
Editor\Tools\Hierarchy\HierarchyCreate.cs,基元类型,Primitive type
Editor\Tools\Hierarchy\HierarchyCreate.cs,要复制的,To be copied
Editor\Tools\Hierarchy\HierarchyCreate.cs,操作类型,Operation type
Editor\Tools\Hierarchy\HierarchyCreate.cs,需要添加,Need to add
Editor\Tools\Hierarchy\HierarchyCreate.cs,异步下载,Async download
Editor\Tools\Hierarchy\HierarchyCreate.cs,缩放比例,Scale factor
Editor\Tools\Hierarchy\HierarchyCreate.cs,旋转角度,Rotation angle
Editor\Tools\Hierarchy\HierarchyCreate.cs,菜单路径,Menu path
Editor\Tools\Hierarchy\HierarchyCreate.cs,自动添加,Auto add
Editor\Tools\Hierarchy\HierarchyCreate.cs,位置坐标,Position coordinate
Editor\Tools\Hierarchy\HierarchyCreate.cs,默认使用,Default use
Editor\Tools\Hierarchy\HierarchyCreate.cs,复制对象,Copy object
Editor\Tools\Hierarchy\HierarchyCreate.cs,设置名称,Set name
Editor\Tools\Hierarchy\HierarchyCreate.cs,位置等,Location etc.
Editor\Tools\Hierarchy\HierarchyCreate.cs,的操作,Operation of
Editor\Tools\Hierarchy\HierarchyCreate.cs,如果有,If has
Editor\Tools\Hierarchy\HierarchyCreate.cs,未找到,Not found
Editor\Tools\Hierarchy\HierarchyCreate.cs,从现有,From existing
Editor\Tools\Hierarchy\HierarchyCreate.cs,所在层,Layer
Editor\Tools\Hierarchy\HierarchyCreate.cs,键事件,Key event
Editor\Tools\Hierarchy\HierarchyCreate.cs,扩展名,Extension name
Editor\Tools\Hierarchy\HierarchyCreate.cs,后缀,Suffix
Editor\Tools\Hierarchy\HierarchyCreate.cs,发送,Send
Editor\Tools\Hierarchy\HierarchyCreate.cs,等待,Wait
Editor\Tools\Hierarchy\HierarchyCreate.cs,名称,Name
Editor\Tools\Hierarchy\HierarchyCreate.cs,完成,Complete
Editor\Tools\Hierarchy\HierarchyCreate.cs,支持,Support
Editor\Tools\Hierarchy\HierarchyCreate.cs,元素,Element
Editor\Tools\Hierarchy\HierarchyCreate.cs,标签,Tag
Editor\Tools\Hierarchy\HierarchyCreate.cs,对象,Object
Editor\Tools\Hierarchy\HierarchyCreate.cs,在,In
Editor\Tools\Hierarchy\HierarchyCreate.cs,非,Non
Editor\Tools\Hierarchy\HierarchySearch.cs,尝试从所有已加载的程序集中查找,Try searching from all loaded assemblies
Editor\Tools\Hierarchy\HierarchySearch.cs,创建包含完整层级信息的搜索结果,Create search result containing full hierarchy
Editor\Tools\Hierarchy\HierarchySearch.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\Hierarchy\HierarchySearch.cs,递归获取所有子对象的完整数据,Recursively obtain complete data for all child objects
Editor\Tools\Hierarchy\HierarchySearch.cs,从当前场景搜索包含指定组件的,Search specified component from current scene
Editor\Tools\Hierarchy\HierarchySearch.cs,将通配符模式转换为正则表达式,Convert wildcard pattern to regex
Editor\Tools\Hierarchy\HierarchySearch.cs,转义正则表达式中的特殊字符,Escape special chars in regex
Editor\Tools\Hierarchy\HierarchySearch.cs,将通配符转换为正则表达式,Convert wildcard to regex
Editor\Tools\Hierarchy\HierarchySearch.cs,获取当前激活场景中的所有,Get all in active scene
Editor\Tools\Hierarchy\HierarchySearch.cs,获取当前激活场景的根对象,Get root objects in active scene
Editor\Tools\Hierarchy\HierarchySearch.cs,包含所有子对象的完整信息,Full info of all child objects
Editor\Tools\Hierarchy\HierarchySearch.cs,添加锚点以确保完整匹配,Add anchor to ensure full match
Editor\Tools\Hierarchy\HierarchySearch.cs,忽略无法访问的程序集,Ignore inaccessible assemblies
Editor\Tools\Hierarchy\HierarchySearch.cs,正则表达式或普通文本,Regex or normal text
Editor\Tools\Hierarchy\HierarchySearch.cs,避免未定义标签的错误,Avoid undefined tag errors
Editor\Tools\Hierarchy\HierarchySearch.cs,如果正则表达式无效,If regex invalid
Editor\Tools\Hierarchy\HierarchySearch.cs,检查子对象名称匹配,Check child object name match
Editor\Tools\Hierarchy\HierarchySearch.cs,获取当前对象的基本,Get current object's basic
Editor\Tools\Hierarchy\HierarchySearch.cs,默认使用按名称搜索,Default to name-based search
Editor\Tools\Hierarchy\HierarchySearch.cs,从当前场景搜索所有,Search all from current scene
Editor\Tools\Hierarchy\HierarchySearch.cs,检查是否是类型搜索,Check if type-based search
Editor\Tools\Hierarchy\HierarchySearch.cs,检查是否包含通配符,Check if wildcard present
Editor\Tools\Hierarchy\HierarchySearch.cs,获取完整的层级数据,Get full hierarchy data
Editor\Tools\Hierarchy\HierarchySearch.cs,直接使用正则表达式,Directly use regex
Editor\Tools\Hierarchy\HierarchySearch.cs,默认搜索处理函数,Default search handler
Editor\Tools\Hierarchy\HierarchySearch.cs,添加默认处理函数,Add default handler
Editor\Tools\Hierarchy\HierarchySearch.cs,尝试获取组件类型,Try to get component type
Editor\Tools\Hierarchy\HierarchySearch.cs,时使用按名称搜索,Use name-based search for
Editor\Tools\Hierarchy\HierarchySearch.cs,正则表达式字符串,Regex string
Editor\Tools\Hierarchy\HierarchySearch.cs,尝试直接获取类型,Try get type directly
Editor\Tools\Hierarchy\HierarchySearch.cs,从当前场景搜索,Search current scene
Editor\Tools\Hierarchy\HierarchySearch.cs,只包含激活对象,Active objects only
Editor\Tools\Hierarchy\HierarchySearch.cs,按通用术语搜索,Search by general term
Editor\Tools\Hierarchy\HierarchySearch.cs,从当前场景获取,Get from current scene
Editor\Tools\Hierarchy\HierarchySearch.cs,安全地检查标签,Safely check tag
Editor\Tools\Hierarchy\HierarchySearch.cs,先尝试全名匹配,Try full name match first
Editor\Tools\Hierarchy\HierarchySearch.cs,确保正确序列化,Ensure correct serialization
Editor\Tools\Hierarchy\HierarchySearch.cs,包含非激活对象,Include inactive objects
Editor\Tools\Hierarchy\HierarchySearch.cs,的完整层级数据,Full hierarchy data of
Editor\Tools\Hierarchy\HierarchySearch.cs,再遍历所有类型,Then iterate all types
Editor\Tools\Hierarchy\HierarchySearch.cs,如果是类型搜索,If type-based search
Editor\Tools\Hierarchy\HierarchySearch.cs,回退到普通搜索,Fallback to normal search
Editor\Tools\Hierarchy\HierarchySearch.cs,搜索非激活对象,Search inactive objects
Editor\Tools\Hierarchy\HierarchySearch.cs,获取所有子对象,Get all child objects
Editor\Tools\Hierarchy\HierarchySearch.cs,命名空间获取,Get by namespace
Editor\Tools\Hierarchy\HierarchySearch.cs,检查名称匹配,Check name match
Editor\Tools\Hierarchy\HierarchySearch.cs,尝试从常见的,Try from common
Editor\Tools\Hierarchy\HierarchySearch.cs,检查组件匹配,Check component match
Editor\Tools\Hierarchy\HierarchySearch.cs,包括非激活的,Including inactives
Editor\Tools\Hierarchy\HierarchySearch.cs,创建搜索结果,Create search result
Editor\Tools\Hierarchy\HierarchySearch.cs,精确名称搜索,Exact name search
Editor\Tools\Hierarchy\HierarchySearch.cs,处理搜索模式,Handle search mode
Editor\Tools\Hierarchy\HierarchySearch.cs,但保留通配符,But keep wildcard
Editor\Tools\Hierarchy\HierarchySearch.cs,包含执行时间,Include execution time
Editor\Tools\Hierarchy\HierarchySearch.cs,跳过标签匹配,Skip tag match
Editor\Tools\Hierarchy\HierarchySearch.cs,获取组件类型,Get component type
Editor\Tools\Hierarchy\HierarchySearch.cs,检查标签匹配,Check tag match
Editor\Tools\Hierarchy\HierarchySearch.cs,尝试短名匹配,Try short name match
Editor\Tools\Hierarchy\HierarchySearch.cs,匹配任意字符,Match any char
Editor\Tools\Hierarchy\HierarchySearch.cs,构建响应对象,Build result object
Editor\Tools\Hierarchy\HierarchySearch.cs,构建结果数据,Build result data
Editor\Tools\Hierarchy\HierarchySearch.cs,构建中文消息,Build Chinese message
Editor\Tools\Hierarchy\HierarchySearch.cs,获取层级索引,Get hierarchy index
Editor\Tools\Hierarchy\HierarchySearch.cs,检查层级匹配,Check hierarchy match
Editor\Tools\Hierarchy\HierarchySearch.cs,按名称搜索,Name-based search
Editor\Tools\Hierarchy\HierarchySearch.cs,包含通配符,Contains wildcard
Editor\Tools\Hierarchy\HierarchySearch.cs,当没有指定,When not specified
Editor\Tools\Hierarchy\HierarchySearch.cs,按组件搜索,Component-based search
Editor\Tools\Hierarchy\HierarchySearch.cs,按标签搜索,Tag-based search
Editor\Tools\Hierarchy\HierarchySearch.cs,使用标准的,Use standard
Editor\Tools\Hierarchy\HierarchySearch.cs,对应方法名,Corresponding method name
Editor\Tools\Hierarchy\HierarchySearch.cs,按层级搜索,Hierarchy-based search
Editor\Tools\Hierarchy\HierarchySearch.cs,标签未定义,Tag not defined
Editor\Tools\Hierarchy\HierarchySearch.cs,将转义后的,Escaped
Editor\Tools\Hierarchy\HierarchySearch.cs,消息和数据,Message and data
Editor\Tools\Hierarchy\HierarchySearch.cs,层级管理,Hierarchy management
Editor\Tools\Hierarchy\HierarchySearch.cs,成功标志,Success flag
Editor\Tools\Hierarchy\HierarchySearch.cs,创建结果,Create result
Editor\Tools\Hierarchy\HierarchySearch.cs,尝试解析,Attempt parse
Editor\Tools\Hierarchy\HierarchySearch.cs,直接使用,Directly use
Editor\Tools\Hierarchy\HierarchySearch.cs,避免重复,Avoid duplication
Editor\Tools\Hierarchy\HierarchySearch.cs,构建消息,Build message
Editor\Tools\Hierarchy\HierarchySearch.cs,默认启用,Default enabled
Editor\Tools\Hierarchy\HierarchySearch.cs,替换为,Replace as
Editor\Tools\Hierarchy\HierarchySearch.cs,内置的,Builtin
Editor\Tools\Hierarchy\HierarchySearch.cs,的模式,Pattern of
Editor\Tools\Hierarchy\HierarchySearch.cs,如果有,If has
Editor\Tools\Hierarchy\HierarchySearch.cs,通配符,Wildcard
Editor\Tools\Hierarchy\HierarchySearch.cs,并查找,And lookup
Editor\Tools\Hierarchy\HierarchySearch.cs,使用,Use
Editor\Tools\Hierarchy\HierarchySearch.cs,内置,Builtin
Editor\Tools\Hierarchy\HierarchySearch.cs,方法,Method
Editor\Tools\Hierarchy\HierarchySearch.cs,数据,Data
Editor\Tools\Hierarchy\HierarchySearch.cs,搜索,Search
Editor\Tools\Hierarchy\HierarchySearch.cs,获取,Get
Editor\Tools\Hierarchy\HierarchySearch.cs,格式,Format
Editor\Tools\Hierarchy\HierarchySearch.cs,参数,Parameter
Editor\Tools\Hierarchy\HierarchySearch.cs,按,By
Editor\Tools\Projet\ProjectOperate.cs,只查找常见的可能包含引用的资源类型,Find only common resource types that may contain references
Editor\Tools\Projet\ProjectOperate.cs,查询并选择引用指定资源的所有资源,Query and select all resources that reference the specified resource
Editor\Tools\Projet\ProjectOperate.cs,检查是否是当前文件夹的直接子项,Check if direct child of current folder
Editor\Tools\Projet\ProjectOperate.cs,根据刷新类型执行不同的刷新操作,Perform different refresh ops according to type
Editor\Tools\Projet\ProjectOperate.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\Projet\ProjectOperate.cs,主要针对脚本文件的重新编译,Mainly for script recompilation
Editor\Tools\Projet\ProjectOperate.cs,获取当前文件夹下的所有资产,Get all assets under current folder
Editor\Tools\Projet\ProjectOperate.cs,输出当前文件夹及其文件数量,Output folder and file counts
Editor\Tools\Projet\ProjectOperate.cs,选择指定资源的所有依赖项,Select all dependencies of specified resource
Editor\Tools\Projet\ProjectOperate.cs,记录开始时间用于性能监控,Record start time for performance monitoring
Editor\Tools\Projet\ProjectOperate.cs,选中所有引用此资源的资源,Select all resources referencing this one
Editor\Tools\Projet\ProjectOperate.cs,用于设置资产的各种属性,Used to set various asset properties
Editor\Tools\Projet\ProjectOperate.cs,刷新前是否保存所有资产,Whether to save all assets before refresh
Editor\Tools\Projet\ProjectOperate.cs,格式的文件夹结构字符串,Folder structure string in format of
Editor\Tools\Projet\ProjectOperate.cs,统计不同类型的资产数量,Count different asset types
Editor\Tools\Projet\ProjectOperate.cs,强制请求脚本重新编译,Force request for script recompilation
Editor\Tools\Projet\ProjectOperate.cs,保存所有待保存的资产,Save all pending assets
Editor\Tools\Projet\ProjectOperate.cs,优化的手动引用查找,Optimized manual reference lookup
Editor\Tools\Projet\ProjectOperate.cs,不触发脚本重新编译,Do not trigger script recompilation
Editor\Tools\Projet\ProjectOperate.cs,递归构建文件夹结构,Recursively build folder structure
Editor\Tools\Projet\ProjectOperate.cs,选中指定路径的资源,Select resource at specified path
Editor\Tools\Projet\ProjectOperate.cs,按名称排序子文件夹,Sort subfolders by name
Editor\Tools\Projet\ProjectOperate.cs,用于表示文件夹结构,For folder structure representation
Editor\Tools\Projet\ProjectOperate.cs,仅查找常见资源类型,Find only common asset types
Editor\Tools\Projet\ProjectOperate.cs,递归输出子文件夹,Recursively output subfolders
Editor\Tools\Projet\ProjectOperate.cs,获取项目统计信息,Get project stats info
Editor\Tools\Projet\ProjectOperate.cs,直接输出文件数量,Directly output file counts
Editor\Tools\Projet\ProjectOperate.cs,是否包含间接依赖,Whether includes indirect dependencies
Editor\Tools\Projet\ProjectOperate.cs,是否强制执行操作,Whether operation is forced
Editor\Tools\Projet\ProjectOperate.cs,如果达到最大深度,If max depth reached
Editor\Tools\Projet\ProjectOperate.cs,递归处理子文件夹,Recursively process subfolders
Editor\Tools\Projet\ProjectOperate.cs,而不是所有资源,Instead of all resources
Editor\Tools\Projet\ProjectOperate.cs,优化的手动查找,Optimized manual search
Editor\Tools\Projet\ProjectOperate.cs,固定最大深度为,Fixed maximum depth as
Editor\Tools\Projet\ProjectOperate.cs,的内置引用查找,Builtin reference search for
Editor\Tools\Projet\ProjectOperate.cs,内置的引用查找,Builtin reference search
Editor\Tools\Projet\ProjectOperate.cs,工程资产数据库,Project asset database
Editor\Tools\Projet\ProjectOperate.cs,选中所有依赖项,Select all dependencies
Editor\Tools\Projet\ProjectOperate.cs,覆盖现有文件等,Overwrite existing files etc.
Editor\Tools\Projet\ProjectOperate.cs,时为根目录路径,As root path
Editor\Tools\Projet\ProjectOperate.cs,构建文件夹结构,Build folder structure
Editor\Tools\Projet\ProjectOperate.cs,指定路径的资源,Resource at specified path
Editor\Tools\Projet\ProjectOperate.cs,获取文件夹结构,Get folder structure
Editor\Tools\Projet\ProjectOperate.cs,窗口中高亮显示,Highlight in window
Editor\Tools\Projet\ProjectOperate.cs,统计文件夹数量,Count folders
Editor\Tools\Projet\ProjectOperate.cs,资产属性字典,Asset property dictionary
Editor\Tools\Projet\ProjectOperate.cs,添加这个引用,Add this reference
Editor\Tools\Projet\ProjectOperate.cs,检查依赖关系,Check dependency relations
Editor\Tools\Projet\ProjectOperate.cs,文件夹节点类,Folder node class
Editor\Tools\Projet\ProjectOperate.cs,最大结果数量,Maximum result count
Editor\Tools\Projet\ProjectOperate.cs,限制结果数量,Limit result count
Editor\Tools\Projet\ProjectOperate.cs,统计文件数量,Count files
Editor\Tools\Projet\ProjectOperate.cs,包括资产导入,Including asset import
Editor\Tools\Projet\ProjectOperate.cs,复制时使用,Used during copy
Editor\Tools\Projet\ProjectOperate.cs,格式字符串,Format string
Editor\Tools\Projet\ProjectOperate.cs,有子文件夹,Has subfolder
Editor\Tools\Projet\ProjectOperate.cs,无子文件夹,No subfolder
Editor\Tools\Projet\ProjectOperate.cs,动画控制器,Animator controller
Editor\Tools\Projet\ProjectOperate.cs,对应方法名,Corresponding method name
Editor\Tools\Projet\ProjectOperate.cs,仅刷新资产,Refresh only assets
Editor\Tools\Projet\ProjectOperate.cs,获取资源的,Get resource's
Editor\Tools\Projet\ProjectOperate.cs,创建状态树,Create state tree
Editor\Tools\Projet\ProjectOperate.cs,脚本编译等,Script compilation etc.
Editor\Tools\Projet\ProjectOperate.cs,资产路径,Asset path
Editor\Tools\Projet\ProjectOperate.cs,排除自身,Exclude self
Editor\Tools\Projet\ProjectOperate.cs,动画片段,Animation clip
Editor\Tools\Projet\ProjectOperate.cs,查找引用,Find references
Editor\Tools\Projet\ProjectOperate.cs,尝试使用,Try using
Editor\Tools\Projet\ProjectOperate.cs,单独一行,Single line
Editor\Tools\Projet\ProjectOperate.cs,不再递归,No longer recurse
Editor\Tools\Projet\ProjectOperate.cs,目标路径,Target path
Editor\Tools\Projet\ProjectOperate.cs,项目管理,Project management
Editor\Tools\Projet\ProjectOperate.cs,标准格式,Standard format
Editor\Tools\Projet\ProjectOperate.cs,操作类型,Operation type
Editor\Tools\Projet\ProjectOperate.cs,全面刷新,Full refresh
Editor\Tools\Projet\ProjectOperate.cs,如果可用,If available
Editor\Tools\Projet\ProjectOperate.cs,优化版本,Optimized version
Editor\Tools\Projet\ProjectOperate.cs,刷新类型,Refresh type
Editor\Tools\Projet\ProjectOperate.cs,计算耗时,Calculate duration
Editor\Tools\Projet\ProjectOperate.cs,场景文件,Scene file
Editor\Tools\Projet\ProjectOperate.cs,仅资产,Assets only
Editor\Tools\Projet\ProjectOperate.cs,更高效,More efficient
Editor\Tools\Projet\ProjectOperate.cs,仅脚本,Scripts only
Editor\Tools\Projet\ProjectOperate.cs,不支持,Not supported
Editor\Tools\Projet\ProjectOperate.cs,预制体,Prefab
Editor\Tools\Projet\ProjectOperate.cs,根节点,Root node
Editor\Tools\Projet\ProjectOperate.cs,状态树,State tree
Editor\Tools\Projet\ProjectOperate.cs,着色器,Shader
Editor\Tools\Projet\ProjectOperate.cs,使用,Use
Editor\Tools\Projet\ProjectOperate.cs,全部,All
Editor\Tools\Projet\ProjectOperate.cs,刷新,Refresh
Editor\Tools\Projet\ProjectOperate.cs,内置,Builtin
Editor\Tools\Projet\ProjectOperate.cs,方法,Method
Editor\Tools\Projet\ProjectOperate.cs,定位,Locate
Editor\Tools\Projet\ProjectOperate.cs,引用,Reference
Editor\Tools\Projet\ProjectOperate.cs,文件,File
Editor\Tools\Projet\ProjectOperate.cs,材质,Material
Editor\Tools\Projet\ProjectOperate.cs,排除,Exclude
Editor\Tools\Projet\ProjectOperate.cs,移动,Move
Editor\Tools\Projet\ProjectOperate.cs,生成,Generate
Editor\Tools\Projet\ProjectOperate.cs,默认,Default
Editor\Tools\Projet\ProjectOperate.cs,格式,Format
Editor\Tools\Projet\ProjectOperate.cs,重载,Overload
Editor\Tools\Projet\ProjectOperate.cs,结束,End
Editor\Tools\Projet\ProjectOperate.cs,等,Etc
Editor\Tools\Projet\ProjectOperate.cs,在,In
Editor\Tools\Projet\ProjectSearch.cs,检查资产路径是否在搜索路径范围内,Check if asset path is within search range
Editor\Tools\Projet\ProjectSearch.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\Projet\ProjectSearch.cs,查找引用指定资源的所有资源,Find all resources referring to specified resource
Editor\Tools\Projet\ProjectSearch.cs,根据资产类型添加特定信息,Add specific info according to asset type
Editor\Tools\Projet\ProjectSearch.cs,查找指定资源的所有依赖项,Find all dependencies for specified resource
Editor\Tools\Projet\ProjectSearch.cs,检查是否在指定路径范围内,Check if path is in given scope
Editor\Tools\Projet\ProjectSearch.cs,检查是否在直接子目录中,Check if in subdirectory
Editor\Tools\Projet\ProjectSearch.cs,检查是否依赖目标资产,Check if depends on target asset
Editor\Tools\Projet\ProjectSearch.cs,是否递归搜索子文件夹,Whether to recursively search subfolders
Editor\Tools\Projet\ProjectSearch.cs,忽略文件信息获取错误,Ignore file info fetching errors
Editor\Tools\Projet\ProjectSearch.cs,搜索特定类型的资产,Search specific asset types
Editor\Tools\Projet\ProjectSearch.cs,搜索所有类型的资产,Search all types of assets
Editor\Tools\Projet\ProjectSearch.cs,获取资产的详细信息,Get detailed info of asset
Editor\Tools\Projet\ProjectSearch.cs,获取该资产的依赖项,Get dependencies of this asset
Editor\Tools\Projet\ProjectSearch.cs,执行搜索的主要实现,Main implementation of search
Editor\Tools\Projet\ProjectSearch.cs,检查资产是否存在,Check if asset exists
Editor\Tools\Projet\ProjectSearch.cs,除非明确要求包含,Unless explicitly required to include
Editor\Tools\Projet\ProjectSearch.cs,搜索预制体文件,Search prefab files
Editor\Tools\Projet\ProjectSearch.cs,文件扩展名过滤,File extension filter
Editor\Tools\Projet\ProjectSearch.cs,是否区分大小写,Case sensitive or not
Editor\Tools\Projet\ProjectSearch.cs,规范化资产路径,Normalize asset path
Editor\Tools\Projet\ProjectSearch.cs,最大返回结果数,Maximum return count
Editor\Tools\Projet\ProjectSearch.cs,保证序列化友好,Ensure serialization-friendly
Editor\Tools\Projet\ProjectSearch.cs,检查文件扩展名,Check file extension
Editor\Tools\Projet\ProjectSearch.cs,获取目标资产的,Get target asset's
Editor\Tools\Projet\ProjectSearch.cs,搜索场景文件,Search scene files
Editor\Tools\Projet\ProjectSearch.cs,来序列化结果,For serializing result
Editor\Tools\Projet\ProjectSearch.cs,获取所有资产,Get all assets
Editor\Tools\Projet\ProjectSearch.cs,添加文件信息,Add file info
Editor\Tools\Projet\ProjectSearch.cs,搜索所有资产,Search all assets
Editor\Tools\Projet\ProjectSearch.cs,搜索脚本文件,Search script files
Editor\Tools\Projet\ProjectSearch.cs,搜索材质文件,Search material files
Editor\Tools\Projet\ProjectSearch.cs,获取资产对象,Get asset object
Editor\Tools\Projet\ProjectSearch.cs,搜索纹理文件,Search texture files
Editor\Tools\Projet\ProjectSearch.cs,验证搜索路径,Validate search path
Editor\Tools\Projet\ProjectSearch.cs,搜索动画文件,Search animation files
Editor\Tools\Projet\ProjectSearch.cs,搜索音频文件,Search audio files
Editor\Tools\Projet\ProjectSearch.cs,获取依赖项,Get dependencies
Editor\Tools\Projet\ProjectSearch.cs,如果不递归,If not recursive
Editor\Tools\Projet\ProjectSearch.cs,搜索文件夹,Search folders
Editor\Tools\Projet\ProjectSearch.cs,搜索关键词,Search keywords
Editor\Tools\Projet\ProjectSearch.cs,对应方法名,Corresponding method name
Editor\Tools\Projet\ProjectSearch.cs,模型文件,Model file
Editor\Tools\Projet\ProjectSearch.cs,包装返回,Wrap result
Editor\Tools\Projet\ProjectSearch.cs,通用搜索,Generic search
Editor\Tools\Projet\ProjectSearch.cs,加载资产,Load asset
Editor\Tools\Projet\ProjectSearch.cs,是否包含,Whether contains
Editor\Tools\Projet\ProjectSearch.cs,直接加入,Join directly
Editor\Tools\Projet\ProjectSearch.cs,跳过自身,Skip self
Editor\Tools\Projet\ProjectSearch.cs,确保兼容,Ensure compatibility
Editor\Tools\Projet\ProjectSearch.cs,搜索路径,Search path
Editor\Tools\Projet\ProjectSearch.cs,搜索类型,Search type
Editor\Tools\Projet\ProjectSearch.cs,项目管理,Project management
Editor\Tools\Projet\ProjectSearch.cs,相对于,Relative to
Editor\Tools\Projet\ProjectSearch.cs,本身是,Itself is
Editor\Tools\Projet\ProjectSearch.cs,序列化,Serialize
Editor\Tools\Projet\ProjectSearch.cs,跳过,Skip
Editor\Tools\Projet\ProjectSearch.cs,文件,File
Editor\Tools\Projet\ProjectSearch.cs,搜索,Search
Editor\Tools\Projet\ProjectSearch.cs,用,Use
Editor\Tools\Projet\ProjectSearch.cs,等,Etc
Editor\Tools\ResEdit\EditAnimClip.cs,这里需要更复杂的逻辑来从模型中提取特定的动画片段,More complex logic needed here to extract specific animation clip from model
Editor\Tools\ResEdit\EditAnimClip.cs,这里需要根据具体的曲线数据格式来设置,Need to set according to detailed curve data format
Editor\Tools\ResEdit\EditAnimClip.cs,实际可能需要更复杂的曲线解析逻辑,May actually need more complex curve parsing logic
Editor\Tools\ResEdit\EditAnimClip.cs,动画长度通常由动画数据本身决定,Animation length usually determined by animation data itself
Editor\Tools\ResEdit\EditAnimClip.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\ResEdit\EditAnimClip.cs,实际可能需要更复杂的逻辑,May actually require more complex logic
Editor\Tools\ResEdit\EditAnimClip.cs,获取模型中的所有动画片段,Get all animation clips in model
Editor\Tools\ResEdit\EditAnimClip.cs,专门的动画片段管理工具,Dedicated animation clip management tool
Editor\Tools\ResEdit\EditAnimClip.cs,是否递归搜索子文件夹,Whether to search subfolders recursively
Editor\Tools\ResEdit\EditAnimClip.cs,提示用户使用其他方法,Prompt user to use other method
Editor\Tools\ResEdit\EditAnimClip.cs,是否锁定根旋转偏移,Whether lock root rotation offset
Editor\Tools\ResEdit\EditAnimClip.cs,是否从地面计算高度,Whether to calculate height from ground
Editor\Tools\ResEdit\EditAnimClip.cs,提供动画片段的创建,Provide animation clip creation
Editor\Tools\ResEdit\EditAnimClip.cs,动画片段资源路径,Animation clip resource path
Editor\Tools\ResEdit\EditAnimClip.cs,应用动画片段曲线,Apply animation clip curve
Editor\Tools\ResEdit\EditAnimClip.cs,检查资产是否存在,Check if asset exists
Editor\Tools\ResEdit\EditAnimClip.cs,是否保持原始方向,Whether to keep original orientation
Editor\Tools\ResEdit\EditAnimClip.cs,是否强制执行操作,Whether to force executing operation
Editor\Tools\ResEdit\EditAnimClip.cs,应用动画片段事件,Apply animation clip events
Editor\Tools\ResEdit\EditAnimClip.cs,获取动画片段数据,Get animation clip data
Editor\Tools\ResEdit\EditAnimClip.cs,应用动画片段设置,Apply animation clip settings
Editor\Tools\ResEdit\EditAnimClip.cs,找到目标动画片段,Find target animation clip
Editor\Tools\ResEdit\EditAnimClip.cs,现在需要提取它,Need to extract it now
Editor\Tools\ResEdit\EditAnimClip.cs,是否启用根高度,Whether to enable root height
Editor\Tools\ResEdit\EditAnimClip.cs,是否锁定根旋转,Whether lock root rotation
Editor\Tools\ResEdit\EditAnimClip.cs,状态树操作方法,State tree operation method
Editor\Tools\ResEdit\EditAnimClip.cs,是否锁定根高度,Whether lock root height
Editor\Tools\ResEdit\EditAnimClip.cs,源动画片段路径,Source animation clip path
Editor\Tools\ResEdit\EditAnimClip.cs,确保资产路径以,Ensure asset path starts with
Editor\Tools\ResEdit\EditAnimClip.cs,覆盖现有文件等,Overwrite existing files etc.
Editor\Tools\ResEdit\EditAnimClip.cs,清除现有事件,Clear existing events
Editor\Tools\ResEdit\EditAnimClip.cs,是否循环姿势,Whether to loop pose
Editor\Tools\ResEdit\EditAnimClip.cs,设置需要通过,Setting needs via
Editor\Tools\ResEdit\EditAnimClip.cs,动画曲线数据,Animation curve data
Editor\Tools\ResEdit\EditAnimClip.cs,暂时返回错误,Temporarily return error
Editor\Tools\ResEdit\EditAnimClip.cs,内部辅助方法,Internal helper method
Editor\Tools\ResEdit\EditAnimClip.cs,是否循环播放,Whether to loop playback
Editor\Tools\ResEdit\EditAnimClip.cs,设置基本属性,Set basic properties
Editor\Tools\ResEdit\EditAnimClip.cs,不能直接设置,Cannot set directly
Editor\Tools\ResEdit\EditAnimClip.cs,确保目录存在,Ensure directory exists
Editor\Tools\ResEdit\EditAnimClip.cs,获取动画事件,Get animation events
Editor\Tools\ResEdit\EditAnimClip.cs,动画事件数据,Animation event data
Editor\Tools\ResEdit\EditAnimClip.cs,这里简化处理,Simplified handling here
Editor\Tools\ResEdit\EditAnimClip.cs,复制时使用,Used on copy
Editor\Tools\ResEdit\EditAnimClip.cs,移动时使用,Used on move
Editor\Tools\ResEdit\EditAnimClip.cs,删除等操作,Delete etc. operations
Editor\Tools\ResEdit\EditAnimClip.cs,是只读属性,Is read-only property
Editor\Tools\ResEdit\EditAnimClip.cs,创建状态树,Create state tree
Editor\Tools\ResEdit\EditAnimClip.cs,对应方法名,Corresponding method name
Editor\Tools\ResEdit\EditAnimClip.cs,循环偏移,Loop offset
Editor\Tools\ResEdit\EditAnimClip.cs,操作类型,Operation type
Editor\Tools\ResEdit\EditAnimClip.cs,是否镜像,Whether mirror
Editor\Tools\ResEdit\EditAnimClip.cs,需要通过,Need via
Editor\Tools\ResEdit\EditAnimClip.cs,应用事件,Apply event
Editor\Tools\ResEdit\EditAnimClip.cs,动画长度,Animation length
Editor\Tools\ResEdit\EditAnimClip.cs,身体方向,Body orientation
Editor\Tools\ResEdit\EditAnimClip.cs,简化实现,Simplified implementation
Editor\Tools\ResEdit\EditAnimClip.cs,应用设置,Apply settings
Editor\Tools\ResEdit\EditAnimClip.cs,资源管理,Asset management
Editor\Tools\ResEdit\EditAnimClip.cs,目标路径,Target path
Editor\Tools\ResEdit\EditAnimClip.cs,搜索模式,Search mode
Editor\Tools\ResEdit\EditAnimClip.cs,应用曲线,Apply curve
Editor\Tools\ResEdit\EditAnimClip.cs,标准格式,Standard format
Editor\Tools\ResEdit\EditAnimClip.cs,来设置,For setting
Editor\Tools\ResEdit\EditAnimClip.cs,根旋转,Root rotation
Editor\Tools\ResEdit\EditAnimClip.cs,轴偏移,Axis offset
Editor\Tools\ResEdit\EditAnimClip.cs,根高度,Root height
Editor\Tools\ResEdit\EditAnimClip.cs,帧率,Frame rate
Editor\Tools\ResEdit\EditAnimClip.cs,开头,Start
Editor\Tools\ResEdit\EditAnimClip.cs,注意,Note
Editor\Tools\ResEdit\EditAnimClip.cs,复制,Copy
Editor\Tools\ResEdit\EditAnimClip.cs,设置,Set
Editor\Tools\ResEdit\EditAnimClip.cs,修改,Modify
Editor\Tools\ResEdit\EditAnimClip.cs,秒,Second
Editor\Tools\ResEdit\EditAnimClip.cs,如,Such as
Editor\Tools\ResEdit\EditAnimClip.cs,轴,Axis
Editor\Tools\ResEdit\EditAudio.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\ResEdit\EditAudio.cs,是否在后期效果后空间化,Spatialize after post effects
Editor\Tools\ResEdit\EditAudio.cs,处理设置导入设置操作,Handle set import settings operation
Editor\Tools\ResEdit\EditAudio.cs,验证目标格式是否支持,Verify if target format is supported
Editor\Tools\ResEdit\EditAudio.cs,是否递归搜索子文件夹,Recursively search subfolders
Editor\Tools\ResEdit\EditAudio.cs,这里使用注释掉的方式,Here use commented-out method
Editor\Tools\ResEdit\EditAudio.cs,是否强制转换为单声道,Whether force convert to mono
Editor\Tools\ResEdit\EditAudio.cs,处理提取元数据操作,Handle extract metadata operation
Editor\Tools\ResEdit\EditAudio.cs,是否启用环绕声渲染,Whether enable surround rendering
Editor\Tools\ResEdit\EditAudio.cs,是否预加载音频数据,Whether preload audio data
Editor\Tools\ResEdit\EditAudio.cs,复制文件到目标路径,Copy file to target path
Editor\Tools\ResEdit\EditAudio.cs,检查源文件是否存在,Check if source file exists
Editor\Tools\ResEdit\EditAudio.cs,专门的音频管理工具,Specialized audio management tool
Editor\Tools\ResEdit\EditAudio.cs,获取音频导入器信息,Get audio importer info
Editor\Tools\ResEdit\EditAudio.cs,搜索操作至少需要,Search operation requires at least
Editor\Tools\ResEdit\EditAudio.cs,音频导入设置参数,Audio import setting parameter
Editor\Tools\ResEdit\EditAudio.cs,处理转换格式操作,Handle format conversion operation
Editor\Tools\ResEdit\EditAudio.cs,检查资产是否存在,Check if asset exists
Editor\Tools\ResEdit\EditAudio.cs,是否强制执行操作,Whether to force operation
Editor\Tools\ResEdit\EditAudio.cs,版本中可能不可用,May be unavailable in version
Editor\Tools\ResEdit\EditAudio.cs,处理获取信息操作,Handle info retrieval operation
Editor\Tools\ResEdit\EditAudio.cs,应用音频导入设置,Apply audio import settings
Editor\Tools\ResEdit\EditAudio.cs,静音时是否虚拟化,Virtualize when muted
Editor\Tools\ResEdit\EditAudio.cs,是否在后台加载,Whether background loading
Editor\Tools\ResEdit\EditAudio.cs,状态树操作方法,State tree operation method
Editor\Tools\ResEdit\EditAudio.cs,提供音频的导入,Provide audio import
Editor\Tools\ResEdit\EditAudio.cs,确保资产路径以,Ensure asset path starts with
Editor\Tools\ResEdit\EditAudio.cs,覆盖现有文件等,Overwrite existing files etc.
Editor\Tools\ResEdit\EditAudio.cs,处理搜索操作,Handle search operation
Editor\Tools\ResEdit\EditAudio.cs,处理修改操作,Handle modify operation
Editor\Tools\ResEdit\EditAudio.cs,音频资源路径,Audio resource path
Editor\Tools\ResEdit\EditAudio.cs,设置目标格式,Set target format
Editor\Tools\ResEdit\EditAudio.cs,内部辅助方法,Internal helper method
Editor\Tools\ResEdit\EditAudio.cs,处理删除操作,Handle delete operation
Editor\Tools\ResEdit\EditAudio.cs,避免编译错误,Avoid compile error
Editor\Tools\ResEdit\EditAudio.cs,处理导入操作,Handle import operation
Editor\Tools\ResEdit\EditAudio.cs,获取音频数据,Get audio data
Editor\Tools\ResEdit\EditAudio.cs,确保目录存在,Ensure directory exists
Editor\Tools\ResEdit\EditAudio.cs,处理复制操作,Handle copy operation
Editor\Tools\ResEdit\EditAudio.cs,采样率设置,Sample rate setting
Editor\Tools\ResEdit\EditAudio.cs,资源包名称,Asset bundle name
Editor\Tools\ResEdit\EditAudio.cs,移动时使用,Use during move
Editor\Tools\ResEdit\EditAudio.cs,删除等操作,Delete etc. operations
Editor\Tools\ResEdit\EditAudio.cs,源文件路径,Source file path
Editor\Tools\ResEdit\EditAudio.cs,缓冲区大小,Buffer size
Editor\Tools\ResEdit\EditAudio.cs,导入时使用,Use on import
Editor\Tools\ResEdit\EditAudio.cs,资源包变体,Asset bundle variant
Editor\Tools\ResEdit\EditAudio.cs,创建状态树,Create state tree
Editor\Tools\ResEdit\EditAudio.cs,转换时使用,Use on conversion
Editor\Tools\ResEdit\EditAudio.cs,属性在某些,Property in some
Editor\Tools\ResEdit\EditAudio.cs,对应方法名,Corresponding method name
Editor\Tools\ResEdit\EditAudio.cs,是否空间化,Whether spatialized
Editor\Tools\ResEdit\EditAudio.cs,操作类型,Operation type
Editor\Tools\ResEdit\EditAudio.cs,用户数据,User data
Editor\Tools\ResEdit\EditAudio.cs,目标格式,Target format
Editor\Tools\ResEdit\EditAudio.cs,导入设置,Import setting
Editor\Tools\ResEdit\EditAudio.cs,压缩格式,Compression format
Editor\Tools\ResEdit\EditAudio.cs,资源管理,Asset management
Editor\Tools\ResEdit\EditAudio.cs,目标路径,Target path
Editor\Tools\ResEdit\EditAudio.cs,搜索模式,Search mode
Editor\Tools\ResEdit\EditAudio.cs,加载类型,Load type
Editor\Tools\ResEdit\EditAudio.cs,标准格式,Standard format
Editor\Tools\ResEdit\EditAudio.cs,在某些,In some
Editor\Tools\ResEdit\EditAudio.cs,枚举和,Enum and
Editor\Tools\ResEdit\EditAudio.cs,确保在,Ensure in
Editor\Tools\ResEdit\EditAudio.cs,范围内,Within range
Editor\Tools\ResEdit\EditAudio.cs,采样率,Sample rate
Editor\Tools\ResEdit\EditAudio.cs,之一,One of
Editor\Tools\ResEdit\EditAudio.cs,开头,Start
Editor\Tools\ResEdit\EditAudio.cs,注意,Note
Editor\Tools\ResEdit\EditAudio.cs,复制,Copy
Editor\Tools\ResEdit\EditAudio.cs,修改,Modify
Editor\Tools\ResEdit\EditAudio.cs,质量,Quality
Editor\Tools\ResEdit\EditAudio.cs,或,Or
Editor\Tools\ResEdit\EditAudio.cs,如,Such as
Editor\Tools\ResEdit\EditAudio.cs,和,And
Editor\Tools\ResEdit\EditComponent.cs,如果没有任何可访问的属性或字段,If there are no accessible properties or fields
Editor\Tools\ResEdit\EditComponent.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\ResEdit\EditComponent.cs,组件快捷访问器和不常用属性,Component quick accessors and seldom-used attributes
Editor\Tools\ResEdit\EditComponent.cs,转换为数组以确保序列化正确,Convert to array to ensure proper serialization
Editor\Tools\ResEdit\EditComponent.cs,获取组件的所有字段和属性,Get all fields and properties of component
Editor\Tools\ResEdit\EditComponent.cs,某些动态程序集可能抛异常,Some dynamic assemblies may throw exception
Editor\Tools\ResEdit\EditComponent.cs,将值转换为可序列化的格式,Convert value to serializable format
Editor\Tools\ResEdit\EditComponent.cs,跳过会导致实例化的属性,Skip properties that cause instantiation
Editor\Tools\ResEdit\EditComponent.cs,不添加错误信息到结果中,Do not add error info to result
Editor\Tools\ResEdit\EditComponent.cs,创建组件操作执行状态树,Create component operation execution state tree
Editor\Tools\ResEdit\EditComponent.cs,处理获取组件属性的操作,Handle get component property operation
Editor\Tools\ResEdit\EditComponent.cs,遍历所有已加载的程序集,Iterate all loaded assemblies
Editor\Tools\ResEdit\EditComponent.cs,处理设置组件属性的操作,Handle set component property operation
Editor\Tools\ResEdit\EditComponent.cs,从执行上下文中提取目标,Extract target from execution context
Editor\Tools\ResEdit\EditComponent.cs,设置组件属性的具体实现,Concrete implementation of setting component property
Editor\Tools\ResEdit\EditComponent.cs,获取组件属性的具体实现,Concrete implementation of getting component property
Editor\Tools\ResEdit\EditComponent.cs,被销毁的对象不是真正的,Destroyed object is not valid
Editor\Tools\ResEdit\EditComponent.cs,排除只读属性和索引器,Exclude readonly and indexer properties
Editor\Tools\ResEdit\EditComponent.cs,从字符串解析数字数组,Parse numeric array from string
Editor\Tools\ResEdit\EditComponent.cs,限制数组长度避免过大,Limit array length to avoid too large
Editor\Tools\ResEdit\EditComponent.cs,检查字段是否可序列化,Check if field is serializable
Editor\Tools\ResEdit\EditComponent.cs,获取要设置的属性字典,Get property dict to set
Editor\Tools\ResEdit\EditComponent.cs,定义要跳过的属性名称,Define names of properties to skip
Editor\Tools\ResEdit\EditComponent.cs,尝试从其他格式转换,Try conversion from other format
Editor\Tools\ResEdit\EditComponent.cs,支持方括号和圆括号,Support square/round brackets
Editor\Tools\ResEdit\EditComponent.cs,跳过黑名单中的属性,Skip blacklist properties
Editor\Tools\ResEdit\EditComponent.cs,名字或全名匹配即可,Name or full name match is enough
Editor\Tools\ResEdit\EditComponent.cs,安全地转换每个元素,Convert each element safely
Editor\Tools\ResEdit\EditComponent.cs,创建目标定位状态树,Create target locating state tree
Editor\Tools\ResEdit\EditComponent.cs,尝试序列化为字符串,Try to serialize as string
Editor\Tools\ResEdit\EditComponent.cs,基本类型直接返回,Basic type returned directly
Editor\Tools\ResEdit\EditComponent.cs,组件操作核心方法,Component operation core method
Editor\Tools\ResEdit\EditComponent.cs,面板上可见的字段,Visible fields in panel
Editor\Tools\ResEdit\EditComponent.cs,获取所有公共属性,Get all public properties
Editor\Tools\ResEdit\EditComponent.cs,其他类型转字符串,Other type to string
Editor\Tools\ResEdit\EditComponent.cs,当没有指定具体,When not specifically specified
Editor\Tools\ResEdit\EditComponent.cs,获取组件属性值,Get component property value
Editor\Tools\ResEdit\EditComponent.cs,特性的私有字段,Private fields of attribute
Editor\Tools\ResEdit\EditComponent.cs,获取嵌套属性值,Get nested property value
Editor\Tools\ResEdit\EditComponent.cs,期望的数字数量,Expected count of numbers
Editor\Tools\ResEdit\EditComponent.cs,移除外层括号,Remove outer parentheses
Editor\Tools\ResEdit\EditComponent.cs,默认操作处理,Default operation handling
Editor\Tools\ResEdit\EditComponent.cs,支持多种格式,Support multiple formats
Editor\Tools\ResEdit\EditComponent.cs,组件辅助方法,Component helper methods
Editor\Tools\ResEdit\EditComponent.cs,去除首尾空格,Trim leading/trailing spaces
Editor\Tools\ResEdit\EditComponent.cs,基本类型转换,Basic type conversion
Editor\Tools\ResEdit\EditComponent.cs,解析每个数字,Parse each number
Editor\Tools\ResEdit\EditComponent.cs,只获取可读的,Only get readable
Editor\Tools\ResEdit\EditComponent.cs,处理嵌套属性,Handle nested property
Editor\Tools\ResEdit\EditComponent.cs,目标查找参数,Target search parameter
Editor\Tools\ResEdit\EditComponent.cs,查找组件类型,Lookup component type
Editor\Tools\ResEdit\EditComponent.cs,获取所有字段,Get all fields
Editor\Tools\ResEdit\EditComponent.cs,数组或列表,Array or list
Editor\Tools\ResEdit\EditComponent.cs,的数据表示,Representation of data
Editor\Tools\ResEdit\EditComponent.cs,格式字符串,Format string
Editor\Tools\ResEdit\EditComponent.cs,防止空引用,Prevent null reference
Editor\Tools\ResEdit\EditComponent.cs,不要尝试从,Do not try from
Editor\Tools\ResEdit\EditComponent.cs,避免副作用,Avoid side effects
Editor\Tools\ResEdit\EditComponent.cs,多行字符串,Multiline string
Editor\Tools\ResEdit\EditComponent.cs,使用优化的,Use optimized
Editor\Tools\ResEdit\EditComponent.cs,按逗号分割,Split by comma
Editor\Tools\ResEdit\EditComponent.cs,只取第一个,Take only the first
Editor\Tools\ResEdit\EditComponent.cs,点符号分隔,Dot notation separated
Editor\Tools\ResEdit\EditComponent.cs,对应方法名,Corresponding method name
Editor\Tools\ResEdit\EditComponent.cs,表示不限制,Indicates no limit
Editor\Tools\ResEdit\EditComponent.cs,输入字符串,Input string
Editor\Tools\ResEdit\EditComponent.cs,上查找组件,Find component on
Editor\Tools\ResEdit\EditComponent.cs,可写的属性,Writable property
Editor\Tools\ResEdit\EditComponent.cs,使用统一的,Use unified
Editor\Tools\ResEdit\EditComponent.cs,失败返回,Return on fail
Editor\Tools\ResEdit\EditComponent.cs,组件操作,Component operation
Editor\Tools\ResEdit\EditComponent.cs,复杂对象,Complex object
Editor\Tools\ResEdit\EditComponent.cs,资源管理,Asset management
Editor\Tools\ResEdit\EditComponent.cs,枚举类型,Enum type
Editor\Tools\ResEdit\EditComponent.cs,目标查找,Target lookup
Editor\Tools\ResEdit\EditComponent.cs,表示接受,Means accept
Editor\Tools\ResEdit\EditComponent.cs,解析后的,Parsed
Editor\Tools\ResEdit\EditComponent.cs,先尝试从,Try first from
Editor\Tools\ResEdit\EditComponent.cs,检查数量,Check count
Editor\Tools\ResEdit\EditComponent.cs,避免重复,Avoid duplication
Editor\Tools\ResEdit\EditComponent.cs,大幅减少,Significantly reduce
Editor\Tools\ResEdit\EditComponent.cs,嵌套字典,Nested dictionary
Editor\Tools\ResEdit\EditComponent.cs,不能转为,Cannot convert to
Editor\Tools\ResEdit\EditComponent.cs,查找组件,Find component
Editor\Tools\ResEdit\EditComponent.cs,特性的非,Attribute's non-
Editor\Tools\ResEdit\EditComponent.cs,字段和带,Field and with
Editor\Tools\ResEdit\EditComponent.cs,直接用,Use directly
Editor\Tools\ResEdit\EditComponent.cs,只收集,Collect only
Editor\Tools\ResEdit\EditComponent.cs,不支持,Not supported
Editor\Tools\ResEdit\EditComponent.cs,转换为,Convert to
Editor\Tools\ResEdit\EditComponent.cs,使用量,Usage
Editor\Tools\ResEdit\EditComponent.cs,使用,Use
Editor\Tools\ResEdit\EditComponent.cs,转换,Convert
Editor\Tools\ResEdit\EditComponent.cs,个值,Value
Editor\Tools\ResEdit\EditComponent.cs,条件,Condition
Editor\Tools\ResEdit\EditComponent.cs,批量,Batch
Editor\Tools\ResEdit\EditComponent.cs,引用,Reference
Editor\Tools\ResEdit\EditComponent.cs,忽略,Ignore
Editor\Tools\ResEdit\EditComponent.cs,检查,Check
Editor\Tools\ResEdit\EditComponent.cs,代替,Instead
Editor\Tools\ResEdit\EditComponent.cs,获取,Get
Editor\Tools\ResEdit\EditComponent.cs,包括,Include
Editor\Tools\ResEdit\EditComponent.cs,数组,Array
Editor\Tools\ResEdit\EditComponent.cs,处理,Handle
Editor\Tools\ResEdit\EditComponent.cs,带有,With
Editor\Tools\ResEdit\EditComponent.cs,字段,Field
Editor\Tools\ResEdit\EditComponent.cs,格式,Format
Editor\Tools\ResEdit\EditComponent.cs,因为,Because
Editor\Tools\ResEdit\EditComponent.cs,单个,Single
Editor\Tools\ResEdit\EditComponent.cs,的,Of
Editor\Tools\ResEdit\EditComponent.cs,将,Will
Editor\Tools\ResEdit\EditComponent.cs,或,Or
Editor\Tools\ResEdit\EditComponent.cs,时,When
Editor\Tools\ResEdit\EditComponent.cs,在,In
Editor\Tools\ResEdit\EditComponent.cs,空,Null
Editor\Tools\ResEdit\EditGameObject.cs,创建当前方法支持的参数键列表,Create parameter key list supported by current method
Editor\Tools\ResEdit\EditGameObject.cs,检查是否应该进行批量操作,Check if batch operation is needed
Editor\Tools\ResEdit\EditGameObject.cs,某些动态程序集可能抛异常,Some dynamic assemblies may throw exception
Editor\Tools\ResEdit\EditGameObject.cs,名字或全名匹配且继承自,Name or fullname match and inherits from
Editor\Tools\ResEdit\EditGameObject.cs,从目标数组中提取第一个,Extract the first from target array
Editor\Tools\ResEdit\EditGameObject.cs,检查是否已经存在该组件,Check if component already exists
Editor\Tools\ResEdit\EditGameObject.cs,用于需要单个目标的操作,For actions requiring single target
Editor\Tools\ResEdit\EditGameObject.cs,遍历所有已加载的程序集,Iterate all loaded assemblies
Editor\Tools\ResEdit\EditGameObject.cs,处理设置组件属性的操作,Handle setting component property operation
Editor\Tools\ResEdit\EditGameObject.cs,从执行上下文中提取目标,Extract target from execution context
Editor\Tools\ResEdit\EditGameObject.cs,批量设置组件属性在多个,Set component property in batch over multiples
Editor\Tools\ResEdit\EditGameObject.cs,返回找到的第一个对象,Return the first object found
Editor\Tools\ResEdit\EditGameObject.cs,在单个目标上设置父级,Set parent on single target
Editor\Tools\ResEdit\EditGameObject.cs,在多个目标上设置父级,Set parent on multiple targets
Editor\Tools\ResEdit\EditGameObject.cs,对于不允许重复的组件,For non-duplicable components
Editor\Tools\ResEdit\EditGameObject.cs,批量添加组件到多个,Batch add component to multiples
Editor\Tools\ResEdit\EditGameObject.cs,批量移除组件从多个,Batch remove component from multiples
Editor\Tools\ResEdit\EditGameObject.cs,处理获取组件的操作,Handle get component operation
Editor\Tools\ResEdit\EditGameObject.cs,返回所有匹配的对象,Return all matching objects
Editor\Tools\ResEdit\EditGameObject.cs,名字或全名匹配即可,Match by name or full name
Editor\Tools\ResEdit\EditGameObject.cs,创建操作执行状态树,Create operation execution state tree
Editor\Tools\ResEdit\EditGameObject.cs,创建目标定位状态树,Create target locating state tree
Editor\Tools\ResEdit\EditGameObject.cs,处理添加组件的操作,Handle add component operation
Editor\Tools\ResEdit\EditGameObject.cs,处理移除组件的操作,Handle remove component operation
Editor\Tools\ResEdit\EditGameObject.cs,应用激活状态修改,Apply active state modification
Editor\Tools\ResEdit\EditGameObject.cs,组件操作核心方法,Core method for component operation
Editor\Tools\ResEdit\EditGameObject.cs,用于设置父级关系,For setting parent relationships
Editor\Tools\ResEdit\EditGameObject.cs,参数获取目标对象,Get target object from parameters
Editor\Tools\ResEdit\EditGameObject.cs,只返回第一个对象,Only return the first object
Editor\Tools\ResEdit\EditGameObject.cs,处理设置父级操作,Handle set parent operation
Editor\Tools\ResEdit\EditGameObject.cs,对象是否表示成功,Whether object indicates success
Editor\Tools\ResEdit\EditGameObject.cs,如果有成功的修改,If there are successful modifications
Editor\Tools\ResEdit\EditGameObject.cs,表示设置为根对象,Indicates set as root object
Editor\Tools\ResEdit\EditGameObject.cs,创建批量操作响应,Create batch operation response
Editor\Tools\ResEdit\EditGameObject.cs,避免序列化问题,Avoid serialization issues
Editor\Tools\ResEdit\EditGameObject.cs,应用修改到多个,Apply modifications to multiple
Editor\Tools\ResEdit\EditGameObject.cs,应用父对象修改,Apply parent object modification
Editor\Tools\ResEdit\EditGameObject.cs,组件操作参数,Component operation parameters
Editor\Tools\ResEdit\EditGameObject.cs,应用名称修改,Apply name modification
Editor\Tools\ResEdit\EditGameObject.cs,构建响应消息,Build response message
Editor\Tools\ResEdit\EditGameObject.cs,记录撤销操作,Record undo operation
Editor\Tools\ResEdit\EditGameObject.cs,参数并转换为,Parameters and convert to
Editor\Tools\ResEdit\EditGameObject.cs,默认操作处理,Default operation handling
Editor\Tools\ResEdit\EditGameObject.cs,处理修改操作,Handle modification operation
Editor\Tools\ResEdit\EditGameObject.cs,返回成功响应,Return success response
Editor\Tools\ResEdit\EditGameObject.cs,父级设置方法,Parent setting method
Editor\Tools\ResEdit\EditGameObject.cs,单个对象修改,Single object modification
Editor\Tools\ResEdit\EditGameObject.cs,来查找父对象,To find parent object
Editor\Tools\ResEdit\EditGameObject.cs,应用变换修改,Apply transform modification
Editor\Tools\ResEdit\EditGameObject.cs,基本修改参数,Basic modification parameters
Editor\Tools\ResEdit\EditGameObject.cs,组件辅助方法,Component helper methods
Editor\Tools\ResEdit\EditGameObject.cs,辅助查找方法,Helper search methods
Editor\Tools\ResEdit\EditGameObject.cs,应用标签修改,Apply tag modification
Editor\Tools\ResEdit\EditGameObject.cs,检查循环引用,Check circular references
Editor\Tools\ResEdit\EditGameObject.cs,处理创建操作,Handle create operation
Editor\Tools\ResEdit\EditGameObject.cs,目标查找参数,Target search parameters
Editor\Tools\ResEdit\EditGameObject.cs,查找组件类型,Find component type
Editor\Tools\ResEdit\EditGameObject.cs,组件操作方法,Component operation methods
Editor\Tools\ResEdit\EditGameObject.cs,应用层级修改,Apply hierarchy modification
Editor\Tools\ResEdit\EditGameObject.cs,的数据表示,Data representation
Editor\Tools\ResEdit\EditGameObject.cs,使用优化的,Use optimized
Editor\Tools\ResEdit\EditGameObject.cs,添加组件到,Add component to
Editor\Tools\ResEdit\EditGameObject.cs,对应方法名,Corresponding method name
Editor\Tools\ResEdit\EditGameObject.cs,单个或多个,Single or multiple
Editor\Tools\ResEdit\EditGameObject.cs,的内部实现,Internal implementation
Editor\Tools\ResEdit\EditGameObject.cs,应用修改到,Apply modification to
Editor\Tools\ResEdit\EditGameObject.cs,使用统一的,Use unified
Editor\Tools\ResEdit\EditGameObject.cs,获取组件,Get component
Editor\Tools\ResEdit\EditGameObject.cs,需要适配,Needs adaptation
Editor\Tools\ResEdit\EditGameObject.cs,或找不到,Or not found
Editor\Tools\ResEdit\EditGameObject.cs,资源管理,Resource management
Editor\Tools\ResEdit\EditGameObject.cs,查找父级,Find parent
Editor\Tools\ResEdit\EditGameObject.cs,操作参数,Operation parameter
Editor\Tools\ResEdit\EditGameObject.cs,先尝试从,First try from
Editor\Tools\ResEdit\EditGameObject.cs,如果需要,If needed
Editor\Tools\ResEdit\EditGameObject.cs,如果存在,If exists
Editor\Tools\ResEdit\EditGameObject.cs,批量修改,Batch modification
Editor\Tools\ResEdit\EditGameObject.cs,大幅减少,Greatly reduce
Editor\Tools\ResEdit\EditGameObject.cs,现在返回,Now return
Editor\Tools\ResEdit\EditGameObject.cs,时使用,Use when
Editor\Tools\ResEdit\EditGameObject.cs,只处理,Only handle
Editor\Tools\ResEdit\EditGameObject.cs,不指定,Not specified
Editor\Tools\ResEdit\EditGameObject.cs,从多个,From multiples
Editor\Tools\ResEdit\EditGameObject.cs,默认为,Default is
Editor\Tools\ResEdit\EditGameObject.cs,兼容性,Compatibility
Editor\Tools\ResEdit\EditGameObject.cs,查找父,Find parent
Editor\Tools\ResEdit\EditGameObject.cs,使用量,Usage
Editor\Tools\ResEdit\EditGameObject.cs,即可,Sufficient
Editor\Tools\ResEdit\EditGameObject.cs,使用,Use
Editor\Tools\ResEdit\EditGameObject.cs,如果,If
Editor\Tools\ResEdit\EditGameObject.cs,通过,Through
Editor\Tools\ResEdit\EditGameObject.cs,忽略,Ignore
Editor\Tools\ResEdit\EditGameObject.cs,检查,Check
Editor\Tools\ResEdit\EditGameObject.cs,获取,Get
Editor\Tools\ResEdit\EditGameObject.cs,根据,According to
Editor\Tools\ResEdit\EditGameObject.cs,数组,Array
Editor\Tools\ResEdit\EditGameObject.cs,格式,Format
Editor\Tools\ResEdit\EditGameObject.cs,参数,Parameter
Editor\Tools\ResEdit\EditGameObject.cs,上,On
Editor\Tools\ResEdit\EditGameObject.cs,为,As
Editor\Tools\UI\FigmaDataSimplifier.cs,创建当前方法支持的参数键列表,Create current method supported parameter key list
Editor\Tools\UI\FigmaDataSimplifier.cs,主要填充色,Main fill color
Editor\Tools\UI\FigmaDataSimplifier.cs,原始坐标系,Original coordinate system
Editor\Tools\UI\FigmaDataSimplifier.cs,是否转换为,Whether to convert to
Editor\Tools\UI\FigmaDataSimplifier.cs,简化的节点,Simplified node
Editor\Tools\UI\FigmaDataSimplifier.cs,左上角锚点,Top-left anchor point
Editor\Tools\UI\FigmaDataSimplifier.cs,无填充信息,No fill info
Editor\Tools\UI\FigmaDataSimplifier.cs,进一步压缩,Further compression
Editor\Tools\UI\FigmaDataSimplifier.cs,不进行解析,Do not parse
Editor\Tools\UI\FigmaDataSimplifier.cs,默认无限制,Default unlimited
Editor\Tools\UI\FigmaDataSimplifier.cs,渐变停止点,Gradient stop point
Editor\Tools\UI\FigmaDataSimplifier.cs,认为是复杂,Considered complex
Editor\Tools\UI\FigmaDataSimplifier.cs,生成完整的,Generate complete
Editor\Tools\UI\FigmaDataSimplifier.cs,无需复杂的,No complexity required
Editor\Tools\UI\FigmaDataSimplifier.cs,坐标系转换,Coordinate system conversion
Editor\Tools\UI\FigmaDataSimplifier.cs,字段已移除,Field has been removed
Editor\Tools\UI\FigmaDataSimplifier.cs,父节点路径,Parent node path
Editor\Tools\UI\FigmaDataSimplifier.cs,提取并简化,Extract and simplify
Editor\Tools\UI\FigmaDataSimplifier.cs,矢量图形,Vector graphics
Editor\Tools\UI\FigmaDataSimplifier.cs,控件尺寸,Control size
Editor\Tools\UI\FigmaDataSimplifier.cs,径向渐变,Radial gradient
Editor\Tools\UI\FigmaDataSimplifier.cs,节点类型,Node type
Editor\Tools\UI\FigmaDataSimplifier.cs,填充数据,Fill data
Editor\Tools\UI\FigmaDataSimplifier.cs,文本对齐,Text alignment
Editor\Tools\UI\FigmaDataSimplifier.cs,渐变类型,Gradient type
Editor\Tools\UI\FigmaDataSimplifier.cs,节点数据,Node data
Editor\Tools\UI\FigmaDataSimplifier.cs,文本摘要,Text summary
Editor\Tools\UI\FigmaDataSimplifier.cs,优先使用,Prefer use
Editor\Tools\UI\FigmaDataSimplifier.cs,图片信息,Image info
Editor\Tools\UI\FigmaDataSimplifier.cs,角度渐变,Angular gradient
Editor\Tools\UI\FigmaDataSimplifier.cs,混合模式,Blend mode
Editor\Tools\UI\FigmaDataSimplifier.cs,简化后的,Simplified
Editor\Tools\UI\FigmaDataSimplifier.cs,基础结构,Basic structure
Editor\Tools\UI\FigmaDataSimplifier.cs,文本相关,Text related
Editor\Tools\UI\FigmaDataSimplifier.cs,详细信息,Details
Editor\Tools\UI\FigmaDataSimplifier.cs,布局模式,Layout mode
Editor\Tools\UI\FigmaDataSimplifier.cs,布局相关,Layout related
Editor\Tools\UI\FigmaDataSimplifier.cs,节点名称,Node name
Editor\Tools\UI\FigmaDataSimplifier.cs,颜色信息,Color info
Editor\Tools\UI\FigmaDataSimplifier.cs,图片填充,Image fill
Editor\Tools\UI\FigmaDataSimplifier.cs,简化节点,Simplified node
Editor\Tools\UI\FigmaDataSimplifier.cs,复杂效果,Complex effect
Editor\Tools\UI\FigmaDataSimplifier.cs,批量生成,Batch generate
Editor\Tools\UI\FigmaDataSimplifier.cs,直接返回,Return directly
Editor\Tools\UI\FigmaDataSimplifier.cs,填充类型,Fill type
Editor\Tools\UI\FigmaDataSimplifier.cs,文本样式,Text style
Editor\Tools\UI\FigmaDataSimplifier.cs,样式相关,Style related
Editor\Tools\UI\FigmaDataSimplifier.cs,不透明度,Opacity
Editor\Tools\UI\FigmaDataSimplifier.cs,布局信息,Layout info
Editor\Tools\UI\FigmaDataSimplifier.cs,将复杂的,Make complex
Editor\Tools\UI\FigmaDataSimplifier.cs,字体粗细,Font weight
Editor\Tools\UI\FigmaDataSimplifier.cs,有背景色,With background color
Editor\Tools\UI\FigmaDataSimplifier.cs,用于调试,For debugging
Editor\Tools\UI\FigmaDataSimplifier.cs,包含完整,Include complete
Editor\Tools\UI\FigmaDataSimplifier.cs,提示文本,Hint text
Editor\Tools\UI\FigmaDataSimplifier.cs,最大深度,Maximum depth
Editor\Tools\UI\FigmaDataSimplifier.cs,提取组件,Extract component
Editor\Tools\UI\FigmaDataSimplifier.cs,节点字典,Node dictionary
Editor\Tools\UI\FigmaDataSimplifier.cs,组件列表,Component list
Editor\Tools\UI\FigmaDataSimplifier.cs,图片引用,Image reference
Editor\Tools\UI\FigmaDataSimplifier.cs,字体大小,Font size
Editor\Tools\UI\FigmaDataSimplifier.cs,调用代码,Call code
Editor\Tools\UI\FigmaDataSimplifier.cs,节省空间,Save space
Editor\Tools\UI\FigmaDataSimplifier.cs,基本信息,Basic info
Editor\Tools\UI\FigmaDataSimplifier.cs,文字颜色,Text color
Editor\Tools\UI\FigmaDataSimplifier.cs,线性渐变,Linear gradient
Editor\Tools\UI\FigmaDataSimplifier.cs,类型节点,Type node
Editor\Tools\UI\FigmaDataSimplifier.cs,颜色类型,Color type
Editor\Tools\UI\FigmaDataSimplifier.cs,就是组件,Is component
Editor\Tools\UI\FigmaDataSimplifier.cs,文本内容,Text content
Editor\Tools\UI\FigmaDataSimplifier.cs,特殊标记,Special mark
Editor\Tools\UI\FigmaDataSimplifier.cs,填充信息,Fill info
Editor\Tools\UI\FigmaDataSimplifier.cs,对齐方式,Alignment
Editor\Tools\UI\FigmaDataSimplifier.cs,椭圆节点,Ellipse node
Editor\Tools\UI\FigmaDataSimplifier.cs,渐变信息,Gradient info
Editor\Tools\UI\FigmaDataSimplifier.cs,布局参数,Layout parameter
Editor\Tools\UI\FigmaDataSimplifier.cs,背景色,Background color
Editor\Tools\UI\FigmaDataSimplifier.cs,复杂的,Complex
Editor\Tools\UI\FigmaDataSimplifier.cs,回退到,Fallback to
Editor\Tools\UI\FigmaDataSimplifier.cs,父路径,Parent path
Editor\Tools\UI\FigmaDataSimplifier.cs,子节点,Child node
Editor\Tools\UI\FigmaDataSimplifier.cs,字体族,Font family
Editor\Tools\UI\FigmaDataSimplifier.cs,坐标系,Coordinate system
Editor\Tools\UI\FigmaDataSimplifier.cs,模糊等,Blur, etc.
Editor\Tools\UI\FigmaDataSimplifier.cs,图片等,Image, etc.
Editor\Tools\UI\FigmaDataSimplifier.cs,序列化,Serialization
Editor\Tools\UI\FigmaDataSimplifier.cs,透明度,Transparency
Editor\Tools\UI\FigmaDataSimplifier.cs,根节点,Root node
Editor\Tools\UI\FigmaDataSimplifier.cs,友好且,User-friendly and
Editor\Tools\UI\FigmaDataSimplifier.cs,完整的,Complete
Editor\Tools\UI\FigmaDataSimplifier.cs,内边距,Padding
Editor\Tools\UI\FigmaDataSimplifier.cs,以减少,To reduce
Editor\Tools\UI\FigmaDataSimplifier.cs,字符串,String
Editor\Tools\UI\FigmaDataSimplifier.cs,列表,List
Editor\Tools\UI\FigmaDataSimplifier.cs,渐变,Gradient
Editor\Tools\UI\FigmaDataSimplifier.cs,颜色,Color
Editor\Tools\UI\FigmaDataSimplifier.cs,阴影,Shadow
Editor\Tools\UI\FigmaDataSimplifier.cs,混合,Blend
Editor\Tools\UI\FigmaDataSimplifier.cs,行高,Line height
Editor\Tools\UI\FigmaDataSimplifier.cs,间距,Spacing
Editor\Tools\UI\FigmaDataSimplifier.cs,宽度,Width
Editor\Tools\UI\FigmaDataSimplifier.cs,圆角,Corner radius
Editor\Tools\UI\FigmaDataSimplifier.cs,使用,Use
Editor\Tools\UI\FigmaDataSimplifier.cs,转换,Convert
Editor\Tools\UI\FigmaDataSimplifier.cs,信息,Info
Editor\Tools\UI\FigmaDataSimplifier.cs,代码,Code
Editor\Tools\UI\FigmaDataSimplifier.cs,如果,If
Editor\Tools\UI\FigmaDataSimplifier.cs,图片,Image
Editor\Tools\UI\FigmaDataSimplifier.cs,组件,Component
Editor\Tools\UI\FigmaDataSimplifier.cs,简化,Simplify
Editor\Tools\UI\FigmaDataSimplifier.cs,尺寸,Size
Editor\Tools\UI\FigmaDataSimplifier.cs,位置,Position
Editor\Tools\UI\FigmaDataSimplifier.cs,纯色,Solid color
Editor\Tools\UI\FigmaDataSimplifier.cs,用于,For
Editor\Tools\UI\FigmaDataSimplifier.cs,原始,Original
Editor\Tools\UI\FigmaDataSimplifier.cs,设为,Set as
Editor\Tools\UI\FigmaDataSimplifier.cs,调用,Call
Editor\Tools\UI\FigmaDataSimplifier.cs,超过,Exceed
Editor\Tools\UI\FigmaDataSimplifier.cs,高度,Height
Editor\Tools\UI\FigmaDataSimplifier.cs,字体,Font
Editor\Tools\UI\FigmaDataSimplifier.cs,布局,Layout
Editor\Tools\UI\FigmaDataSimplifier.cs,背景,Background
Editor\Tools\UI\FigmaDataSimplifier.cs,填充,Fill
Editor\Tools\UI\FigmaDataSimplifier.cs,生成,Generate
Editor\Tools\UI\FigmaDataSimplifier.cs,默认,Default
Editor\Tools\UI\FigmaDataSimplifier.cs,节点,Node
Editor\Tools\UI\FigmaDataSimplifier.cs,隐藏,Hide
Editor\Tools\UI\FigmaDataSimplifier.cs,文本,Text
Editor\Tools\UI\FigmaDataSimplifier.cs,值,Value
Editor\Tools\UI\FigmaDataSimplifier.cs,个,Item
Editor\Tools\UI\FigmaDataSimplifier.cs,等,Etc.
Editor\Tools\UI\FigmaDataSimplifier.cs,和,And
Editor\Tools\UI\FigmaDataSimplifier.cs,为,As
Editor\Tools\UI\UGUILayout.cs,锚点预设将基于元素当前位置而不是父容器的预设位置,Anchor presets will be based on the element's current position instead of the parent's preset position
Editor\Tools\UI\UGUILayout.cs,根据预设类型基于元素自身位置计算锚点,Calculate anchor based on the element's own position according to the preset type
Editor\Tools\UI\UGUILayout.cs,将锚点设置到元素自己的顶部中心位置,Set the anchor to the element's own top-center position
Editor\Tools\UI\UGUILayout.cs,获取元素当前在父容器中的世界位置,Get the element's current world position in the parent container
Editor\Tools\UI\UGUILayout.cs,应用锚点预设并保持视觉位置不变,Apply anchor preset and keep visual position unchanged
Editor\Tools\UI\UGUILayout.cs,否则根据传入的各种属性参数执行,Otherwise execute according to the incoming attribute parameters
Editor\Tools\UI\UGUILayout.cs,将锚点设置到元素自身对应的位置,Set the anchor to the corresponding position of the element itself
Editor\Tools\UI\UGUILayout.cs,基于元素四角相对坐标计算新的,Calculate new based on the element's four-corner relative coordinates
Editor\Tools\UI\UGUILayout.cs,需要通过选择器或其他方式获取,Need to obtain via selector or other methods
Editor\Tools\UI\UGUILayout.cs,创建当前方法支持的参数键列表,Create a list of parameter keys supported by the current method
Editor\Tools\UI\UGUILayout.cs,避免超出父级时被压回父级内部,Avoid being pushed back into the parent when exceeding the parent
Editor\Tools\UI\UGUILayout.cs,计算元素在父容器中的相对位置,Calculate the element's relative position in the parent container
Editor\Tools\UI\UGUILayout.cs,计算当前在父容器中的相对位置,Calculate the current relative position in the parent container
Editor\Tools\UI\UGUILayout.cs,基于元素当前位置重新计算锚点,Recalculate anchor based on the element's current position
Editor\Tools\UI\UGUILayout.cs,这个功能可能需要其他方式实现,This feature may need to be implemented by other means
Editor\Tools\UI\UGUILayout.cs,应用基于自身位置的锚点预设,Apply anchor preset based on its own position
Editor\Tools\UI\UGUILayout.cs,窗口分辨率设置功能已迁移到,Window resolution setting feature has been moved to
Editor\Tools\UI\UGUILayout.cs,检查是否应该进行批量操作,Check whether a batch operation should be performed
Editor\Tools\UI\UGUILayout.cs,保存当前的世界位置和尺寸,Save the current world position and size
Editor\Tools\UI\UGUILayout.cs,检查是否需要保持视觉位置,Check whether to keep the visual position
Editor\Tools\UI\UGUILayout.cs,保持视觉位置与尺寸不变,Keep the visual position and size unchanged
Editor\Tools\UI\UGUILayout.cs,如需设置锚点预设请使用,Use to set anchor presets if needed
Editor\Tools\UI\UGUILayout.cs,计算当前的实际锚点位置,Calculate actual anchor position currently
Editor\Tools\UI\UGUILayout.cs,从执行上下文中提取目标,Extract target from execution context
Editor\Tools\UI\UGUILayout.cs,只处理锚点预设相关参数,Only process anchor preset related parameters
Editor\Tools\UI\UGUILayout.cs,在单个目标上设置属性,Set properties on a single target
Editor\Tools\UI\UGUILayout.cs,设置新的锚点和轴心点,Set new anchor and pivot
Editor\Tools\UI\UGUILayout.cs,从字符串解析数字数组,Parse numeric array from string
Editor\Tools\UI\UGUILayout.cs,在多个目标上设置属性,Set properties on multiple targets
Editor\Tools\UI\UGUILayout.cs,处理获取布局信息操作,Handle get layout info operation
Editor\Tools\UI\UGUILayout.cs,来保持相同的视觉位置,To keep the same visual position
Editor\Tools\UI\UGUILayout.cs,支持方括号和圆括号,Supports square and round brackets
Editor\Tools\UI\UGUILayout.cs,从单个目标获取属性,Get properties from a single target
Editor\Tools\UI\UGUILayout.cs,从多个目标获取属性,Get properties from multiple targets
Editor\Tools\UI\UGUILayout.cs,可同时设置多个属性,Can set multiple properties at once
Editor\Tools\UI\UGUILayout.cs,获取多个目标的所有,Get all of multiple targets
Editor\Tools\UI\UGUILayout.cs,返回所有匹配的对象,Return all matching objects
Editor\Tools\UI\UGUILayout.cs,计算新锚点下需要的,Calculate the required under the new anchor
Editor\Tools\UI\UGUILayout.cs,应用锚点预设到单个,Apply anchor preset to single
Editor\Tools\UI\UGUILayout.cs,创建操作执行状态树,Create operation execution status tree
Editor\Tools\UI\UGUILayout.cs,获取单个目标的所有,Get all of a single target
Editor\Tools\UI\UGUILayout.cs,创建目标定位状态树,Create target positioning status tree
Editor\Tools\UI\UGUILayout.cs,应用锚点预设到多个,Apply anchor preset to multiple
Editor\Tools\UI\UGUILayout.cs,处理锚点预设操作,Handle anchor preset operation
Editor\Tools\UI\UGUILayout.cs,获取所有属性信息,Get all attribute information
Editor\Tools\UI\UGUILayout.cs,应用锚点位置修改,Apply anchor position modification
Editor\Tools\UI\UGUILayout.cs,应用最小锚点修改,Apply minimum anchor modification
Editor\Tools\UI\UGUILayout.cs,专门处理锚点预设,Specially handle anchor presets
Editor\Tools\UI\UGUILayout.cs,应用最大锚点修改,Apply maximum anchor modification
Editor\Tools\UI\UGUILayout.cs,参数获取目标对象,Parameter to get target object
Editor\Tools\UI\UGUILayout.cs,执行综合布局修改,Perform integrated layout modification
Editor\Tools\UI\UGUILayout.cs,检查是否需要修改,Check if modification is needed
Editor\Tools\UI\UGUILayout.cs,只返回第一个对象,Only return the first object
Editor\Tools\UI\UGUILayout.cs,钉在元素顶部中心,Pin to the top center of the element
Editor\Tools\UI\UGUILayout.cs,内部钳制导致误差,Internal clamping causes errors
Editor\Tools\UI\UGUILayout.cs,应用尺寸增量修改,Apply size delta modification
Editor\Tools\UI\UGUILayout.cs,支持数字和字符串,Support numbers and strings
Editor\Tools\UI\UGUILayout.cs,保持视觉位置不变,Keep visual position unchanged
Editor\Tools\UI\UGUILayout.cs,对象是否表示成功,Whether the object indicates success
Editor\Tools\UI\UGUILayout.cs,默认保持视觉位置,Keep visual position by default
Editor\Tools\UI\UGUILayout.cs,锚点预设专用方法,Method dedicated to anchor presets
Editor\Tools\UI\UGUILayout.cs,避免不必要的更新,Avoid unnecessary updates
Editor\Tools\UI\UGUILayout.cs,创建批量操作响应,Create batch operation response
Editor\Tools\UI\UGUILayout.cs,不能直接转换为,Cannot convert directly to
Editor\Tools\UI\UGUILayout.cs,避免序列化问题,Avoid serialization issues
Editor\Tools\UI\UGUILayout.cs,处理字符串类型,Handle string type
Editor\Tools\UI\UGUILayout.cs,格式的紧凑表示,Compact representation of the format
Editor\Tools\UI\UGUILayout.cs,处理字符串格式,Handle string format
Editor\Tools\UI\UGUILayout.cs,不保持视觉位置,Do not keep visual position
Editor\Tools\UI\UGUILayout.cs,转换为枚举类型,Convert to enum type
Editor\Tools\UI\UGUILayout.cs,已经是目标状态,Already in target state
Editor\Tools\UI\UGUILayout.cs,实际应用的锚点,Anchor actually applied
Editor\Tools\UI\UGUILayout.cs,不包含锚点预设,Does not contain anchor preset
Editor\Tools\UI\UGUILayout.cs,应用轴心点修改,Apply pivot modification
Editor\Tools\UI\UGUILayout.cs,期望的数字数量,Expected number of digits
Editor\Tools\UI\UGUILayout.cs,单个对象的情况,Single object case
Editor\Tools\UI\UGUILayout.cs,不使用锚点预设,Do not use anchor preset
Editor\Tools\UI\UGUILayout.cs,已经是目标锚点,Already at target anchor
Editor\Tools\UI\UGUILayout.cs,应用层级控制,Apply hierarchy control
Editor\Tools\UI\UGUILayout.cs,移除外层括号,Remove outer parentheses
Editor\Tools\UI\UGUILayout.cs,设置锚点预设,Set anchor preset
Editor\Tools\UI\UGUILayout.cs,对于其他类型,For other types
Editor\Tools\UI\UGUILayout.cs,个元素的数组,Array of elements
Editor\Tools\UI\UGUILayout.cs,否则获取所有,Otherwise get all
Editor\Tools\UI\UGUILayout.cs,批量操作方法,Batch operation method
Editor\Tools\UI\UGUILayout.cs,需要逐个解析,Need to parse one by one
Editor\Tools\UI\UGUILayout.cs,核心修改方法,Core modification method
Editor\Tools\UI\UGUILayout.cs,应用新的锚点,Apply new anchor
Editor\Tools\UI\UGUILayout.cs,尝试直接作为,Try directly as
Editor\Tools\UI\UGUILayout.cs,默认操作处理,Default operation handling
Editor\Tools\UI\UGUILayout.cs,支持多种格式,Support multiple formats
Editor\Tools\UI\UGUILayout.cs,不能直接转为,Cannot directly convert to
Editor\Tools\UI\UGUILayout.cs,需要包含至少,Must contain at least
Editor\Tools\UI\UGUILayout.cs,处理布局操作,Handle layout operation
Editor\Tools\UI\UGUILayout.cs,直接设置锚点,Set anchor directly
Editor\Tools\UI\UGUILayout.cs,去除首尾空格,Trim leading and trailing spaces
Editor\Tools\UI\UGUILayout.cs,获取父容器的,Get parent container's
Editor\Tools\UI\UGUILayout.cs,检查是否使用,Check whether to use
Editor\Tools\UI\UGUILayout.cs,解析每个数字,Parse each number
Editor\Tools\UI\UGUILayout.cs,属性应用方法,Attribute apply method
Editor\Tools\UI\UGUILayout.cs,格式数据表示,Format data representation
Editor\Tools\UI\UGUILayout.cs,目标查找参数,Target search parameter
Editor\Tools\UI\UGUILayout.cs,处理数字类型,Handle numeric type
Editor\Tools\UI\UGUILayout.cs,属性操作方法,Attribute operation method
Editor\Tools\UI\UGUILayout.cs,预设锚点类型,Preset anchor type
Editor\Tools\UI\UGUILayout.cs,的对象或至少,Object or at least
Editor\Tools\UI\UGUILayout.cs,应用锚点预设,Apply anchor preset
Editor\Tools\UI\UGUILayout.cs,值到指定类型,Value to specified type
Editor\Tools\UI\UGUILayout.cs,如果没有父,If there is no parent
Editor\Tools\UI\UGUILayout.cs,的数据表示,Data representation of
Editor\Tools\UI\UGUILayout.cs,按逗号分割,Split by comma
Editor\Tools\UI\UGUILayout.cs,获取属性值,Get attribute value
Editor\Tools\UI\UGUILayout.cs,的计算方式,Computation method of
Editor\Tools\UI\UGUILayout.cs,对应方法名,Corresponding method name
Editor\Tools\UI\UGUILayout.cs,操作不支持,Operation not supported
Editor\Tools\UI\UGUILayout.cs,单个或多个,Single or multiple
Editor\Tools\UI\UGUILayout.cs,输入字符串,Input string
Editor\Tools\UI\UGUILayout.cs,设置属性值,Set attribute value
Editor\Tools\UI\UGUILayout.cs,转换为类型,Convert to type
Editor\Tools\UI\UGUILayout.cs,修改到多个,Modify to multiple
Editor\Tools\UI\UGUILayout.cs,修改到单个,Modify to single
Editor\Tools\UI\UGUILayout.cs,特殊参数,Special parameter
Editor\Tools\UI\UGUILayout.cs,层级控制,Hierarchy control
Editor\Tools\UI\UGUILayout.cs,不支持将,Does not support converting
Editor\Tools\UI\UGUILayout.cs,失败返回,Return on failure
Editor\Tools\UI\UGUILayout.cs,向量类型,Vector type
Editor\Tools\UI\UGUILayout.cs,抛出异常,Throw exception
Editor\Tools\UI\UGUILayout.cs,需要包含,Need to contain
Editor\Tools\UI\UGUILayout.cs,枚举类型,Enum type
Editor\Tools\UI\UGUILayout.cs,支持格式,Supported format
Editor\Tools\UI\UGUILayout.cs,操作参数,Operation parameter
Editor\Tools\UI\UGUILayout.cs,无法将值,Cannot convert value
Editor\Tools\UI\UGUILayout.cs,解析后的,Parsed
Editor\Tools\UI\UGUILayout.cs,基本属性,Basic property
Editor\Tools\UI\UGUILayout.cs,综合布局,Integrated layout
Editor\Tools\UI\UGUILayout.cs,如果使用,If use
Editor\Tools\UI\UGUILayout.cs,先尝试从,Try from first
Editor\Tools\UI\UGUILayout.cs,辅助方法,Helper method
Editor\Tools\UI\UGUILayout.cs,其他预设,Other presets
Editor\Tools\UI\UGUILayout.cs,专门处理,Specifically handle
Editor\Tools\UI\UGUILayout.cs,基础类型,Base type
Editor\Tools\UI\UGUILayout.cs,检查数量,Check quantity
Editor\Tools\UI\UGUILayout.cs,格式节省,Format saving
Editor\Tools\UI\UGUILayout.cs,属性信息,Attribute information
Editor\Tools\UI\UGUILayout.cs,使用方式,Usage
Editor\Tools\UI\UGUILayout.cs,向后兼容,Backward compatible
Editor\Tools\UI\UGUILayout.cs,如果存在,If exists
Editor\Tools\UI\UGUILayout.cs,无需修改,No modification required
Editor\Tools\UI\UGUILayout.cs,时默认为,Default when
Editor\Tools\UI\UGUILayout.cs,特有属性,Specific property
Editor\Tools\UI\UGUILayout.cs,应用新的,Apply new
Editor\Tools\UI\UGUILayout.cs,范围钳制,Range clamping
Editor\Tools\UI\UGUILayout.cs,获取属性,Get attribute
Editor\Tools\UI\UGUILayout.cs,不进行,Not perform
Editor\Tools\UI\UGUILayout.cs,不指定,Not specified
Editor\Tools\UI\UGUILayout.cs,的影响,Effect of
Editor\Tools\UI\UGUILayout.cs,转换为,Convert to
Editor\Tools\UI\UGUILayout.cs,等同于,Equivalent to
Editor\Tools\UI\UGUILayout.cs,当前值,Current value
Editor\Tools\UI\UGUILayout.cs,默认为,Default is
Editor\Tools\UI\UGUILayout.cs,时调用,Call when
Editor\Tools\UI\UGUILayout.cs,尝试从,Try from
Editor\Tools\UI\UGUILayout.cs,中没有,Not in
Editor\Tools\UI\UGUILayout.cs,无法将,Unable to convert
Editor\Tools\UI\UGUILayout.cs,字符串,String
Editor\Tools\UI\UGUILayout.cs,模式,Pattern
Editor\Tools\UI\UGUILayout.cs,当为,When is
Editor\Tools\UI\UGUILayout.cs,功能,Function
Editor\Tools\UI\UGUILayout.cs,使用,Use
Editor\Tools\UI\UGUILayout.cs,转换,Convert
Editor\Tools\UI\UGUILayout.cs,注意,Note
Editor\Tools\UI\UGUILayout.cs,管理,Manage
Editor\Tools\UI\UGUILayout.cs,节省,Save
Editor\Tools\UI\UGUILayout.cs,实现,Implement
Editor\Tools\UI\UGUILayout.cs,操作,Operation
Editor\Tools\UI\UGUILayout.cs,如果,If
Editor\Tools\UI\UGUILayout.cs,读取,Read
Editor\Tools\UI\UGUILayout.cs,创建,Create
Editor\Tools\UI\UGUILayout.cs,效果,Effect
Editor\Tools\UI\UGUILayout.cs,工具,Tool
Editor\Tools\UI\UGUILayout.cs,检查,Check
Editor\Tools\UI\UGUILayout.cs,属性,Attribute
Editor\Tools\UI\UGUILayout.cs,执行,Execute
Editor\Tools\UI\UGUILayout.cs,参考,Reference
Editor\Tools\UI\UGUILayout.cs,获取,Get
Editor\Tools\UI\UGUILayout.cs,根据,According to
Editor\Tools\UI\UGUILayout.cs,数组,Array
Editor\Tools\UI\UGUILayout.cs,解析,Parse
Editor\Tools\UI\UGUILayout.cs,处理,Process
Editor\Tools\UI\UGUILayout.cs,避免,Avoid
Editor\Tools\UI\UGUILayout.cs,参数,Parameter
Editor\Tools\UI\UGUILayout.cs,范围,Range
Editor\Tools\UI\UGUILayout.cs,例如,For example
Editor\Tools\UI\UGUILayout.cs,包含,Contain
Editor\Tools\UI\UGUILayout.cs,类型,Type
Editor\Tools\UI\UGUILayout.cs,修改,Modify
Editor\Tools\UI\UGUILayout.cs,应用,Apply
Editor\Tools\UI\UGUILayout.cs,的,Of
Editor\Tools\UI\UGUILayout.cs,值,Value
Editor\Tools\UI\UGUILayout.cs,时,When
Editor\Tools\UI\UGUILayout.cs,从,From
Editor\Tools\UI\UIRuleManage.cs,也可以返回全局的构建步骤和环境配置,Can also return global build steps and environment settings
Editor\Tools\UI\UIRuleManage.cs,获取优化规则文件的完整本地路径,Get the complete local path of the optimization rule file
Editor\Tools\UI\UIRuleManage.cs,创建当前方法支持的参数键列表,Create the list of parameter keys supported by the current method
Editor\Tools\UI\UIRuleManage.cs,优先选择在指定路径下的文件,Prefer files in the specified path
Editor\Tools\UI\UIRuleManage.cs,判断是本地路径还是网络路径,Determine if it is a local or network path
Editor\Tools\UI\UIRuleManage.cs,检查是否已经存在同名的资产,Check if an asset with the same name already exists
Editor\Tools\UI\UIRuleManage.cs,如果在指定路径下没找到,If not found in the specified path
Editor\Tools\UI\UIRuleManage.cs,分块读取文件以避免阻塞,Read file in chunks to avoid blocking
Editor\Tools\UI\UIRuleManage.cs,使用协程分帧读取大文件,Use coroutines to read large files in frames
Editor\Tools\UI\UIRuleManage.cs,获取图片的完整本地路径,Get complete local path of image
Editor\Tools\UI\UIRuleManage.cs,标记资产为脏数据并保存,Mark asset as dirty and save
Editor\Tools\UI\UIRuleManage.cs,启动异步获取原型图片,Start async fetch of prototype image
Editor\Tools\UI\UIRuleManage.cs,加载本地图片并转换为,Load local image and convert to
Editor\Tools\UI\UIRuleManage.cs,成功读取优化规则文件,Successfully read optimization rule file
Editor\Tools\UI\UIRuleManage.cs,批量记录节点命名信息,Batch record node naming information
Editor\Tools\UI\UIRuleManage.cs,构建环境和附加条件的,Of build environment and extra conditions
Editor\Tools\UI\UIRuleManage.cs,如果没有提供保存路径,If no save path provided
Editor\Tools\UI\UIRuleManage.cs,读取优化规则文件失败,Fail to read optimization rule file
Editor\Tools\UI\UIRuleManage.cs,在协程中处理文件读取,Handle file reading in coroutine
Editor\Tools\UI\UIRuleManage.cs,启动协程获取原型图片,Start coroutine to get prototype image
Editor\Tools\UI\UIRuleManage.cs,加载网络图片并转换为,Load online image and convert to
Editor\Tools\UI\UIRuleManage.cs,构建完整的文件路径,Build the full file path
Editor\Tools\UI\UIRuleManage.cs,未设置优化规则路径,Optimization rule path not set
Editor\Tools\UI\UIRuleManage.cs,判断是否为网络路径,Determine whether it's a network path
Editor\Tools\UI\UIRuleManage.cs,获取原型图片的协程,Coroutine to get prototype image
Editor\Tools\UI\UIRuleManage.cs,根据文件扩展名确定,Determine by file extension
Editor\Tools\UI\UIRuleManage.cs,在全工程中查找所有,Find all throughout the project
Editor\Tools\UI\UIRuleManage.cs,本地图片文件不存在,Local image file does not exist
Editor\Tools\UI\UIRuleManage.cs,中的配置替代原来的,Config in replaces the original
Editor\Tools\UI\UIRuleManage.cs,优化规则文件不存在,Optimization rule file does not exist
Editor\Tools\UI\UIRuleManage.cs,如果已经是绝对路径,If already an absolute path
Editor\Tools\UI\UIRuleManage.cs,根据文件扩展名获取,Get by file extension
Editor\Tools\UI\UIRuleManage.cs,即使没有找到特定的,Even if the specific one is not found
Editor\Tools\UI\UIRuleManage.cs,为全路径或相对路径,A full path or relative path
Editor\Tools\UI\UIRuleManage.cs,在协程外部处理异常,Handle exceptions outside the coroutine
Editor\Tools\UI\UIRuleManage.cs,制作方案和修改记录,Create solution and modification record
Editor\Tools\UI\UIRuleManage.cs,布局优化规则已加载,Layout optimization rules loaded
Editor\Tools\UI\UIRuleManage.cs,使用第一个找到的,Use the first one found
Editor\Tools\UI\UIRuleManage.cs,处理批量节点信息,Handle batch node information
Editor\Tools\UI\UIRuleManage.cs,网络图片下载超时,Network image download timeout
Editor\Tools\UI\UIRuleManage.cs,使用协程方式获取,Use coroutine method to get
Editor\Tools\UI\UIRuleManage.cs,原型图片加载完成,Prototype image loaded
Editor\Tools\UI\UIRuleManage.cs,没有更多数据可读,No more data to read
Editor\Tools\UI\UIRuleManage.cs,获取节点命名信息,Get node naming information
Editor\Tools\UI\UIRuleManage.cs,拼接到项目根目录,Append to project root directory
Editor\Tools\UI\UIRuleManage.cs,网络图片下载失败,Network image download failed
Editor\Tools\UI\UIRuleManage.cs,确保保存目录存在,Make sure save directory exists
Editor\Tools\UI\UIRuleManage.cs,加载图片并转换为,Load image and convert to
Editor\Tools\UI\UIRuleManage.cs,布局信息需要下载,Layout info needs downloading
Editor\Tools\UI\UIRuleManage.cs,本地图片数据为空,Local image data is empty
Editor\Tools\UI\UIRuleManage.cs,生成包含构建步骤,Generate including build steps
Editor\Tools\UI\UIRuleManage.cs,本地图片读取失败,Failed to read local image
Editor\Tools\UI\UIRuleManage.cs,如果直接加载失败,If direct load fails
Editor\Tools\UI\UIRuleManage.cs,启动图片加载协程,Start image loading coroutine
Editor\Tools\UI\UIRuleManage.cs,制作规则和方案,Create rules and solutions
Editor\Tools\UI\UIRuleManage.cs,网络图片转换为,Network image converted to
Editor\Tools\UI\UIRuleManage.cs,从本地加载图片,Load image from local
Editor\Tools\UI\UIRuleManage.cs,不包含原型图片,Does not contain prototype image
Editor\Tools\UI\UIRuleManage.cs,从网络加载图片,Load image from network
Editor\Tools\UI\UIRuleManage.cs,可能是错误路径,May be wrong path
Editor\Tools\UI\UIRuleManage.cs,中解析这些字段,Parse these fields in
Editor\Tools\UI\UIRuleManage.cs,创建时间戳记录,Create timestamp record
Editor\Tools\UI\UIRuleManage.cs,从指定路径载入,Load from specified path
Editor\Tools\UI\UIRuleManage.cs,本地图片转换为,Local image converted to
Editor\Tools\UI\UIRuleManage.cs,开始加载图片,Begin loading image
Editor\Tools\UI\UIRuleManage.cs,规则构建完成,Rules construction complete
Editor\Tools\UI\UIRuleManage.cs,检查下载结果,Check download result
Editor\Tools\UI\UIRuleManage.cs,返回原始路径,Return original path
Editor\Tools\UI\UIRuleManage.cs,直接读取文件,Read file directly
Editor\Tools\UI\UIRuleManage.cs,获取原型图片,Get prototype image
Editor\Tools\UI\UIRuleManage.cs,支持两种格式,Support two formats
Editor\Tools\UI\UIRuleManage.cs,添加构建步骤,Add build step
Editor\Tools\UI\UIRuleManage.cs,启动异步获取,Start async fetch
Editor\Tools\UI\UIRuleManage.cs,如果都找不到,If none can be found
Editor\Tools\UI\UIRuleManage.cs,添加构建环境,Add build environment
Editor\Tools\UI\UIRuleManage.cs,处理异步操作,Handle async operation
Editor\Tools\UI\UIRuleManage.cs,读取文件数据,Read file data
Editor\Tools\UI\UIRuleManage.cs,构建规则说明,Build rule description
Editor\Tools\UI\UIRuleManage.cs,创建资产文件,Create asset file
Editor\Tools\UI\UIRuleManage.cs,调整数组大小,Adjust array size
Editor\Tools\UI\UIRuleManage.cs,设置基本属性,Set basic property
Editor\Tools\UI\UIRuleManage.cs,使用默认路径,Use default path
Editor\Tools\UI\UIRuleManage.cs,每读取一块就,For each chunk read
Editor\Tools\UI\UIRuleManage.cs,检查值的类型,Check the type of value
Editor\Tools\UI\UIRuleManage.cs,尝试查找文件,Attempt to find file
Editor\Tools\UI\UIRuleManage.cs,添加附加条件,Add additional condition
Editor\Tools\UI\UIRuleManage.cs,启动协程获取,Start coroutine fetch
Editor\Tools\UI\UIRuleManage.cs,规则管理工具,Rules management tool
Editor\Tools\UI\UIRuleManage.cs,列表已初始化,List initialized
Editor\Tools\UI\UIRuleManage.cs,批量记录节点,Batch record nodes
Editor\Tools\UI\UIRuleManage.cs,设置各种属性,Set various attributes
Editor\Tools\UI\UIRuleManage.cs,等待下载完成,Wait for download complete
Editor\Tools\UI\UIRuleManage.cs,的文本内容,The text content of
Editor\Tools\UI\UIRuleManage.cs,检查是否有,Check whether there is
Editor\Tools\UI\UIRuleManage.cs,合并所有块,Merge all chunks
Editor\Tools\UI\UIRuleManage.cs,规范化路径,Normalize path
Editor\Tools\UI\UIRuleManage.cs,搜索相关的,Search the related
Editor\Tools\UI\UIRuleManage.cs,对应方法名,Corresponding method name
Editor\Tools\UI\UIRuleManage.cs,键值对格式,Key-value format
Editor\Tools\UI\UIRuleManage.cs,创建状态树,Create state tree
Editor\Tools\UI\UIRuleManage.cs,查找相关的,Find related
Editor\Tools\UI\UIRuleManage.cs,文件不存在,File does not exist
Editor\Tools\UI\UIRuleManage.cs,查找对应的,Find the corresponding
Editor\Tools\UI\UIRuleManage.cs,尝试拼接到,Try to append to
Editor\Tools\UI\UIRuleManage.cs,如果提供了,If provided
Editor\Tools\UI\UIRuleManage.cs,如果路径以,If path starts with
Editor\Tools\UI\UIRuleManage.cs,清理资源,Clear resources
Editor\Tools\UI\UIRuleManage.cs,网络图片,Online image
Editor\Tools\UI\UIRuleManage.cs,避免阻塞,Avoid blocking
Editor\Tools\UI\UIRuleManage.cs,处理批量,Handle batch
Editor\Tools\UI\UIRuleManage.cs,自动载入,Auto load
Editor\Tools\UI\UIRuleManage.cs,获取节点,Get node
Editor\Tools\UI\UIRuleManage.cs,网络路径,Network path
Editor\Tools\UI\UIRuleManage.cs,规则信息,Rule info
Editor\Tools\UI\UIRuleManage.cs,简单格式,Simple format
Editor\Tools\UI\UIRuleManage.cs,添加数据,Add data
Editor\Tools\UI\UIRuleManage.cs,添加记录,Add record
Editor\Tools\UI\UIRuleManage.cs,详细格式,Detailed format
Editor\Tools\UI\UIRuleManage.cs,描述文本,Description text
Editor\Tools\UI\UIRuleManage.cs,读取失败,Read failed
Editor\Tools\UI\UIRuleManage.cs,直接返回,Directly return
Editor\Tools\UI\UIRuleManage.cs,本地路径,Local path
Editor\Tools\UI\UIRuleManage.cs,构建步骤,Build step
Editor\Tools\UI\UIRuleManage.cs,附加条件,Additional condition
Editor\Tools\UI\UIRuleManage.cs,协程版本,Coroutine version
Editor\Tools\UI\UIRuleManage.cs,检查超时,Check timeout
Editor\Tools\UI\UIRuleManage.cs,添加标题,Add title
Editor\Tools\UI\UIRuleManage.cs,尝试解析,Try to parse
Editor\Tools\UI\UIRuleManage.cs,创建新的,Create new
Editor\Tools\UI\UIRuleManage.cs,中的配置,Config in
Editor\Tools\UI\UIRuleManage.cs,负责管理,Responsible for management
Editor\Tools\UI\UIRuleManage.cs,修改记录,Modification record
Editor\Tools\UI\UIRuleManage.cs,构建环境,Build environment
Editor\Tools\UI\UIRuleManage.cs,尝试加载,Try to load
Editor\Tools\UI\UIRuleManage.cs,制作规则,Make rules
Editor\Tools\UI\UIRuleManage.cs,转换失败,Conversion failed
Editor\Tools\UI\UIRuleManage.cs,不包含,Does not contain
Editor\Tools\UI\UIRuleManage.cs,不再从,No longer from
Editor\Tools\UI\UIRuleManage.cs,目录下,In the directory
Editor\Tools\UI\UIRuleManage.cs,中获取,Get from
Editor\Tools\UI\UIRuleManage.cs,秒超时,Seconds timeout
Editor\Tools\UI\UIRuleManage.cs,转换为,Convert to
Editor\Tools\UI\UIRuleManage.cs,避免在,Avoid in
Editor\Tools\UI\UIRuleManage.cs,默认为,Default is
Editor\Tools\UI\UIRuleManage.cs,现在从,Now from
Editor\Tools\UI\UIRuleManage.cs,中使用,Use in
Editor\Tools\UI\UIRuleManage.cs,或对象,Or object
Editor\Tools\UI\UIRuleManage.cs,字符串,String
Editor\Tools\UI\UIRuleManage.cs,大小,Size
Editor\Tools\UI\UIRuleManage.cs,使用,Use
Editor\Tools\UI\UIRuleManage.cs,信息,Information
Editor\Tools\UI\UIRuleManage.cs,注意,Note
Editor\Tools\UI\UIRuleManage.cs,管理,Manage
Editor\Tools\UI\UIRuleManage.cs,路径,Path
Editor\Tools\UI\UIRuleManage.cs,前缀,Prefix
Editor\Tools\UI\UIRuleManage.cs,下载,Download
Editor\Tools\UI\UIRuleManage.cs,添加,Add
Editor\Tools\UI\UIRuleManage.cs,读取,Read
Editor\Tools\UI\UIRuleManage.cs,数据,Data
Editor\Tools\UI\UIRuleManage.cs,创建,Create
Editor\Tools\UI\UIRuleManage.cs,兼容,Compatible
Editor\Tools\UI\UIRuleManage.cs,规则,Rule
Editor\Tools\UI\UIRuleManage.cs,成功,Success
Editor\Tools\UI\UIRuleManage.cs,实例,Instance
Editor\Tools\UI\UIRuleManage.cs,获取,Get
Editor\Tools\UI\UIRuleManage.cs,根据,According to
Editor\Tools\UI\UIRuleManage.cs,一次,Once
Editor\Tools\UI\UIRuleManage.cs,开头,Start
Editor\Tools\UI\UIRuleManage.cs,格式,Format
Editor\Tools\UI\UIRuleManage.cs,确保,Ensure
Editor\Tools\UI\UIRuleManage.cs,类型,Type
Editor\Tools\UI\UIRuleManage.cs,构建,Build
Editor\Tools\UI\UIRuleManage.cs,和,And
Editor\Tools\Window\GameView.cs,检查是否已存在相同的自定义尺寸,Check if the same custom size already exists
Editor\Tools\Window\GameView.cs,创建当前方法支持的参数键列表,Create the list of parameter keys supported by the current method
Editor\Tools\Window\GameView.cs,获取当前平台的游戏视图尺寸组,Get the game view size group for the current platform
Editor\Tools\Window\GameView.cs,这个功能需要更复杂的反射实现,This feature requires more complex reflection
Editor\Tools\Window\GameView.cs,处理通过方法或属性获取的实例,Handle instance retrieved by method or property
Editor\Tools\Window\GameView.cs,尝试多种方式获取当前组类型,Try multiple ways to get the current group type
Editor\Tools\Window\GameView.cs,处理设置目标帧率的操作,Handle setting target frame rate operation
Editor\Tools\Window\GameView.cs,处理获取统计信息的操作,Handle get statistics operation
Editor\Tools\Window\GameView.cs,查找是否有匹配的分辨率,Check if matching resolution exists
Editor\Tools\Window\GameView.cs,获取选中的分辨率索引,Get index of selected resolution
Editor\Tools\Window\GameView.cs,如果前两种方法都失败,If the first two methods fail
Editor\Tools\Window\GameView.cs,可能产生警告但能工作,May show warning but will work
Editor\Tools\Window\GameView.cs,处理最大化窗口的操作,Handle maximize window operation
Editor\Tools\Window\GameView.cs,处理设置分辨率的操作,Handle set resolution operation
Editor\Tools\Window\GameView.cs,处理获取分辨率的操作,Handle get resolution operation
Editor\Tools\Window\GameView.cs,处理设置宽高比的操作,Handle set aspect ratio operation
Editor\Tools\Window\GameView.cs,添加新的自定义尺寸,Add new custom size
Editor\Tools\Window\GameView.cs,会产生警告但能工作,Will show warning but will work
Editor\Tools\Window\GameView.cs,因为它不是公开的,Because it is not public
Editor\Tools\Window\GameView.cs,创建自定义分辨率,Create custom resolution
Editor\Tools\Window\GameView.cs,尝试通过属性获取,Try to get by property
Editor\Tools\Window\GameView.cs,窗口当前分辨率,Current window resolution
Editor\Tools\Window\GameView.cs,获取选中的尺寸,Get selected size
Editor\Tools\Window\GameView.cs,尝试最后的方法,Try the last method
Editor\Tools\Window\GameView.cs,只记录设置请求,Only record set request
Editor\Tools\Window\GameView.cs,获取当前平台组,Get current platform group
Editor\Tools\Window\GameView.cs,获取尺寸属性,Get size property
Editor\Tools\Window\GameView.cs,使用反射访问,Access by reflection
Editor\Tools\Window\GameView.cs,新添加的索引,Newly added index
Editor\Tools\Window\GameView.cs,获取单例实例,Get singleton instance
Editor\Tools\Window\GameView.cs,推断当前平台,Infer current platform
Editor\Tools\Window\GameView.cs,窗口统计信息,Window statistics
Editor\Tools\Window\GameView.cs,使用该分辨率,Use this resolution
Editor\Tools\Window\GameView.cs,设置目标帧率,Set target frame rate
Editor\Tools\Window\GameView.cs,通过属性获取,Get by property
Editor\Tools\Window\GameView.cs,获取当前的,Get current
Editor\Tools\Window\GameView.cs,设置宽高比,Set aspect ratio
Editor\Tools\Window\GameView.cs,如果没找到,If not found
Editor\Tools\Window\GameView.cs,使用完整的,Use complete
Editor\Tools\Window\GameView.cs,窗口分辨率,Window resolution
Editor\Tools\Window\GameView.cs,尝试最大化,Try maximize
Editor\Tools\Window\GameView.cs,对应方法名,Corresponding method name
Editor\Tools\Window\GameView.cs,获取实例,Get instance
Editor\Tools\Window\GameView.cs,迁移而来,Migrated from
Editor\Tools\Window\GameView.cs,简化版本,Simplified version
Editor\Tools\Window\GameView.cs,获取该组,Get this group
Editor\Tools\Window\GameView.cs,窗口管理,Window management
Editor\Tools\Window\GameView.cs,尝试通过,Try via
Editor\Tools\Window\GameView.cs,处理设置,Handle setting
Editor\Tools\Window\GameView.cs,备用方法,Alternative method
Editor\Tools\Window\GameView.cs,的操作,Operation of
Editor\Tools\Window\GameView.cs,近似值,Approximate value
Editor\Tools\Window\GameView.cs,默认为,Default is
Editor\Tools\Window\GameView.cs,最大化,Maximize
Editor\Tools\Window\GameView.cs,默认,Default
Editor\Tools\Window\GameView.cs,尝试,Try
Editor\Tools\Window\GameView.cs,使用,Use
Editor\Tools\Window\GameView.cs,设置,Set
Editor\Tools\Window\GameView.cs,实例,Instance
Editor\Tools\Window\GameView.cs,方式,Method
Editor\Tools\Window\GameView.cs,获取,Get
Editor\Tools\Window\GameView.cs,刷新,Refresh
Editor\Tools\Window\GameView.cs,根据,According to
Editor\Tools\Window\GameView.cs,方法,Method
Editor\Tools\Window\GameView.cs,实现,Implement
Editor\Tools\Window\GameView.cs,窗口,Window
Editor\Tools\Window\GameView.cs,从,From
Editor\Tools\Window\GameView.cs,类,Class
Editor\Utils\ConsoleUtils.cs,使用标准换行符连接从堆栈开始索引往后的行,Join lines from stack start index with standard newline
Editor\Utils\ConsoleUtils.cs,使用反射将条目数据获取到我们的实例中,Use reflection to get entry data into our instance
Editor\Utils\ConsoleUtils.cs,消息内容和堆栈跟踪推断正确的日志类型,Infer correct log type from message and stack trace
Editor\Utils\ConsoleUtils.cs,使用堆栈跟踪信息进行更准确的类型识别,Identify type more accurately using stack trace info
Editor\Utils\ConsoleUtils.cs,日志消息通常在主消息后附加堆栈跟踪,Log message usually appends stack trace after main message
Editor\Utils\ConsoleUtils.cs,移除空行以优雅地处理不同的行结尾,Remove blank lines to gracefully handle line endings
Editor\Utils\ConsoleUtils.cs,尝试从日志消息中提取堆栈跟踪部分,Try to extract stack trace section from log message
Editor\Utils\ConsoleUtils.cs,包含潜在堆栈跟踪的完整日志消息,Full log message containing possible stack trace
Editor\Utils\ConsoleUtils.cs,基于模式没有找到明确的堆栈跟踪,No explicit stack trace found based on pattern
Editor\Utils\ConsoleUtils.cs,检查反射成员是否已正确初始化,Check if reflection members have been correctly initialized
Editor\Utils\ConsoleUtils.cs,优先使用堆栈跟踪进行类型判断,Prefer stack trace for type judgement
Editor\Utils\ConsoleUtils.cs,这重构了消息的堆栈跟踪部分,This reconstructs the stack trace portion of the message
Editor\Utils\ConsoleUtils.cs,检查行是否以可能的命名空间,Check if line starts with a possible namespace
Editor\Utils\ConsoleUtils.cs,静态构造函数用于反射设置,Static constructor used for reflection setup
Editor\Utils\ConsoleUtils.cs,如果找到了潜在的开始索引,If potential start index found
Editor\Utils\ConsoleUtils.cs,参数决定是否包含堆栈信息,Parameter determines whether stack info is included
Editor\Utils\ConsoleUtils.cs,位定义与我们预期的不同,Bit definition differs from our expectation
Editor\Utils\ConsoleUtils.cs,因为我们可能有有效数据,Because we may have valid data
Editor\Utils\ConsoleUtils.cs,编辑器控制台的实际操作,Actual operation of editor console
Editor\Utils\ConsoleUtils.cs,只提取第一行作为纯消息,Only extract the first line as plain message
Editor\Utils\ConsoleUtils.cs,简化的基于位模式的映射,Simplified mapping based on bit pattern
Editor\Utils\ConsoleUtils.cs,即使在迭代期间出现错误,Even if an error occurs during iteration
Editor\Utils\ConsoleUtils.cs,对于编译错误等特殊情况,For special cases like compilation error
Editor\Utils\ConsoleUtils.cs,包括读取和清空日志条目,Include reading and clearing log entries
Editor\Utils\ConsoleUtils.cs,找到堆栈跟踪的可能开始,Find possible start of stack trace
Editor\Utils\ConsoleUtils.cs,检查常见的堆栈跟踪模式,Check common stack trace patterns
Editor\Utils\ConsoleUtils.cs,要获取的日志类型列表,List of log types to get
Editor\Utils\ConsoleUtils.cs,提取的堆栈跟踪字符串,Extracted stack trace string
Editor\Utils\ConsoleUtils.cs,但我们应该将其识别为,But we should recognize it as
Editor\Utils\ConsoleUtils.cs,格式化的日志条目列表,Formatted log entry list
Editor\Utils\ConsoleUtils.cs,可能会改变可访问性,May affect accessibility
Editor\Utils\ConsoleUtils.cs,编译错误通常不包含,Compile errors usually don't contain
Editor\Utils\ConsoleUtils.cs,如果没有找到则返回,Return if not found
Editor\Utils\ConsoleUtils.cs,没有单独的堆栈跟踪,No separate stack trace
Editor\Utils\ConsoleUtils.cs,对于真正的编译错误,For real compile errors
Editor\Utils\ConsoleUtils.cs,获取控制台日志条目,Get console log entry
Editor\Utils\ConsoleUtils.cs,如果只有一行或更少,If only one line or less
Editor\Utils\ConsoleUtils.cs,确保我们总是调用,Ensure we always call
Editor\Utils\ConsoleUtils.cs,使用反射访问内部,Use reflection to access internal
Editor\Utils\ConsoleUtils.cs,以返回结构化数据,To return structured data
Editor\Utils\ConsoleUtils.cs,从第二行开始检查,Start check from line 2
Editor\Utils\ConsoleUtils.cs,这是最可靠的方法,This is the most reliable method
Editor\Utils\ConsoleUtils.cs,首先检查编译警告,Check compile warnings first
Editor\Utils\ConsoleUtils.cs,是否包含堆栈跟踪,Whether contains stack trace
Editor\Utils\ConsoleUtils.cs,将编译警告标记为,Mark compile warning as
Editor\Utils\ConsoleUtils.cs,不需要堆栈跟踪时,When no stack trace needed
Editor\Utils\ConsoleUtils.cs,使用反射提取数据,Use reflection to extract data
Editor\Utils\ConsoleUtils.cs,格式化和类型推断,Formatting and type inference
Editor\Utils\ConsoleUtils.cs,这里不返回错误,No error returned here
Editor\Utils\ConsoleUtils.cs,限制获取的数量,Limit the number retrieved
Editor\Utils\ConsoleUtils.cs,需要堆栈跟踪时,When stack trace is needed
Editor\Utils\ConsoleUtils.cs,默认为普通日志,Default is normal log
Editor\Utils\ConsoleUtils.cs,清空控制台日志,Clear console logs
Editor\Utils\ConsoleUtils.cs,确切的位可能在,Exact bit may be in
Editor\Utils\ConsoleUtils.cs,调用的堆栈跟踪,Called stack trace
Editor\Utils\ConsoleUtils.cs,代码或常见模式,Code or common pattern
Editor\Utils\ConsoleUtils.cs,创建实例传递给,Create instance and pass to
Editor\Utils\ConsoleUtils.cs,重新定义位映射,Redefine bit mapping
Editor\Utils\ConsoleUtils.cs,数据的反射成员,Reflection member for data
Editor\Utils\ConsoleUtils.cs,基于实际观察,Based on observation
Editor\Utils\ConsoleUtils.cs,可能对应其他,May correspond to other
Editor\Utils\ConsoleUtils.cs,版本之间改变,Change between versions
Editor\Utils\ConsoleUtils.cs,备用模式匹配,Alternative pattern match
Editor\Utils\ConsoleUtils.cs,不区分大小写,Case insensitive
Editor\Utils\ConsoleUtils.cs,用于访问内部,Used to access internal
Editor\Utils\ConsoleUtils.cs,表示获取所有,Indicates get all
Editor\Utils\ConsoleUtils.cs,通常缩进或以,Usually indented or with
Editor\Utils\ConsoleUtils.cs,确保类型正确,Ensure type is correct
Editor\Utils\ConsoleUtils.cs,忽略嵌套异常,Ignore nested exception
Editor\Utils\ConsoleUtils.cs,或未找到堆栈,Or stack not found
Editor\Utils\ConsoleUtils.cs,以防止后续的,To avoid subsequent
Editor\Utils\ConsoleUtils.cs,内部辅助方法,Internal helper method
Editor\Utils\ConsoleUtils.cs,基于反编译的,Based on decompilation
Editor\Utils\ConsoleUtils.cs,使用完整消息,Use full message
Editor\Utils\ConsoleUtils.cs,应用数量限制,Apply count limit
Editor\Utils\ConsoleUtils.cs,通过观察发现,Discovered by observation
Editor\Utils\ConsoleUtils.cs,将成员设置为,Set member as
Editor\Utils\ConsoleUtils.cs,也要确保调用,Also make sure call
Editor\Utils\ConsoleUtils.cs,不那么精确,Not so precise
Editor\Utils\ConsoleUtils.cs,位是可靠的,Bit is reliable
Editor\Utils\ConsoleUtils.cs,文本过滤器,Text filter
Editor\Utils\ConsoleUtils.cs,枚举的映射,Enum mapping
Editor\Utils\ConsoleUtils.cs,从新行开始,Start from new line
Editor\Utils\ConsoleUtils.cs,按类型过滤,Filter by type
Editor\Utils\ConsoleUtils.cs,类模式开始,Class pattern start
Editor\Utils\ConsoleUtils.cs,按文本过滤,Filter by text
Editor\Utils\ConsoleUtils.cs,但要记录它,But record it
Editor\Utils\ConsoleUtils.cs,跳过空消息,Skip blank message
Editor\Utils\ConsoleUtils.cs,返回格式,Return format
Editor\Utils\ConsoleUtils.cs,默认回退,Default fallback
Editor\Utils\ConsoleUtils.cs,静态方法,Static method
Editor\Utils\ConsoleUtils.cs,精确匹配,Exact match
Editor\Utils\ConsoleUtils.cs,因为内部,Because internal
Editor\Utils\ConsoleUtils.cs,实际对应,Actual corresponds to
Editor\Utils\ConsoleUtils.cs,方法调用,Method call
Editor\Utils\ConsoleUtils.cs,绑定标志,Binding flag
Editor\Utils\ConsoleUtils.cs,周围调用,Calling around
Editor\Utils\ConsoleUtils.cs,分割成行,Split into lines
Editor\Utils\ConsoleUtils.cs,过滤后,After filtering
Editor\Utils\ConsoleUtils.cs,无参数,No parameter
Editor\Utils\ConsoleUtils.cs,位分析,Bit analysis
Editor\Utils\ConsoleUtils.cs,内部的,Internal
Editor\Utils\ConsoleUtils.cs,启发式,Heuristic
Editor\Utils\ConsoleUtils.cs,的实际,The actual
Editor\Utils\ConsoleUtils.cs,位组合,Bit combination
Editor\Utils\ConsoleUtils.cs,无实例,No instance
Editor\Utils\ConsoleUtils.cs,需要在,Need to be at
Editor\Utils\ConsoleUtils.cs,经常与,Often with
Editor\Utils\ConsoleUtils.cs,模式,Pattern
Editor\Utils\ConsoleUtils.cs,使用,Use
Editor\Utils\ConsoleUtils.cs,开始,Start
Editor\Utils\ConsoleUtils.cs,负责,Responsible for
Editor\Utils\ConsoleUtils.cs,方法,Method
Editor\Utils\ConsoleUtils.cs,涵盖,Cover
Editor\Utils\ConsoleUtils.cs,如果,If
Editor\Utils\ConsoleUtils.cs,属性,Attribute
Editor\Utils\ConsoleUtils.cs,根据,According to
Editor\Utils\ConsoleUtils.cs,位到,Bit to
Editor\Utils\ConsoleUtils.cs,包含,Contains
Editor\Utils\ConsoleUtils.cs,类型,Type
Editor\Utils\ConsoleUtils.cs,视为,Regard as
Editor\Utils\ConsoleUtils.cs,将为,Will be
Editor\Utils\ConsoleUtils.cs,过滤,Filter
Editor\Utils\ConsoleUtils.cs,基于,Based on
Editor\Utils\ConsoleUtils.cs,将,Will
Editor\Utils\ConsoleUtils.cs,位,Bit
Editor\Utils\ConsoleUtils.cs,为,For
Editor\Utils\CoroutineRunner.cs,将子协程的结果直接设置为主协程的结果,Directly set sub-coroutine result as main coroutine result
Editor\Utils\CoroutineRunner.cs,将子协程的结果设置为主协程的结果,Set the sub-coroutine’s result as the main coroutine result
Editor\Utils\CoroutineRunner.cs,确保在每一帧都能处理队列中的任务,Ensure that tasks in the queue are processed every frame
Editor\Utils\CoroutineRunner.cs,移除已完成的协程并调用完成回调,Remove finished coroutines and call completion callbacks
Editor\Utils\CoroutineRunner.cs,将子协程添加到协程列表,Add sub-coroutine to coroutine list
Editor\Utils\CoroutineRunner.cs,决定传递给回调的结果,Decide the result passed to the callback
Editor\Utils\CoroutineRunner.cs,设置主协程等待子协程,Set main coroutine to wait for sub-coroutine
Editor\Utils\CoroutineRunner.cs,如果上面的字段名不对,If the above field name is incorrect
Editor\Utils\CoroutineRunner.cs,检查是否返回了子协程,Check if a sub-coroutine is returned
Editor\Utils\CoroutineRunner.cs,既没有异常也没有结果,Neither exception nor result
Editor\Utils\CoroutineRunner.cs,尝试其他可能的字段名,Try other possible field names
Editor\Utils\CoroutineRunner.cs,如果正在等待网络请求,If waiting for network request
Editor\Utils\CoroutineRunner.cs,设置等待网络请求状态,Set waiting for network request state
Editor\Utils\CoroutineRunner.cs,如果不在等待子协程,If not waiting for sub-coroutine
Editor\Utils\CoroutineRunner.cs,如果正在等待子协程,If waiting for sub-coroutine
Editor\Utils\CoroutineRunner.cs,对象中获取等待时间,Get wait time from object
Editor\Utils\CoroutineRunner.cs,是否在等待网络请求,Whether waiting for network request
Editor\Utils\CoroutineRunner.cs,初始化主线程执行器,Initialize main thread executor
Editor\Utils\CoroutineRunner.cs,标记是否有有效结果,Mark if a valid result is present
Editor\Utils\CoroutineRunner.cs,如果获取失败返回,Return if retrieval fails
Editor\Utils\CoroutineRunner.cs,是否在等待子协程,Whether waiting for sub-coroutine
Editor\Utils\CoroutineRunner.cs,是否有子协程结果,Whether sub-coroutine result is present
Editor\Utils\CoroutineRunner.cs,无法获取等待时间,Unable to get wait time
Editor\Utils\CoroutineRunner.cs,保存协程的返回值,Save coroutine result
Editor\Utils\CoroutineRunner.cs,执行协程的下一步,Execute next step of coroutine
Editor\Utils\CoroutineRunner.cs,检查时间是否到了,Check if time is up
Editor\Utils\CoroutineRunner.cs,检查请求是否完成,Check if request finished
Editor\Utils\CoroutineRunner.cs,处理普通任务队列,Handle normal task queue
Editor\Utils\CoroutineRunner.cs,网络请求还未完成,Network request not yet completed
Editor\Utils\CoroutineRunner.cs,如果正在等待时间,If waiting for time
Editor\Utils\CoroutineRunner.cs,处理队列中的任务,Handle tasks in queue
Editor\Utils\CoroutineRunner.cs,找到等待时间字段,Find wait time field
Editor\Utils\CoroutineRunner.cs,用于传递给主协程,Used for passing to main coroutine
Editor\Utils\CoroutineRunner.cs,先检查子协程状态,Check sub-coroutine status first
Editor\Utils\CoroutineRunner.cs,检查是否返回了,Check if returned
Editor\Utils\CoroutineRunner.cs,是否在等待时间,Whether waiting for time
Editor\Utils\CoroutineRunner.cs,获取子协程结果,Get sub-coroutine result
Editor\Utils\CoroutineRunner.cs,子协程正常完成,Sub-coroutine completed normally
Editor\Utils\CoroutineRunner.cs,直接继续下一帧,Go to next frame directly
Editor\Utils\CoroutineRunner.cs,子协程还在运行,Sub-coroutine still running
Editor\Utils\CoroutineRunner.cs,时间和网络请求,Time and network request
Editor\Utils\CoroutineRunner.cs,用于确保代码在,Used to ensure code is in
Editor\Utils\CoroutineRunner.cs,继续执行主协程,Continue main coroutine
Editor\Utils\CoroutineRunner.cs,使用反射获取,Obtain using reflection
Editor\Utils\CoroutineRunner.cs,对于其他类型,For other types
Editor\Utils\CoroutineRunner.cs,处理协程队列,Process coroutine queue
Editor\Utils\CoroutineRunner.cs,存储异常信息,Store exception info
Editor\Utils\CoroutineRunner.cs,网络请求完成,Network request completed
Editor\Utils\CoroutineRunner.cs,还在等待时间,Still waiting for time
Editor\Utils\CoroutineRunner.cs,子协程有异常,Sub-coroutine has exception
Editor\Utils\CoroutineRunner.cs,网络请求操作,Network request operation
Editor\Utils\CoroutineRunner.cs,等待时间失败,Wait time failed
Editor\Utils\CoroutineRunner.cs,主线程执行器,Main thread executor
Editor\Utils\CoroutineRunner.cs,继续执行协程,Continue executing coroutine
Editor\Utils\CoroutineRunner.cs,协程还在运行,Coroutine still running
Editor\Utils\CoroutineRunner.cs,协程信息结构,Coroutine info structure
Editor\Utils\CoroutineRunner.cs,协程执行完毕,Coroutine completed
Editor\Utils\CoroutineRunner.cs,检查等待状态,Check waiting status
Editor\Utils\CoroutineRunner.cs,主线程上执行,Execute on main thread
Editor\Utils\CoroutineRunner.cs,设置等待状态,Set waiting status
Editor\Utils\CoroutineRunner.cs,等待时间结束,Wait time finished
Editor\Utils\CoroutineRunner.cs,停止所有协程,Stop all coroutines
Editor\Utils\CoroutineRunner.cs,等待结束时间,Wait for end time
Editor\Utils\CoroutineRunner.cs,子协程的结果,Sub-coroutine result
Editor\Utils\CoroutineRunner.cs,使用默认值,Use default value
Editor\Utils\CoroutineRunner.cs,如果有结果,If has result
Editor\Utils\CoroutineRunner.cs,使用反射从,Use reflection from
Editor\Utils\CoroutineRunner.cs,的私有字段,Private field of
Editor\Utils\CoroutineRunner.cs,子协程完成,Sub-coroutine completed
Editor\Utils\CoroutineRunner.cs,如果有异常,If has exception
Editor\Utils\CoroutineRunner.cs,启动子协程,Start sub-coroutine
Editor\Utils\CoroutineRunner.cs,协程枚举器,Coroutine enumerator
Editor\Utils\CoroutineRunner.cs,检查返回值,Check return value
Editor\Utils\CoroutineRunner.cs,同时保存到,Also save to
Editor\Utils\CoroutineRunner.cs,的等待时间,Wait time of
Editor\Utils\CoroutineRunner.cs,继续等待,Continue waiting
Editor\Utils\CoroutineRunner.cs,使用默认,Use default
Editor\Utils\CoroutineRunner.cs,获取失败,Failed to obtain
Editor\Utils\CoroutineRunner.cs,启动协程,Start coroutine
Editor\Utils\CoroutineRunner.cs,无法获取,Unable to get
Editor\Utils\CoroutineRunner.cs,完成回调,Complete callback
Editor\Utils\CoroutineRunner.cs,传播异常,Propagate exception
Editor\Utils\CoroutineRunner.cs,开始等待,Start waiting
Editor\Utils\CoroutineRunner.cs,其他类型,Other type
Editor\Utils\CoroutineRunner.cs,传递结果,Pass result
Editor\Utils\CoroutineRunner.cs,保存结果,Save result
Editor\Utils\CoroutineRunner.cs,结束时间,End time
Editor\Utils\CoroutineRunner.cs,用于调试,Used for debugging
Editor\Utils\CoroutineRunner.cs,等待时间,Wait time
Editor\Utils\CoroutineRunner.cs,传递异常,Pass exception
Editor\Utils\CoroutineRunner.cs,子协程,Sub-coroutine
Editor\Utils\CoroutineRunner.cs,使用,Use
Editor\Utils\CoroutineRunner.cs,传递,Pass
Editor\Utils\CoroutineRunner.cs,支持,Support
Editor\Utils\CoroutineRunner.cs,实例,Instance
Editor\Utils\CoroutineRunner.cs,获取,Get
Editor\Utils\CoroutineRunner.cs,秒,Seconds
Editor\Utils\CoroutineRunner.cs,如,Such as
Editor\Utils\GameObjectUtils.cs,支持场景中有多个重名对象的路径查找,Support path search for multiple objects with same name in scene
Editor\Utils\GameObjectUtils.cs,获取当前活动场景中的所有根对象,Get all root objects in current active scene
Editor\Utils\GameObjectUtils.cs,递归记录所有层级的子物体信息,Recursively record all level child object info
Editor\Utils\GameObjectUtils.cs,首先找到所有名字匹配的根对象,Find all root objects with matching names first
Editor\Utils\GameObjectUtils.cs,创建操作能正确识别父子关系,Creation operation can correctly identify parent-child relationship
Editor\Utils\GameObjectUtils.cs,每一层都可能有多个同名对象,Every layer may have multiple objects with the same name
Editor\Utils\GameObjectUtils.cs,检查是否包含组件类型指定符,Check whether contains component type specifier
Editor\Utils\GameObjectUtils.cs,用于创建对象前选中父对象,Used to select parent before creating object
Editor\Utils\GameObjectUtils.cs,路径在当前场景中查找对象,Path searches objects in current scene
Editor\Utils\GameObjectUtils.cs,返回最后一个类型匹配的,Return last type matching
Editor\Utils\GameObjectUtils.cs,处理材质属性的特殊情况,Handle special cases of material properties
Editor\Utils\GameObjectUtils.cs,新创建的对象通常在后面,Newly created objects usually at the end
Editor\Utils\GameObjectUtils.cs,递归处理子对象的子对象,Recursively handle children of child objects
Editor\Utils\GameObjectUtils.cs,递归查找所有可能的路径,Recursively find all possible paths
Editor\Utils\GameObjectUtils.cs,设置组件属性的内部方法,Internal method to set component property
Editor\Utils\GameObjectUtils.cs,最终所有匹配的对象都在,Eventually, all matched objects are in
Editor\Utils\GameObjectUtils.cs,优先使用指定的组件类型,Prefer specified component type
Editor\Utils\GameObjectUtils.cs,遍历到最后一个属性之前,Traverse before last property
Editor\Utils\GameObjectUtils.cs,包含物理组件冲突检查,Contain physical component conflict check
Editor\Utils\GameObjectUtils.cs,用于父对象查找等场景,Used for parent lookup and similar cases
Editor\Utils\GameObjectUtils.cs,检查是否指定了父对象,Check if parent is specified
Editor\Utils\GameObjectUtils.cs,如果指定了父对象参数,If parent parameter specified
Editor\Utils\GameObjectUtils.cs,如果指定了组件类型名,If component type specified
Editor\Utils\GameObjectUtils.cs,只会返回第一个匹配的,Only returns first matched
Editor\Utils\GameObjectUtils.cs,检查是否是嵌套结构,Check whether is nested structure
Editor\Utils\GameObjectUtils.cs,递归遍历所有子对象,Recursively traverse all child objects
Editor\Utils\GameObjectUtils.cs,遍历所有直接子对象,Traverse all direct child objects
Editor\Utils\GameObjectUtils.cs,递归收集子对象信息,Recursively collect child object info
Editor\Utils\GameObjectUtils.cs,记录最后匹配的组件,Record last matching component
Editor\Utils\GameObjectUtils.cs,和搜索方法查找多个,Find multiple with search methods
Editor\Utils\GameObjectUtils.cs,添加组件的内部方法,Internal method to add component
Editor\Utils\GameObjectUtils.cs,和搜索方法查找单个,Find single with search methods
Editor\Utils\GameObjectUtils.cs,返回最后匹配的对象,Return last matched object
Editor\Utils\GameObjectUtils.cs,操作的通用工具类,Common utility class for operations
Editor\Utils\GameObjectUtils.cs,根据类型名称查找,Find by type name
Editor\Utils\GameObjectUtils.cs,应用组件属性设置,Apply component property settings
Editor\Utils\GameObjectUtils.cs,获取场景中的所有,Get all in scene
Editor\Utils\GameObjectUtils.cs,直接使用属性对象,Directly use property object
Editor\Utils\GameObjectUtils.cs,应用父对象设置,Apply parent object settings
Editor\Utils\GameObjectUtils.cs,路径和组件类型,Path and component type
Editor\Utils\GameObjectUtils.cs,格式的紧凑表示,Compact representation of format
Editor\Utils\GameObjectUtils.cs,添加父对象信息,Add parent object info
Editor\Utils\GameObjectUtils.cs,需逐层递归查找,Need to recursively search each step
Editor\Utils\GameObjectUtils.cs,如果找到父对象,If parent object found
Editor\Utils\GameObjectUtils.cs,记录最后匹配的,Record last matched
Editor\Utils\GameObjectUtils.cs,预先选中父对象,Select parent object in advance
Editor\Utils\GameObjectUtils.cs,添加子对象信息,Add child object info
Editor\Utils\GameObjectUtils.cs,搜索相关程序集,Search related assemblies
Editor\Utils\GameObjectUtils.cs,创建子对象列表,Create child object list
Editor\Utils\GameObjectUtils.cs,没有指定父对象,No parent specified
Editor\Utils\GameObjectUtils.cs,的完整层级路径,Full hierarchy path of
Editor\Utils\GameObjectUtils.cs,的可序列化表示,Serializable representation of
Editor\Utils\GameObjectUtils.cs,设置最终属性,Set final property
Editor\Utils\GameObjectUtils.cs,应用变换设置,Apply transform settings
Editor\Utils\GameObjectUtils.cs,未找到则返回,Return if not found
Editor\Utils\GameObjectUtils.cs,支持两种格式,Support two formats
Editor\Utils\GameObjectUtils.cs,尝试直接转换,Try direct conversion
Editor\Utils\GameObjectUtils.cs,处理普通属性,Handle normal property
Editor\Utils\GameObjectUtils.cs,尝试获取组件,Try to get component
Editor\Utils\GameObjectUtils.cs,应用标签设置,Apply tag settings
Editor\Utils\GameObjectUtils.cs,如果有子对象,If has child object
Editor\Utils\GameObjectUtils.cs,设置嵌套属性,Set nested property
Editor\Utils\GameObjectUtils.cs,设置组件属性,Set component property
Editor\Utils\GameObjectUtils.cs,格式数据表示,Format data representation
Editor\Utils\GameObjectUtils.cs,设置激活状态,Set active state
Editor\Utils\GameObjectUtils.cs,组件命名空间,Component namespace
Editor\Utils\GameObjectUtils.cs,处理嵌套属性,Handle nested property
Editor\Utils\GameObjectUtils.cs,应用名称设置,Apply name settings
Editor\Utils\GameObjectUtils.cs,查找组件类型,Find component type
Editor\Utils\GameObjectUtils.cs,应用组件添加,Apply component addition
Editor\Utils\GameObjectUtils.cs,不需要预选中,Preselect not needed
Editor\Utils\GameObjectUtils.cs,应用层设置,Apply layer settings
Editor\Utils\GameObjectUtils.cs,找到的对象,Found object
Editor\Utils\GameObjectUtils.cs,为指定类型,For specified type
Editor\Utils\GameObjectUtils.cs,设置父对象,Set parent object
Editor\Utils\GameObjectUtils.cs,这里不能用,Cannot be used here
Editor\Utils\GameObjectUtils.cs,尝试常见的,Try common
Editor\Utils\GameObjectUtils.cs,如果通过,If via
Editor\Utils\GameObjectUtils.cs,优先使用,Prefer using
Editor\Utils\GameObjectUtils.cs,尝试使用,Try using
Editor\Utils\GameObjectUtils.cs,逐层查找,Find step by step
Editor\Utils\GameObjectUtils.cs,分割路径,Split path
Editor\Utils\GameObjectUtils.cs,添加组件,Add component
Editor\Utils\GameObjectUtils.cs,枚举类型,Enum type
Editor\Utils\GameObjectUtils.cs,应用通用,Apply general
Editor\Utils\GameObjectUtils.cs,查找类型,Find type
Editor\Utils\GameObjectUtils.cs,直接返回,Return directly
Editor\Utils\GameObjectUtils.cs,处理单个,Handle single
Editor\Utils\GameObjectUtils.cs,设置标签,Set tag
Editor\Utils\GameObjectUtils.cs,泛型版本,Generic version
Editor\Utils\GameObjectUtils.cs,设置变换,Set transform
Editor\Utils\GameObjectUtils.cs,设置名称,Set name
Editor\Utils\GameObjectUtils.cs,简单查找,Simple search
Editor\Utils\GameObjectUtils.cs,尝试按,Try by
Editor\Utils\GameObjectUtils.cs,只指定,Only specify
Editor\Utils\GameObjectUtils.cs,未找到,Not found
Editor\Utils\GameObjectUtils.cs,选中它,Select it
Editor\Utils\GameObjectUtils.cs,设置层,Set layer
Editor\Utils\GameObjectUtils.cs,的情况,The case of
Editor\Utils\GameObjectUtils.cs,使用,Use
Editor\Utils\GameObjectUtils.cs,转换,Convert
Editor\Utils\GameObjectUtils.cs,节省,Save
Editor\Utils\GameObjectUtils.cs,路径,Path
Editor\Utils\GameObjectUtils.cs,如果,If
Editor\Utils\GameObjectUtils.cs,通过,Through
Editor\Utils\GameObjectUtils.cs,创建,Create
Editor\Utils\GameObjectUtils.cs,设置,Set
Editor\Utils\GameObjectUtils.cs,返回,Return
Editor\Utils\GameObjectUtils.cs,获取,Get
Editor\Utils\GameObjectUtils.cs,根据,According to
Editor\Utils\GameObjectUtils.cs,解析,Parse
Editor\Utils\GameObjectUtils.cs,处理,Handle
Editor\Utils\GameObjectUtils.cs,指定,Specify
Editor\Utils\GameObjectUtils.cs,因为,Because
Editor\Utils\GameObjectUtils.cs,确保,Ensure
Editor\Utils\GameObjectUtils.cs,类型,Type
Editor\Utils\GameObjectUtils.cs,查找,Find
Editor\Utils\GameObjectUtils.cs,的,Of
Editor\Utils\GameObjectUtils.cs,是,Is
Editor\Utils\GameObjectUtils.cs,或,Or
Editor\Utils\GameObjectUtils.cs,如,Such as
Editor\Utils\GameObjectUtils.cs,等,Etc
Editor\Utils\GameObjectUtils.cs,和,And
Editor\Utils\GameObjectUtils.cs,里,In
Editor\Utils\GameObjectUtils.cs,为,For
Editor\Utils\MenuUtils.cs,执行失败时自动返回父级菜单的所有可用菜单列表,Automatically return all available parent menu list on execution failure
Editor\Utils\MenuUtils.cs,获取指定根路径下的所有菜单项,Get all menu items under specified root path
Editor\Utils\MenuUtils.cs,帮助用户找到正确的菜单路径,Help user find correct menu path
Editor\Utils\MenuUtils.cs,提供详细的错误信息和建议,Provide detailed error info and suggestions
Editor\Utils\MenuUtils.cs,获取同级菜单列表作为建议,Get sibling menu list as suggestion
Editor\Utils\MenuUtils.cs,不同版本的菜单路径差异,Menu path difference of different versions
Editor\Utils\MenuUtils.cs,年及以后的版本肯定需要,Year and later versions definitely need
Editor\Utils\MenuUtils.cs,年版本需要检查次版本号,Year version needs to check subversion number
Editor\Utils\MenuUtils.cs,不同版本可能有不同签名,Different versions may have different signatures
Editor\Utils\MenuUtils.cs,记录详细日志以帮助调试,Log details to help debugging
Editor\Utils\MenuUtils.cs,处理获取菜单列表命令,Handle get menu list command
Editor\Utils\MenuUtils.cs,尝试多种方式获取路径,Try multiple ways to get path
Editor\Utils\MenuUtils.cs,验证菜单项是否存在,Validate if menu item exists
Editor\Utils\MenuUtils.cs,构建错误消息和数据,Build error message and data
Editor\Utils\MenuUtils.cs,处理菜单执行命令,Handle menu execute command
Editor\Utils\MenuUtils.cs,直接转换为字符串,Convert directly to string
Editor\Utils\MenuUtils.cs,详细记录异常信息,Log exception details
Editor\Utils\MenuUtils.cs,控件菜单路径映射,Widget menu path mapping
Editor\Utils\MenuUtils.cs,根据参数数量调用,Call according to parameter count
Editor\Utils\MenuUtils.cs,及更早版本不需要,And earlier versions not needed
Editor\Utils\MenuUtils.cs,尝试过的所有路径,All tried paths
Editor\Utils\MenuUtils.cs,获取父级菜单路径,Get parent menu path
Editor\Utils\MenuUtils.cs,失败的菜单路径,Failed menu path
Editor\Utils\MenuUtils.cs,标准化菜单键名,Normalize menu key name
Editor\Utils\MenuUtils.cs,按版本选择路径,Choose path by version
Editor\Utils\MenuUtils.cs,尝试执行菜单项,Try execute menu item
Editor\Utils\MenuUtils.cs,如果是已知控件,If is known widget
Editor\Utils\MenuUtils.cs,获取可能的路径,Get possible path
Editor\Utils\MenuUtils.cs,没有变化的控件,Unchanged widget
Editor\Utils\MenuUtils.cs,内部的菜单系统,Internal menu system
Editor\Utils\MenuUtils.cs,自动处理兼容性,Automatic compatibility handling
Editor\Utils\MenuUtils.cs,不实际创建对象,Do not actually create object
Editor\Utils\MenuUtils.cs,是否包含子菜单,Whether contains submenu
Editor\Utils\MenuUtils.cs,使用反射访问,Access via reflection
Editor\Utils\MenuUtils.cs,捕获执行结果,Capture execution result
Editor\Utils\MenuUtils.cs,返回数据结构,Return data structure
Editor\Utils\MenuUtils.cs,尝试执行菜单,Try execute menu
Editor\Utils\MenuUtils.cs,处理返回结果,Handle return result
Editor\Utils\MenuUtils.cs,可用菜单数量,Available menu count
Editor\Utils\MenuUtils.cs,依次尝试执行,Try execute in sequence
Editor\Utils\MenuUtils.cs,假设是新版本,Assume new version
Editor\Utils\MenuUtils.cs,原始路径优先,Original path first
Editor\Utils\MenuUtils.cs,菜单是否存在,Whether menu exists
Editor\Utils\MenuUtils.cs,父级菜单路径,Parent menu path
Editor\Utils\MenuUtils.cs,解析主版本号,Parse major version
Editor\Utils\MenuUtils.cs,可用菜单列表,Available menu list
Editor\Utils\MenuUtils.cs,路径的控件,Widget of path
Editor\Utils\MenuUtils.cs,及以后需要,And later required
Editor\Utils\MenuUtils.cs,如果没找到,If not found
Editor\Utils\MenuUtils.cs,检查是否为,Check whether is
Editor\Utils\MenuUtils.cs,过滤子菜单,Filter submenu
Editor\Utils\MenuUtils.cs,尝试签名,Try signatures
Editor\Utils\MenuUtils.cs,功能增强,Function enhancement
Editor\Utils\MenuUtils.cs,执行失败,Execution failed
Editor\Utils\MenuUtils.cs,使用反射,Use reflection
Editor\Utils\MenuUtils.cs,尝试获取,Try to get
Editor\Utils\MenuUtils.cs,路径优先,Path first
Editor\Utils\MenuUtils.cs,菜单路径,Menu path
Editor\Utils\MenuUtils.cs,菜单列表,Menu list
Editor\Utils\MenuUtils.cs,自动处理,Automatic handling
Editor\Utils\MenuUtils.cs,安全起见,For safety
Editor\Utils\MenuUtils.cs,备用路径,Backup path
Editor\Utils\MenuUtils.cs,根路径,Root path
Editor\Utils\MenuUtils.cs,失败时,When failed
Editor\Utils\MenuUtils.cs,支持,Support
Editor\Utils\MenuUtils.cs,通过,Through
Editor\Utils\MenuUtils.cs,字段,Field
Editor\Utils\MenuUtils.cs,路径,Path
Editor\Utils\MenuUtils.cs,属性,Property
Editor\Utils\MenuUtils.cs,方式,Method
Editor\Utils\MenuUtils.cs,版本,Version
Editor\Utils\MenuUtils.cs,需要,Need
Editor\Utils\MenuUtils.cs,方法,Function
Editor\Utils\MenuUtils.cs,如,Such as
Editor\Utils\SimpleJson.cs,特殊处理匿名类型和具有属性的对象,Special handling of anonymous types and objects with properties
Editor\Utils\SimpleJson.cs,只处理可读且不是索引器的属性,Only handle readable and non-indexer properties
Editor\Utils\SimpleJson.cs,如果是字符串且目标类型是,If is string and target type is
Editor\Utils\SimpleJson.cs,返回可枚举的键值对集合,Return enumerable key-value pairs collection
Editor\Utils\SimpleJson.cs,支持从基本类型转换为,Support conversion from basic types to
Editor\Utils\SimpleJson.cs,检查是否包含指定的键,Check whether contains specified key
Editor\Utils\SimpleJson.cs,转换为指定类型的对象,Convert to specified type object
Editor\Utils\SimpleJson.cs,如果无法转换则返回,Return if unable to convert
Editor\Utils\SimpleJson.cs,带有自动换行和缩进,With auto wrap and indentation
Editor\Utils\SimpleJson.cs,默认转换为字符串,Default convert to string
Editor\Utils\SimpleJson.cs,转换为字符串列表,Convert to string list
Editor\Utils\SimpleJson.cs,获取双精度浮点值,Get double value
Editor\Utils\SimpleJson.cs,尝试判断实际类型,Try to determine actual type
Editor\Utils\SimpleJson.cs,隐式转换操作符,Implicit conversion operator
Editor\Utils\SimpleJson.cs,的内部递归方法,Internal recursive method of
Editor\Utils\SimpleJson.cs,不支持直接设置,Direct set not supported
Editor\Utils\SimpleJson.cs,无法访问属性,Unable to access property
Editor\Utils\SimpleJson.cs,当前缩进层级,Current indent level
Editor\Utils\SimpleJson.cs,安全地转换为,Safely convert to
Editor\Utils\SimpleJson.cs,则返回默认值,Return default if so
Editor\Utils\SimpleJson.cs,转换后的对象,Converted object
Editor\Utils\SimpleJson.cs,无法访问字段,Unable to access field
Editor\Utils\SimpleJson.cs,尝试加载资源,Try to load resource
Editor\Utils\SimpleJson.cs,格式化后的,Formatted
Editor\Utils\SimpleJson.cs,如果节点为,If node is
Editor\Utils\SimpleJson.cs,兼容旧代码,Compatible with legacy code
Editor\Utils\SimpleJson.cs,获取布尔值,Get boolean value
Editor\Utils\SimpleJson.cs,尝试获取值,Try to get value
Editor\Utils\SimpleJson.cs,的深度副本,Deep copy of
Editor\Utils\SimpleJson.cs,同时实现了,Also implements
Editor\Utils\SimpleJson.cs,检查是否为,Check whether is
Editor\Utils\SimpleJson.cs,转换为类型,Convert to type
Editor\Utils\SimpleJson.cs,从对象创建,Create from object
Editor\Utils\SimpleJson.cs,格式化输出,Formatted output
Editor\Utils\SimpleJson.cs,获取所有键,Get all keys
Editor\Utils\SimpleJson.cs,获取整数值,Get integer value
Editor\Utils\SimpleJson.cs,获取浮点值,Get float value
Editor\Utils\SimpleJson.cs,方便阅读,Easy to read
Editor\Utils\SimpleJson.cs,隐式转换,Implicit conversion
Editor\Utils\SimpleJson.cs,尝试获取,Try to get
Editor\Utils\SimpleJson.cs,便于访问,Easy for access
Editor\Utils\SimpleJson.cs,目标类型,Target type
Editor\Utils\SimpleJson.cs,处理属性,Handle property
Editor\Utils\SimpleJson.cs,类型枚举,Type enum
Editor\Utils\SimpleJson.cs,处理字段,Handle field
Editor\Utils\SimpleJson.cs,缩进字符,Indent character
Editor\Utils\SimpleJson.cs,个空格,Spaces
Editor\Utils\SimpleJson.cs,的类型,Type of
Editor\Utils\SimpleJson.cs,转换为,Convert to
Editor\Utils\SimpleJson.cs,默认为,Default is
Editor\Utils\SimpleJson.cs,的方法,Method of
Editor\Utils\SimpleJson.cs,先检查,Check first
Editor\Utils\SimpleJson.cs,无法将,Unable to cast
Editor\Utils\SimpleJson.cs,的子类,Subclass of
Editor\Utils\SimpleJson.cs,字符串,String
Editor\Utils\SimpleJson.cs,因为,Because
Editor\Utils\SimpleJson.cs,创建,Create
Editor\Utils\SimpleJson.cs,兼容,Compatible
Editor\Utils\SimpleJson.cs,用于,Used for
Editor\Utils\SimpleJson.cs,属性,Property
Editor\Utils\SimpleJson.cs,类似,Similar
Editor\Utils\SimpleJson.cs,获取,Get
Editor\Utils\SimpleJson.cs,别名,Alias
Editor\Utils\SimpleJson.cs,方法,Method
Editor\Utils\SimpleJson.cs,循环,Loop
Editor\Utils\SimpleJson.cs,的,Of
Editor\Utils\SimpleJson.cs,将,To
Editor\Utils\SimpleJson.cs,值,Value
Editor\Utils\SimpleJson.cs,和,And
