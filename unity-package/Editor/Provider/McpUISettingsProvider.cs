using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using UnityEditorInternal;
using UnityMcp.Models;

namespace UnityMcp.Gui
{
    /// <summary>
    /// MCP UISettings provider，Used inUnityOfProjectSettingsDisplay in windowUIRelated settings
    /// </summary>
    [System.Serializable]
    public class McpUISettingsProvider
    {
        private static Vector2 scrollPosition;
        private static ReorderableList buildStepsList;
        private static ReorderableList preferredComponentsList;
        private static UIType currentUIType = UIType.UGUI;


        [SettingsProvider]
        public static SettingsProvider CreateMcpUISettingsProvider()
        {
            var provider = new SettingsProvider("Project/MCP/UI-Prompts", SettingsScope.Project)
            {
                label = "UI-Prompts",
                guiHandler = (searchContext) =>
                {
                    DrawMcpUISettings();
                },
                keywords = new[] { "UI", "UI", "Generation", "Rules", "Figma", "Canvas", "Button", "Text", "Image" }
            };

            return provider;
        }

        private static void DrawMcpUISettings()
        {
            var settings = McpSettings.Instance;
            if (settings.uiSettings == null)
                settings.uiSettings = new McpUISettings();

            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition);

            // UIIntroduction
            EditorGUILayout.LabelField("UI Generate rule configuration", EditorStyles.boldLabel);
            EditorGUILayout.HelpBox(
                "ConfigurationUnity UISystem's auto-generated rules and preferences。" +
                "These settings will affect viaMCPGenerated by toolUIDefault behavior and structure of component。",
                MessageType.Info);

            EditorGUILayout.Space(10);

            // UIType selector
            EditorGUILayout.LabelField("UIType selection", EditorStyles.boldLabel);
            EditorGUI.BeginChangeCheck();
            var newUIType = (UIType)EditorGUILayout.EnumPopup("CurrentUIType", settings.uiSettings.selectedUIType);
            if (EditorGUI.EndChangeCheck())
            {
                // Save current data
                settings.uiSettings.SerializeUITypeData();

                // SwitchUIType
                settings.uiSettings.selectedUIType = newUIType;
                currentUIType = newUIType;

                // Reset list to refresh display
                buildStepsList = null;
                preferredComponentsList = null;

                settings.SaveSettings();
            }

            EditorGUILayout.HelpBox($"Current selection: {settings.uiSettings.selectedUIType} - EachUIEach type has its own build steps and environment configuration", MessageType.Info);
            EditorGUILayout.Space(10);

            // InitializationReorderableList
            if (buildStepsList == null)
            {
                buildStepsList = new ReorderableList(settings.uiSettings.ui_build_steps, typeof(string), true, true, true, true);
                buildStepsList.drawHeaderCallback = (Rect rect) =>
                {
                    EditorGUI.LabelField(rect, "");

                    // Add write button
                    Rect writeButtonRect = new Rect(rect.width - 125, rect.y, 60, rect.height);
                    if (GUI.Button(writeButtonRect, "Write"))
                    {
                        if (EditorUtility.DisplayDialog("Confirm writing", "Confirm to make currentUIWrite build steps into code as default values?？", "Confirm", "Cancel"))
                        {
                            WriteDefaultBuildStepsToCode(settings.uiSettings.ui_build_steps);
                        }
                    }

                    // Add reset button
                    Rect resetButtonRect = new Rect(rect.width - 60, rect.y, 60, rect.height);
                    if (GUI.Button(resetButtonRect, "Reset"))
                    {
                        if (EditorUtility.DisplayDialog("Confirm reset", $"Confirm to reset{settings.uiSettings.selectedUIType}OfUIAre build steps default value?？", "Confirm", "Cancel"))
                        {
                            settings.uiSettings.ui_build_steps = McpUISettings.GetDefaultBuildSteps(settings.uiSettings.selectedUIType);
                            settings.SaveSettings();
                        }
                    }
                };
                buildStepsList.drawElementCallback = (Rect rect, int index, bool isActive, bool isFocused) =>
                {
                    settings.uiSettings.ui_build_steps[index] = EditorGUI.TextField(rect, settings.uiSettings.ui_build_steps[index]);
                };
                buildStepsList.onAddCallback = (ReorderableList list) =>
                {
                    settings.uiSettings.ui_build_steps.Add("New step？");
                };
            }

            if (preferredComponentsList == null)
            {
                preferredComponentsList = new ReorderableList(settings.uiSettings.ui_build_enviroments, typeof(string), true, true, true, true);
                preferredComponentsList.drawHeaderCallback = (Rect rect) =>
                {
                    EditorGUI.LabelField(rect, "");

                    // Add write button
                    Rect writeButtonRect = new Rect(rect.width - 125, rect.y, 60, rect.height);
                    if (GUI.Button(writeButtonRect, "Write"))
                    {
                        if (EditorUtility.DisplayDialog("Confirm writing", "Confirm to make currentUIWrite environment description into code as default value?？", "Confirm", "Cancel"))
                        {
                            WriteDefaultBuildEnvironmentsToCode(settings.uiSettings.ui_build_enviroments);
                        }
                    }

                    // Add reset button
                    Rect resetButtonRect = new Rect(rect.width - 60, rect.y, 60, rect.height);
                    if (GUI.Button(resetButtonRect, "Reset"))
                    {
                        if (EditorUtility.DisplayDialog("Confirm reset", $"Confirm to reset{settings.uiSettings.selectedUIType}OfUIIs environment description default value?？", "Confirm", "Cancel"))
                        {
                            settings.uiSettings.ui_build_enviroments = McpUISettings.GetDefaultBuildEnvironments(settings.uiSettings.selectedUIType);
                            settings.SaveSettings();
                        }
                    }
                };
                preferredComponentsList.drawElementCallback = (Rect rect, int index, bool isActive, bool isFocused) =>
                {
                    if (index > settings.uiSettings.ui_build_enviroments.Count)
                    {
                        settings.uiSettings.ui_build_enviroments.Add("");
                    }
                    settings.uiSettings.ui_build_enviroments[index] = EditorGUI.TextField(rect, settings.uiSettings.ui_build_enviroments[index]);
                };
                preferredComponentsList.onAddCallback = (ReorderableList list) =>
                {
                    settings.uiSettings.ui_build_enviroments.Add("");
                };
            }

            // DrawUIBuild steps list
            EditorGUILayout.LabelField($"UIBuild step ({settings.uiSettings.selectedUIType})", EditorStyles.boldLabel);
            EditorGUILayout.HelpBox($"Definition{settings.uiSettings.selectedUIType}TypeUIGenerated step flow，Execute in order。", MessageType.Info);
            buildStepsList.DoLayoutList();

            EditorGUILayout.Space(10);

            // Draw preference component list
            EditorGUILayout.LabelField($"UIEnvironment description ({settings.uiSettings.selectedUIType})", EditorStyles.boldLabel);
            EditorGUILayout.HelpBox($"Configuration{settings.uiSettings.selectedUIType}TypeUIEnvironment and constraints during generation。", MessageType.Info);
            preferredComponentsList.DoLayoutList();

            EditorGUILayout.EndScrollView();

            // Auto save
            if (GUI.changed)
            {
                // SerializationUIType data
                settings.uiSettings.SerializeUITypeData();
                settings.SaveSettings();
            }
        }

        /// <summary>
        /// Make currentUIWrite build steps to code
        /// </summary>
        private static void WriteDefaultBuildStepsToCode(List<string> buildSteps)
        {
            try
            {
                string filePath = System.IO.Path.Combine(Application.dataPath, "../Packages/unity-mcp/Editor/Provider/McpUISettingsProvider.cs");
                string fileContent = System.IO.File.ReadAllText(filePath);

                // Get currentUIType
                var settings = McpSettings.Instance;
                var currentType = settings?.uiSettings?.selectedUIType ?? UIType.UGUI;

                // Build newGetDefaultBuildStepsMethod code
                var newMethodCode = GenerateGetDefaultBuildStepsCode(buildSteps, currentType);

                // Find method start position
                var methodStart = "public static List<string> GetDefaultBuildSteps()";
                int startIndex = fileContent.IndexOf(methodStart);
                if (startIndex == -1)
                {
                    throw new System.Exception("Not foundGetDefaultBuildStepsMethod");
                }

                // Find start brace of method body
                int braceStart = fileContent.IndexOf('{', startIndex);
                if (braceStart == -1)
                {
                    throw new System.Exception("Could not find start brace of method");
                }

                // Count braces to find method end position
                int braceCount = 0;
                int braceEnd = braceStart;
                for (int i = braceStart; i < fileContent.Length; i++)
                {
                    if (fileContent[i] == '{') braceCount++;
                    else if (fileContent[i] == '}') braceCount--;

                    if (braceCount == 0)
                    {
                        braceEnd = i;
                        break;
                    }
                }

                // Replace entire method
                string beforeMethod = fileContent.Substring(0, startIndex);
                string afterMethod = fileContent.Substring(braceEnd + 1);
                fileContent = beforeMethod + newMethodCode + afterMethod;

                System.IO.File.WriteAllText(filePath, fileContent);
                AssetDatabase.Refresh();

                EditorUtility.DisplayDialog("Write successful", "UIBuild steps successfully written to code！", "Confirm");
            }
            catch (System.Exception ex)
            {
                EditorUtility.DisplayDialog("Write failed", $"Error during writing process：{ex.Message}", "Confirm");
                Debug.LogError($"WriteUIBuild step failure: {ex}");
            }
        }

        /// <summary>
        /// Make currentUIWrite environment description to code
        /// </summary>
        private static void WriteDefaultBuildEnvironmentsToCode(List<string> environments)
        {
            try
            {
                string filePath = System.IO.Path.Combine(Application.dataPath, "../Packages/unity-mcp/Editor/Provider/McpUISettingsProvider.cs");
                string fileContent = System.IO.File.ReadAllText(filePath);

                // Get currentUIType
                var settings = McpSettings.Instance;
                var currentType = settings?.uiSettings?.selectedUIType ?? UIType.UGUI;

                // Build newGetDefaultBuildEnvironmentsMethod code
                var newMethodCode = GenerateGetDefaultBuildEnvironmentsCode(environments, currentType);

                // Find method start position
                var methodStart = "public static List<string> GetDefaultBuildEnvironments()";
                int startIndex = fileContent.IndexOf(methodStart);
                if (startIndex == -1)
                {
                    throw new System.Exception("Not foundGetDefaultBuildEnvironmentsMethod");
                }

                // Find start brace of method body
                int braceStart = fileContent.IndexOf('{', startIndex);
                if (braceStart == -1)
                {
                    throw new System.Exception("Could not find start brace of method");
                }

                // Count braces to find method end position
                int braceCount = 0;
                int braceEnd = braceStart;
                for (int i = braceStart; i < fileContent.Length; i++)
                {
                    if (fileContent[i] == '{') braceCount++;
                    else if (fileContent[i] == '}') braceCount--;

                    if (braceCount == 0)
                    {
                        braceEnd = i;
                        break;
                    }
                }

                // Replace entire method
                string beforeMethod = fileContent.Substring(0, startIndex);
                string afterMethod = fileContent.Substring(braceEnd + 1);
                fileContent = beforeMethod + newMethodCode + afterMethod;

                System.IO.File.WriteAllText(filePath, fileContent);
                AssetDatabase.Refresh();

                EditorUtility.DisplayDialog("Write successful", "UIEnvironment description successfully written to code！", "Confirm");
            }
            catch (System.Exception ex)
            {
                EditorUtility.DisplayDialog("Write failed", $"Error during writing process：{ex.Message}", "Confirm");
                Debug.LogError($"WriteUIEnvironment description failure: {ex}");
            }
        }

        /// <summary>
        /// GenerateGetDefaultBuildStepsMethod code
        /// </summary>
        private static string GenerateGetDefaultBuildStepsCode(List<string> buildSteps, UIType uiType)
        {
            var code = new System.Text.StringBuilder();
            code.AppendLine($"// Auto-generated default build steps - {uiType} ({System.DateTime.Now:yyyy-MM-dd HH:mm:ss})");
            code.AppendLine("        public static List<string> GetDefaultBuildSteps()");
            code.AppendLine("        {");
            code.AppendLine("            return new List<string>");
            code.AppendLine("            {");

            for (int i = 0; i < buildSteps.Count; i++)
            {
                var step = buildSteps[i].Replace("\"", "\\\""); // Escape double quotes
                var comma = i < buildSteps.Count - 1 ? "," : "";
                code.AppendLine($"                \"{step}\"{comma}");
            }

            code.AppendLine("            };");
            code.Append("        }");

            return code.ToString();
        }

        /// <summary>
        /// GenerateGetDefaultBuildEnvironmentsMethod code
        /// </summary>
        private static string GenerateGetDefaultBuildEnvironmentsCode(List<string> environments, UIType uiType)
        {
            var code = new System.Text.StringBuilder();
            code.AppendLine($"// Auto-generated default environment description - {uiType} ({System.DateTime.Now:yyyy-MM-dd HH:mm:ss})");
            code.AppendLine("        public static List<string> GetDefaultBuildEnvironments()");
            code.AppendLine("        {");
            code.AppendLine("            return new List<string>");
            code.AppendLine("            {");

            for (int i = 0; i < environments.Count; i++)
            {
                var env = environments[i].Replace("\"", "\\\""); // Escape double quotes
                var comma = i < environments.Count - 1 ? "," : "";
                code.AppendLine($"                \"{env}\"{comma}");
            }

            code.AppendLine("            };");
            code.Append("        }");

            return code.ToString();
        }
    }
}
