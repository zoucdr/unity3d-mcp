# Unity MCP Tools Documentation

This file contains the Model Context Protocol (MCP) tool definitions for Unity MCP Bridge.

## Tool: python_runner

**Name**: python_runner
**Category**: 开发工具 (Development Tools)

**Description**: 
A comprehensive Python script execution tool that provides secure Python code execution, validation, and package management within Unity Editor. This tool supports UTF-8 encoding for Chinese characters and includes automatic encoding fixes.

### Actions

#### 1. Execute Python Code (`execute`)

**Purpose**: Execute Python scripts with full UTF-8 support and automatic encoding handling.

**Parameters**:
- `action`: "execute" (required)
- `python_code`: Python script code content (required)
- `script_name`: Python script name, default is "script.py" (optional)
- `python_path`: Path to Python interpreter, default is "python" (optional)  
- `working_directory`: Working directory for script execution (optional)
- `timeout`: Execution timeout in seconds, default 30 seconds (optional)
- `cleanup`: Whether to clean up temporary files after execution, default true (optional)
- `virtual_env`: Path to virtual environment to use (optional)

**Features**:
- Automatic UTF-8 encoding setup for Chinese character support
- Base64 encoding fallback for complex character handling
- Process timeout protection
- Temporary file management with automatic cleanup
- Environment variable configuration for UTF-8 support
- Standard output and error capture with encoding fixes

**Example Usage**:
```json
{
  "func": "python_runner",
  "args": {
    "action": "execute",
    "python_code": "print('Hello, 世界!')\nimport math\nprint(f'π = {math.pi:.4f}')",
    "script_name": "hello_world.py",
    "timeout": 30
  }
}
```

#### 2. Validate Python Code (`validate`)

**Purpose**: Validate Python script syntax without execution.

**Parameters**:
- `action`: "validate" (required)
- `python_code`: Python script code content to validate (required)
- `script_name`: Python script name, default is "script.py" (optional)
- `python_path`: Path to Python interpreter, default is "python" (optional)
- `virtual_env`: Path to virtual environment to use (optional)

**Features**:
- Syntax validation using Python compiler
- Error reporting with line numbers and descriptions
- No code execution for security
- UTF-8 file encoding support

**Example Usage**:
```json
{
  "func": "python_runner", 
  "args": {
    "action": "validate",
    "python_code": "def hello():\n    print('Hello')\n    return 'success'",
    "script_name": "validation_test.py"
  }
}
```

#### 3. Install Python Packages (`install_package`)

**Purpose**: Install Python packages using pip with optional virtual environment support.

**Parameters**:
- `action`: "install_package" (required)
- `packages`: Python packages to install (comma-separated string or JSON array) (optional)
- `requirements_file`: Path to requirements.txt file (optional)
- `python_path`: Path to Python interpreter, default is "python" (optional)
- `virtual_env`: Path to virtual environment to use (optional)
- `timeout`: Installation timeout in seconds, default 60 seconds (optional)

**Note**: Either `packages` or `requirements_file` parameter is required.

**Features**:
- Individual package installation
- Requirements file support
- Virtual environment compatibility
- Installation progress monitoring
- Timeout protection for long installations

**Example Usage**:
```json
{
  "func": "python_runner",
  "args": {
    "action": "install_package", 
    "packages": ["requests", "numpy", "pandas"],
    "timeout": 120
  }
}
```

Or with requirements file:
```json
{
  "func": "python_runner",
  "args": {
    "action": "install_package",
    "requirements_file": "requirements.txt",
    "timeout": 180
  }
}
```

### Return Format

All actions return a standardized response format:

#### Success Response:
```json
{
  "success": true,
  "message": "Operation completed successfully",
  "data": {
    "operation": "execute|validate|install_package",
    "script_name": "script.py",
    "success": true,
    "output": "Script output content...",
    "error": "Any error messages...",
    "exit_code": 0,
    "duration": 125.75,
    "temp_file": "path/to/temporary/file.py"
  }
}
```

#### Error Response:
```json
{
  "success": false,
  "error": "Error description",
  "data": {
    "operation": "validate",
    "error": "Detailed error message",
    "output": "Any output before error"
  }
}
```

### Security Features

1. **Temporary File Isolation**: All Python scripts run in isolated temporary files
2. **Process Timeout**: Automatic termination of long-running processes
3. **File Cleanup**: Automatic cleanup of temporary files and cache
4. **Environment Sandboxing**: Controlled environment variable setup
5. **Error Handling**: Comprehensive exception handling and error reporting

### Encoding Support

The tool includes advanced UTF-8 encoding support:

1. **Automatic UTF-8 Setup**: Injects UTF-8 configuration code into Python scripts
2. **Base64 Fallback**: Uses Base64 encoding for complex character handling
3. **Multi-layer Encoding Fix**: Multiple encoding detection and correction methods
4. **Environment Variables**: Sets proper PYTHONIOENCODING and locale variables

### Technical Implementation

- **Framework**: Unity Editor C# with coroutine-based async execution
- **Process Management**: System.Diagnostics.Process with proper disposal
- **Encoding**: UTF-8 with fallback mechanisms and Base64 encoding
- **File Management**: Temporary file creation with automatic cleanup
- **Error Handling**: Multi-level exception handling with detailed reporting

### Supported Python Versions

- Python 3.6+
- Compatible with virtual environments
- Supports both Windows and Unix-like systems
- Automatic Python executable detection

### Limitations

1. Scripts run in isolated processes (no persistent state)
2. Limited to text-based output (no GUI applications)
3. Network access depends on system configuration
4. File system access limited to working directory permissions
5. Some complex encoding scenarios may still show display issues

---

## Tool: code_runner

**Name**: code_runner
**Category**: 开发工具 (Development Tools)

**Description**: 
A comprehensive C# code execution tool that provides secure C# code compilation and execution within Unity Editor. This tool supports arbitrary C# code execution, method invocation, and output capture with full Unity API access.

### Actions

#### 1. Execute C# Code (`execute`)

**Purpose**: Compile and execute arbitrary C# code within Unity Editor environment.

**Parameters**:
- `action`: "execute" (required)
- `code`: C# code content to execute (required)
- `class_name`: Class name, default is "CodeClass" (optional)
- `method_name`: Method name to execute, default is "Run" (optional)
- `namespace`: Namespace, default is "CodeNamespace" (optional)
- `includes`: Referenced using statements list, JSON array format (optional)
- `parameters`: Method parameters, JSON array format (optional)
- `timeout`: Execution timeout in seconds, default 30 seconds (optional)
- `cleanup`: Whether to clean up temporary files after execution, default true (optional)
- `return_output`: Whether to capture and return console output, default true (optional)

**Features**:
- Dynamic C# code compilation using Unity's compilation pipeline
- Automatic method wrapping for code snippets
- Full Unity API and Editor API access
- Console output capture and redirection
- Comprehensive error handling and stack trace reporting
- Temporary file management with automatic cleanup
- Support for both static and instance methods
- Parameter type conversion and validation

**Example Usage**:
```json
{
  "func": "code_runner",
  "args": {
    "action": "execute",
    "code": "Debug.Log(\"Hello from C#!\"); GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube); cube.transform.position = new Vector3(1, 2, 3); return cube.name;",
    "class_name": "TestRunner",
    "method_name": "CreateCube",
    "namespace": "TestNamespace"
  }
}
```

**Full Method Definition Example**:
```json
{
  "func": "code_runner",
  "args": {
    "action": "execute",
    "code": "public static void CreateWaterPlant() { MCPWaterPlantBuilder.BuildCompleteWaterTreatmentPlant(); }",
    "class_name": "PlantBuilder",
    "method_name": "CreateWaterPlant"
  }
}
```

#### 2. Validate C# Code (`validate`)

**Purpose**: Validate C# code syntax and compilation without execution.

**Parameters**:
- `action`: "validate" (required)
- `code`: C# code content to validate (required)
- `class_name`: Class name, default is "CodeClass" (optional)
- `method_name`: Method name, default is "Run" (optional)
- `namespace`: Namespace, default is "CodeNamespace" (optional)
- `includes`: Referenced using statements list, JSON array format (optional)

**Features**:
- Syntax validation using Unity's compilation pipeline
- Assembly reference resolution
- Detailed error reporting with line numbers
- No code execution for security
- Support for Unity-specific APIs validation

**Example Usage**:
```json
{
  "func": "code_runner", 
  "args": {
    "action": "validate",
    "code": "GameObject obj = new GameObject(\"Test\"); obj.transform.position = Vector3.zero;",
    "includes": ["UnityEngine", "UnityEditor"]
  }
}
```

### Return Format

All actions return a standardized response format:

#### Success Response:
```json
{
  "success": true,
  "message": "Code execution completed successfully",
  "data": {
    "operation": "execute",
    "class_name": "CodeClass",
    "method_name": "Run", 
    "namespace_name": "CodeNamespace",
    "success": true,
    "message": "Code executed successfully",
    "output": "Console output content...",
    "return_value": "Method return value",
    "duration": 45.25,
    "stack_trace": null
  }
}
```

#### Error Response:
```json
{
  "success": false,
  "error": "Code compilation failed",
  "data": {
    "operation": "execute",
    "errors": "Compilation error details..."
  }
}
```

### Security Features

1. **Temporary File Isolation**: All C# scripts compile in isolated temporary assemblies
2. **Assembly Sandboxing**: Compiled assemblies run within Unity's security context
3. **Process Timeout**: Automatic termination of long-running code execution
4. **File Cleanup**: Automatic cleanup of temporary files and assemblies
5. **Error Handling**: Comprehensive exception handling and error reporting
6. **Memory Management**: Proper disposal of resources and assemblies

### Code Generation

The tool intelligently handles different code input formats:

1. **Code Snippets**: Automatically wraps simple code in a method structure
2. **Full Methods**: Detects and preserves complete method definitions
3. **Class Definitions**: Supports full class definitions with multiple methods
4. **Automatic Using Statements**: Provides default Unity and System namespaces
5. **Error Handling**: Wraps user code in try-catch blocks for better error reporting

### Technical Implementation

- **Framework**: Unity Editor C# with coroutine-based async compilation
- **Compilation Pipeline**: Unity's AssemblyBuilder with full reference resolution
- **Assembly Loading**: Dynamic assembly loading with proper isolation
- **Method Invocation**: Reflection-based method discovery and invocation
- **Output Capture**: Console output redirection and capture
- **Error Reporting**: Multi-level exception handling with detailed stack traces

### Supported Features

- Unity Engine API access (GameObject, Transform, Component, etc.)
- Unity Editor API access (EditorApplication, AssetDatabase, etc.)
- System libraries (System.IO, System.Linq, System.Text, etc.)
- Custom assembly references
- Static and instance method execution
- Parameter passing and type conversion
- Return value capture and serialization
- Console output capture

### Advanced Usage Examples

**Creating Unity GameObjects**:
```json
{
  "func": "code_runner",
  "args": {
    "action": "execute",
    "code": "var plant = new GameObject(\"Water Plant\"); var builder = plant.AddComponent<MCPWaterPlantBuilder>(); MCPWaterPlantBuilder.BuildCompleteWaterTreatmentPlant(); return \"Water plant created successfully\";",
    "includes": ["UnityEngine", "UnityEditor"]
  }
}
```

**Editor Scripting**:
```json
{
  "func": "code_runner",
  "args": {
    "action": "execute", 
    "code": "AssetDatabase.Refresh(); EditorApplication.ExecuteMenuItem(\"Tools/Create Water Plant\"); return \"Menu executed\";",
    "includes": ["UnityEditor"]
  }
}
```

### Limitations

1. Code executes within Unity's main thread (no multithreading)
2. Assembly references limited to Unity's compilation pipeline
3. No persistent state between executions
4. Limited to Unity Editor environment (not runtime)
5. Temporary assemblies may impact performance for frequent executions

---

## Version History

- **v1.1.0**: Added C# code_runner with dynamic compilation and execution support
- **v1.0.1**: Added comprehensive UTF-8 encoding support and Base64 fallback
- **v1.0.0**: Initial release with basic Python execution and validation

## Dependencies

- Unity 2020.3+
- Newtonsoft JSON 3.2.1+
- System Python installation (for python_runner)
- Windows/Linux/macOS support
- Unity Editor Compilation Pipeline (for code_runner)