---
description:
globs:
alwaysApply: true
---
# Unity MCP 工具规则 (mcp_rules)

本文档将工具按两类划分：
- Tools: `function_call`, `functions_call`（调用/批量调用 Methods）。
- Methods: `hierarchy_create`, `hierarchy_link`, `hierarchy_search`, `edit_asset`, `edit_component`, `manage_editor`, `edit_gameobject`, `ugui_layout`, `edit_prefab`, `request_http`, `edit_scene`, `edit_script`, `edit_scriptableobject`, `edit_shader`, `edit_texture`, `edit_material`, `edit_mesh`, `console_read`（均作为 `func` 传给 Tools）。

除 `function_call` 与 `functions_call` 外，其余均为 Methods 名称，不直接调用；请通过 Tools 调用，并把方法参数放入 `args`（字典类型）。

## 🗂️ 目录
- Tools
  - `function_call`
  - `functions_call`
- Methods
  - `gm_command`
  - `hierarchy_create`
  - `hierarchy_link` 
  - `hierarchy_search`
  - `edit_asset`
  - `edit_component`
  - `manage_editor`
  - `edit_gameobject`
  - `ugui_layout`
  - `edit_prefab`
  - `request_http`
  - `edit_scene`
  - `edit_script`
  - `edit_scriptableobject`
  - `edit_shader`
  - `edit_texture`
  - `edit_material`
  - `edit_mesh`
  - `console_read`
- 使用指南

---

## 🔧 Tools

### function_call - 单次函数调用工具
**功能**: 调用一次 Unity MCP 方法。

参数
- `func` (string, 必需): 方法名（见 Methods 列表）。
- `args` (dict, 必需): 传入方法的参数字典。

返回值格式
```json
{
  "success": true,
  "message": "...",
  "data": { },
  "error": ""
}
```

示例：创建一个 Cube
```python
function_call(
  func="hierarchy_create",
  args={"from": "primitive", "primitive_type": "Cube", "name": "Cube", "position": [0, 0, 0]}
)
```

---
### functions_call - 批量函数调用工具
**功能**: 按顺序执行多个 Unity MCP 方法调用并收集所有返回值。

参数
- `funcs` (list): 函数调用列表。

参数格式
```python
[
  { "func": "hierarchy_create", "args": {"from": "primitive", "primitive_type": "Cube", "name": "Enemy"} },
  { "func": "edit_gameobject", "args": {"path": "Enemy", "action": "add_component", "component_name": "Rigidbody"} }
]
```

返回值格式
```json
{
  "success": true,
  "results": [ ... ],
  "errors": [ ... ],
  "total_calls": 2,
  "successful_calls": 2,
  "failed_calls": 0
}
```

示例：批量创建并添加组件
```python
functions_call(
  funcs=[
    {"func": "hierarchy_create", "args": {"from": "primitive", "primitive_type": "Cube", "name": "Enemy"}},
    {"func": "edit_gameobject", "args": {"path": "Enemy", "action": "add_component", "component_name": "Rigidbody"}}
  ]
)
```

---

## 🧩 Methods
> 通过 Tools 调用以下方法：
> - 单次：使用 `function_call`，设置 `func` 为方法名，`args` 为方法参数字典。
> - 批量：使用 `functions_call`，把多条 `{func, args}` 放入 `function_calls`。

### gm_command - GM指令执行工具
**功能**: 执行游戏管理员(GM)相关指令，用于游戏开发和调试。

主要参数（放入 `args`）
- `action` (string): 操作类型，默认执行主要功能

支持的操作 (action)
- 默认操作 - 执行GM指令并返回测试响应

示例：执行默认GM指令
```python
function_call(
  func="gm_command",
  args={"action": "default"}
)
```

返回值格式
```json
{
  "success": true,
  "message": "Test",
  "data": {}
}
```

注意：此工具当前处于测试阶段，主要用于验证GM指令系统的基础功能。

---

### hierarchy_create - 层级对象创建工具
**功能**: 在Unity场景层级中创建GameObject对象，支持从基元、预制体和菜单项创建。

主要参数（放入 `args`）
- `from` (string, 必需): 操作类型，支持 `menu`、`primitive`、`prefab`
- `name` (string, 可选): GameObject名称
- `tag` (string, 可选): GameObject标签
- `layer` (string, 可选): GameObject所在层
- `parent` (string, 可选): 父对象标识符
- `position` (list, 可选): 位置坐标 [x, y, z]
- `rotation` (list, 可选): 旋转角度 [x, y, z]
- `scale` (list, 可选): 缩放比例 [x, y, z]
- `primitive_type` (string, 可选): 基元类型，支持 `Cube`、`Sphere`、`Cylinder`、`Capsule`、`Plane`、`Quad`
- `prefab_path` (string, 可选): 预制体路径
- `menu_path` (string, 可选): 菜单路径
- `save_as_prefab` (bool, 可选): 是否保存为预制体
- `active` (bool, 可选): 设置激活状态
- `components` (list, 可选): 要添加的组件列表

支持的创建类型 (from)
- `primitive` - 从基元类型创建（Cube、Sphere等）
- `prefab` - 从预制体实例化
- `menu` - 通过Unity菜单项创建

示例：创建基础立方体
```python
function_call(
  func="hierarchy_create",
  args={"from": "primitive", "primitive_type": "Cube", "name": "MyCube", "position": [0, 1, 0], "tag": "Interactable"}
)
```

示例：从预制体创建
```python
function_call(
  func="hierarchy_create",
  args={"from": "prefab", "prefab_path": "Assets/Prefabs/Enemy.prefab", "name": "Enemy01", "position": [5, 0, 0]}
)
```

示例：创建球体并保存为预制体
```python
function_call(
  func="hierarchy_create",
  args={"from": "primitive", "primitive_type": "Sphere", "name": "PlayerBall", "save_as_prefab": True, "prefab_path": "Assets/Prefabs/PlayerBall.prefab"}
)
```

示例：通过菜单创建对象
```python
function_call(
  func="hierarchy_create",
  args={"from": "menu", "menu_path": "GameObject/Light/Directional Light", "name": "MainLight"}
)
```

示例：创建带父对象的圆柱体
```python
function_call(
  func="hierarchy_create",
  args={"from": "primitive", "primitive_type": "Cylinder", "name": "Pillar", "parent": "Environment", "position": [10, 0, 10], "scale": [2, 5, 2]}
)
```
---

### hierarchy_link - 层级预制体链接工具
**功能**: 管理GameObject与预制体的连接关系，包括连接、应用更改和断开连接。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型，固定为 `link`
- `target_object` (string, 必需): 目标GameObject标识符（ID、名称或路径）
- `prefab_path` (string, 可选): 预制体路径
- `link_type` (string, 可选): 链接类型，支持 `connect_to_prefab`、`apply_prefab_changes`、`break_prefab_connection`
- `force_link` (bool, 可选): 是否强制创建链接（覆盖现有连接）

支持的链接类型 (link_type)
- `connect_to_prefab` - 连接GameObject到预制体（默认）
- `apply_prefab_changes` - 应用预制体实例的更改到预制体资源
- `break_prefab_connection` - 断开预制体连接

示例：连接GameObject到预制体
```python
function_call(
  func="hierarchy_link",
  args={"action": "link", "target_object": "Player", "prefab_path": "Assets/Prefabs/Player.prefab", "link_type": "connect_to_prefab"}
)
```

示例：强制连接（覆盖现有连接）
```python
function_call(
  func="hierarchy_link",
  args={"action": "link", "target_object": "Enemy", "prefab_path": "Assets/Prefabs/NewEnemy.prefab", "force_link": True}
)
```

示例：应用预制体实例的更改
```python
function_call(
  func="hierarchy_link",
  args={"action": "link", "target_object": "PlayerInstance", "link_type": "apply_prefab_changes"}
)
```

示例：断开预制体连接
```python
function_call(
  func="hierarchy_link",
  args={"action": "link", "target_object": "Enemy", "link_type": "break_prefab_connection"}
)
```

---

### hierarchy_search - 层级对象搜索工具
**功能**: 在Unity场景层级中搜索和查找GameObject对象，支持多种搜索方式，包括通配符和正则表达式。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型，固定为 `find`
- `search_method` (string, 可选): 搜索方法，支持 `by_name`、`by_id`、`by_tag`、`by_layer`、`by_component`、`by_term`等
- `target` (string, 可选): 搜索目标（可以是ID、名称或路径）
- `select_many` (bool, 可选): 是否查找所有匹配项，默认false
- `search_term` (string, 可选): 搜索条件（支持通配符*）
- `root_only` (bool, 可选): 是否仅搜索根对象（不包括子物体），默认false（包括所有层级）
- `include_inactive` (bool, 可选): 是否搜索非激活对象，默认false
- `use_regex` (bool, 可选): 是否使用正则表达式，默认false

支持的搜索方法 (search_method)
- `by_name` - 按名称搜索
- `by_id` - 按ID搜索
- `by_tag` - 按标签搜索
- `by_layer` - 按层级搜索
- `by_component` - 按组件类型搜索
- `by_term` - 通用术语搜索（搜索名称、标签、层级、组件类型等，支持通配符*、正则表达式和类型前缀）

通配符支持 (search_term)
- `*` - 匹配任意字符，如 `Player*` 匹配以Player开头的所有对象
- `*Cube*` - 匹配包含Cube的所有对象
- `Test*Object` - 匹配以Test开头、以Object结尾的对象

示例：按名称查找GameObject
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "target": "Player", "search_method": "by_name"}
)
```

示例：查找所有带特定标签的对象
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_method": "by_tag", "search_term": "Enemy", "select_many": True}
)
```

示例：按ID查找特定对象
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "target": "12345", "search_method": "by_id"}
)
```

示例：查找包含特定组件的对象
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_method": "by_component", "search_term": "Rigidbody", "select_many": True, "include_inactive": True}
)
```

示例：在特定层级查找对象
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_method": "by_layer", "search_term": "Default", "select_many": True}
)
```

示例：通用术语搜索（搜索包含"Player"的所有对象，包括子物体）
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_method": "by_term", "search_term": "Player", "select_many": True}
)
```

示例：仅搜索根对象（不包括子物体）
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_method": "by_term", "search_term": "Player", "select_many": True, "root_only": True}
)
```

示例：使用通配符搜索（搜索所有以"Player"开头的对象）
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_method": "by_term", "search_term": "Player*", "select_many": True}
)
```

示例：使用通配符搜索（搜索所有包含"Cube"的对象）
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_method": "by_term", "search_term": "*Cube*", "select_many": True}
)
```

示例：使用正则表达式搜索（搜索所有以"Test"开头的对象）
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_method": "by_term", "search_term": "^Test", "use_regex": True, "select_many": True}
)
```

示例：按类型搜索（搜索所有包含MeshRenderer组件的对象）
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_method": "by_term", "search_term": "t:MeshRenderer", "select_many": True}
)
```

示例：搜索场景中所有物体
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_method": "by_term", "search_term": "*", "select_many": True}
)
```

---

### edit_asset - Unity资产管理
**功能**: 执行Unity资产的各种操作，包括导入、修改、移动、复制等。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型，如 `import`/`modify`/`move`/`duplicate` 等
- `path` (string, 必需): 资产路径
- `properties` (dict): 资产属性
- `destination` (string): 目标路径（移动/复制时）

支持的操作 (action)
- `import` - 重新导入资产
- `modify` - 修改现有资产
- `duplicate` - 复制资产
- `move` - 移动/重命名资产
- `rename` - 移动/重命名资产（与move相同）
- `search` - 搜索资产
- `get_info` - 获取资产信息
- `create_folder` - 创建文件夹

示例：创建文件夹
```python
function_call(
  func="edit_asset",
  args={"action": "create_folder", "path": "Assets/NewFolder"}
)
```

示例：搜索预制体
```python
function_call(
  func="edit_asset",
  args={"action": "search", "path": "Assets/", "search_pattern": "*.prefab"}
)
```

示例：获取资产信息
```python
function_call(
  func="edit_asset",
  args={"action": "get_info", "path": "Assets/Scripts/PlayerController.cs"}
)
```

示例：复制资产
```python
function_call(
  func="edit_asset",
  args={"action": "duplicate", "path": "Assets/Materials/RedMaterial.mat", "destination": "Assets/Materials/RedMaterialCopy.mat"}
)
```

示例：移动/重命名资产
```python
function_call(
  func="edit_asset",
  args={"action": "move", "path": "Assets/Scripts/OldName.cs", "destination": "Assets/Scripts/NewName.cs"}
)
```

示例：设置材质属性
```python
function_call(
  func="edit_material",
  args={"action": "set_properties", "path": "Assets/Materials/MyMaterial.mat", "properties": {"_Color": {"r": 1.0, "g": 0.5, "b": 0.0, "a": 1.0}}}
)
```

---

### edit_component - 组件属性操作管理
**功能**: 专门处理Unity GameObject组件的属性操作，支持批量获取和设置组件属性。使用双状态树架构进行目标定位和属性操作。

主要参数（放入 `args`）
- `id` (string, 可选): 对象的InstanceID
- `path` (string, 可选): 对象的Hierarchy路径
- `action` (string, 必需): 操作类型，支持 `get_component_propertys`、`set_component_propertys`
- `component_type` (string, 必需): 组件类型名（继承自Component的类型名），如 "Transform"、"Rigidbody"、"MeshRenderer"
- `properties` (dict, 可选): 属性字典（用于set_component_propertys操作）

支持的操作类型 (action)
- **get_component_propertys**: 批量获取组件的所有公共属性和字段
- **set_component_propertys**: 批量设置组件的多个属性

**目标定位支持**
- 通过 `id` 参数使用InstanceID精确定位
- 通过 `path` 参数使用Hierarchy路径定位
- 支持HierarchySelector的所有查找方式

示例：获取Transform组件的所有属性
```python
function_call(
  func="edit_component",
  args={"action": "get_component_propertys", "instance_id": "12345", "component_type": "Transform"}
)
```

示例：获取Rigidbody组件的所有属性
```python
function_call(
  func="edit_component",
  args={"action": "get_component_propertys", "path": "Player", "component_type": "Rigidbody"}
)
```

示例：批量设置Transform组件属性
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys", 
    "path": "Player", 
    "component_type": "Transform",
    "properties": {
      "localPosition": [0, 1, 0],
      "localRotation": [0, 45, 0, 1],
      "localScale": [2, 2, 2]
    }
  }
)
```

示例：批量设置Rigidbody组件属性
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "Player",
    "component_type": "Rigidbody", 
    "properties": {
      "mass": 2.5,
      "useGravity": True,
      "drag": 0.5,
      "angularDrag": 0.1,
      "isKinematic": False
    }
  }
)
```

示例：设置Material Shader属性
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "Cube", 
    "component_type": "MeshRenderer",
    "properties": {
      "material._Color": [1.0, 0.0, 0.0, 1.0],
      "material._Metallic": 0.8,
      "material._Smoothness": 0.9
    }
  }
)
```

示例：设置材质颜色（嵌套属性访问）
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "Cube", 
    "component_type": "Renderer",
    "properties": {
      "material.color": [1.0, 0.0, 0.0, 1.0]
    }
  }
)
```

示例：设置材质数组元素属性（数组访问）
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "MultiMaterialCube", 
    "component_type": "Renderer",
    "properties": {
      "materials[0].color": [1.0, 0.0, 0.0, 1.0],
      "materials[1].color": [0.0, 1.0, 0.0, 1.0]
    }
  }
)
```

示例：设置Unity Object引用（资产路径）
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "Cube", 
    "component_type": "Renderer",
    "properties": {
      "material": "Assets/Materials/RedMaterial.mat",
      "material._MainTex": "Assets/Textures/brick.jpg"
    }
  }
)
```

示例：设置Camera组件属性
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "Camera", 
    "component_type": "Camera",
    "properties": {
      "targetTexture": "Assets/RenderTextures/CameraOutput.renderTexture",
      "fieldOfView": 60.0,
      "nearClipPlane": 0.3,
      "farClipPlane": 1000.0
    }
  }
)
```

返回值格式 (get_component_propertys)
```json
{
  "success": true,
  "message": "Retrieved 15 properties from component 'Transform' on 'Player'.",
  "data": {
    "component_type": "UnityEngine.Transform",
    "properties": {
      "position": {"x": 0, "y": 0, "z": 0},
      "rotation": {"x": 0, "y": 0, "z": 0, "w": 1},
      "localScale": {"x": 1, "y": 1, "z": 1},
      "localPosition": {"x": 0, "y": 0, "z": 0}
    }
  }
}
```

返回值格式 (set_component_propertys)
```json
{
  "success": true,
  "message": "Set 3 of 3 properties on component 'Transform' on 'Player'.",
  "data": {
    "component_type": "Transform",
    "total_properties": 3,
    "successful_properties": 3,
    "failed_properties": 0,
    "results": {
      "localPosition": "Success",
      "localRotation": "Success", 
      "localScale": "Success"
    }
  }
}
```

特点
- **批量属性操作**: 一次调用可以获取或设置组件的多个属性
- **智能类型转换**: 支持Unity常用数据类型（Vector3、Quaternion、Color等）的自动转换
- **详细结果反馈**: 提供每个属性操作的详细结果和错误信息
- **材质Shader属性支持**: 直接支持设置材质的Shader属性（以_开头的属性）
- **嵌套属性访问**: 支持通过点号访问嵌套属性，如 "material._Color"
- **撤销支持**: 所有操作都支持Unity的撤销功能
- **错误容错**: 单个属性操作失败不会影响其他属性的处理

---

### manage_editor - Unity编辑器状态管理
**功能**: 控制和查询Unity编辑器的状态和设置，包括播放模式控制、工具管理、标签层级管理等。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `wait_for_completion` (bool, 可选): 是否等待操作完成
- `toolName` (string, 可选): 工具名称（设置活动工具时使用）
- `tagName` (string, 可选): 标签名称（标签操作时使用）
- `layerName` (string, 可选): 层名称（层级操作时使用）
- `menu_path` (string, 可选): 菜单路径（执行菜单时使用）

支持的操作 (action)

**播放模式控制**
- `play` - 进入播放模式
- `pause` - 暂停/恢复播放模式
- `stop` - 停止播放模式

**编辑器状态/信息**
- `get_state` - 获取编辑器状态
- `get_windows` - 获取编辑器窗口
- `get_active_tool` - 获取当前活动工具
- `get_selection` - 获取当前选择对象
- `set_active_tool` - 设置活动工具

**标签管理**
- `add_tag` - 添加标签
- `remove_tag` - 移除标签  
- `get_tags` - 获取标签列表

**层级管理**
- `add_layer` - 添加层
- `remove_layer` - 移除层
- `get_layers` - 获取层列表

**菜单管理**
- `execute_menu` - 执行Unity菜单项

示例：播放场景
```python
function_call(
  func="manage_editor",
  args={"action": "play"}
)
```

示例：暂停/恢复场景
```python
function_call(
  func="manage_editor",
  args={"action": "pause"}
)
```

示例：获取编辑器状态
```python
function_call(
  func="manage_editor",
  args={"action": "get_state"}
)
```

示例：获取编辑器窗口
```python
function_call(
  func="manage_editor",
  args={"action": "get_windows"}
)
```

示例：设置活动工具
```python
function_call(
  func="manage_editor",
  args={"action": "set_active_tool", "toolName": "Move"}
)
```

示例：获取当前选择
```python
function_call(
  func="manage_editor",
  args={"action": "get_selection"}
)
```

示例：添加标签
```python
function_call(
  func="manage_editor",
  args={"action": "add_tag", "tagName": "Enemy"}
)
```

示例：移除标签
```python
function_call(
  func="manage_editor",
  args={"action": "remove_tag", "tagName": "Enemy"}
)
```

示例：获取所有标签
```python
function_call(
  func="manage_editor",
  args={"action": "get_tags"}
)
```

示例：添加层
```python
function_call(
  func="manage_editor",
  args={"action": "add_layer", "layerName": "Environment"}
)
```

示例：移除层
```python
function_call(
  func="manage_editor",
  args={"action": "remove_layer", "layerName": "Environment"}
)
```

示例：获取所有层
```python
function_call(
  func="manage_editor",
  args={"action": "get_layers"}
)
```

示例：执行菜单项
```python
function_call(
  func="manage_editor",
  args={"action": "execute_menu", "menu_path": "GameObject/UI/Canvas"}
)
```

---

### edit_gameobject - GameObject编辑工具
**功能**: 使用双状态树架构处理GameObject修改操作，支持目标定位和多种操作，包括修改属性、组件管理和高级属性设置。

主要参数（放入 `args`）
- `id` (string, 必需): 目标GameObject的InstanceID
- `path` (string, 可选): 目标GameObject的Hierarchy路径
- `select_many` (bool, 可选): 是否选择所有匹配的对象进行批量操作（默认false）
- `action` (string, 可选): 操作类型，支持 `create`、`modify`、`get_components`、`add_component`、`remove_component`、`set_property`、`get_property`

**基本修改参数**
- `name` (string, 可选): GameObject名称
- `tag` (string, 可选): GameObject标签
- `layer` (string, 可选): GameObject所在层
- `parent_id` (string, 可选): 父对象实例id
- `position` (list, 可选): 位置坐标 [x, y, z]
- `rotation` (list, 可选): 旋转角度 [x, y, z]
- `scale` (list, 可选): 缩放比例 [x, y, z]
- `active` (bool, 可选): 设置激活状态

**组件操作参数**
- `component_name` (string, 可选): 组件名称
- `components` (list, 可选): 要添加的组件列表，支持字符串或对象格式
- `components_to_remove` (list, 可选): 要移除的组件列表
- `component_properties` (dict, 可选): 组件属性字典，支持嵌套属性和数组访问

**属性操作参数**
- `property_name` (string, 可选): 属性名称（用于属性设置/获取）
- `value` (any, 可选): 要设置的属性值

**批量操作参数**
- `select_many` (bool, 可选): 是否对所有匹配的对象进行批量操作

支持的操作类型 (action)
- `create` - 创建新GameObject（委托给hierarchy_create）
- `modify` - 修改GameObject基本属性（默认操作）
- `get_components` - 获取GameObject上的所有组件
- `add_component` - 添加组件到GameObject
- `remove_component` - 从GameObject移除组件
- `set_property` - 设置GameObject属性（通用属性操作）
- `get_property` - 获取GameObject属性

**注意**: 组件属性设置功能已移动到 `edit_component` 方法，请使用 `edit_component` 的 `set_component_propertys` 操作来设置组件属性。

示例：修改GameObject基本属性（默认操作）
```python
function_call(
  func="edit_gameobject",
  args={"instance_id": "12345", "name": "MainPlayer", "position": [0, 1, 0], "active": true}
)
```

示例：通过路径修改GameObject
```python
function_call(
  func="edit_gameobject",
  args={"path": "Player", "name": "MainPlayer", "position": [0, 1, 0], "active": true}
)
```

示例：获取GameObject组件列表
```python
function_call(
  func="edit_gameobject",
  args={"instance_id": "12345", "action": "get_components"}
)
```

**组件操作示例:**

示例：添加单个组件
```python
function_call(
  func="edit_gameobject",
  args={"path": "Player", "action": "add_component", "component_name": "Rigidbody"}
)
```

示例：批量添加多个组件（字符串格式）
```python
function_call(
  func="edit_gameobject",
  args={"path": "Player", "action": "add_component", "components": ["Rigidbody", "BoxCollider", "AudioSource"]}
)
```

示例：添加组件并立即设置属性
```python
function_call(
  func="edit_gameobject",
  args={
    "path": "Player", 
    "action": "add_component", 
    "component_name": "Rigidbody",
    "component_properties": {"mass": 2.5, "useGravity": true, "drag": 0.1}
  }
)
```

示例：添加组件（对象格式，支持初始属性）
```python
function_call(
  func="edit_gameobject",
  args={
    "path": "Player", 
    "action": "add_component", 
    "components": [
      {"typeName": "Rigidbody", "properties": {"mass": 2.5, "useGravity": true}},
      {"typeName": "BoxCollider", "properties": {"isTrigger": false, "size": [1, 1, 1]}}
    ]
  }
)
```

示例：移除单个组件
```python
function_call(
  func="edit_gameobject",
  args={"path": "Player", "action": "remove_component", "component_name": "Collider"}
)
```

示例：批量移除多个组件
```python
function_call(
  func="edit_gameobject",
  args={"path": "Player", "action": "remove_component", "components_to_remove": ["Rigidbody", "BoxCollider"]}
)
```

**注意**: 组件属性设置示例已移动到 `edit_component` 部分，请参考该部分的详细示例。

**批量操作示例:**

示例：使用InstanceID批量修改（需要ObjectSelector支持）
```python
function_call(
  func="edit_gameobject",
  args={
    "instance_id": "12345", 
    "select_many": true,
    "position": [0, 0, 0], 
    "active": false
  }
)
```

示例：通过路径批量操作
```python
function_call(
  func="edit_gameobject",
  args={
    "path": "Enemies/*", 
    "select_many": true,
    "action": "add_component",
    "component_name": "Rigidbody",
    "component_properties": {"mass": 1.0, "useGravity": true}
  }
)
```

**属性操作示例:**

示例：设置GameObject属性
```python
function_call(
  func="edit_gameobject",
  args={"path": "Player", "action": "set_property", "property_name": "tag", "value": "Player"}
)
```

示例：获取GameObject属性
```python
function_call(
  func="edit_gameobject",
  args={"instance_id": "12345", "action": "get_property", "property_name": "activeSelf"}
)
```

特殊功能
- **双状态树架构**: 第一树负责目标定位，第二树负责操作执行，提供更强大的处理能力
- **批量操作支持**: 通过 `select_many` 参数可以对多个匹配对象进行批量操作
- **智能类型转换**: 自动处理Unity对象引用、Vector3、Color、Quaternion等类型
- **嵌套属性支持**: 支持通过点号访问嵌套属性，如 "material.color"、"material._MainTex"
- **数组索引支持**: 支持访问数组元素，如 "materials[0].color"、"materials[1]._Color"
- **材质Shader属性**: 直接支持设置材质的Shader属性（以_开头的属性），包括颜色、浮点数、纹理等
- **组件属性批量设置**: 通过component_properties字典可一次设置多个属性
- **复杂引用处理**: 支持通过查找条件设置Unity Object引用，包括GameObject、Component、Asset等
- **标签自动创建**: 如果指定的标签不存在，会自动创建
- **组件动态查找**: 支持通过类名在所有程序集中查找组件类型
- **撤销支持**: 所有操作都支持Unity的撤销功能
- **错误恢复**: 批量操作时单个对象失败不会影响其他对象的处理
- **属性验证**: 自动验证属性类型和可访问性，避免运行时错误

---

### ugui_layout - UGUI布局管理工具
**功能**: 使用双状态树架构处理RectTransform修改操作，专门用于UGUI的布局调整。第一个状态树负责目标GameObject定位，第二个状态树负责RectTransform属性操作。

主要参数（放入 `args`）

**目标定位参数**
- `id` (string, 可选): 对象的InstanceID
- `path` (string, 可选): 对象的Hierarchy路径
- `select_many` (bool, 可选): 是否选择所有匹配的对象进行批量操作（默认false）

**操作类型参数**
- `action` (string, 可选): 操作类型，支持 `do_layout`、`set_props`、`get_layout`（默认为do_layout）

**RectTransform基本属性**
- `anchored_position` (list, 可选): 锚点位置 [x, y]
- `size_delta` (list, 可选): 尺寸增量 [width, height]
- `anchor_min` (list, 可选): 最小锚点 [x, y]
- `anchor_max` (list, 可选): 最大锚点 [x, y]
- `pivot` (list, 可选): 轴心点 [x, y]
- `offset_min` (list, 可选): 最小偏移 [x, y]
- `offset_max` (list, 可选): 最大偏移 [x, y]

**Transform继承属性**
- `local_position` (list, 可选): 本地位置 [x, y, z]
- `local_rotation` (list, 可选): 本地旋转 [x, y, z]
- `local_scale` (list, 可选): 本地缩放 [x, y, z]

**便捷设置参数**
- `width` (float, 可选): 宽度
- `height` (float, 可选): 高度
- `left` (float, 可选): 左边距
- `right` (float, 可选): 右边距
- `top` (float, 可选): 上边距
- `bottom` (float, 可选): 下边距

**预设锚点类型**
- `anchor_preset` (string, 可选): 锚点预设，支持：
  - `top_left`, `top_center`, `top_right`
  - `middle_left`, `middle_center`, `middle_right`
  - `bottom_left`, `bottom_center`, `bottom_right`
  - `stretch_horizontal`, `stretch_vertical`, `stretch_all`

**属性操作参数**
- `property_name` (string, 可选): 属性名称（用于属性设置/获取操作）
- `value` (any, 可选): 要设置的属性值

支持的操作类型 (action)
- `do_layout` - 执行布局修改操作，可通过property_name+value设置特定属性，或直接传递各种属性参数（默认操作）
- `set_props` - 设置RectTransform属性，可通过property_name+value设置特定属性，或直接传递各种属性参数
- `get_layout` - 获取RectTransform属性信息，可指定property_name获取特定属性，否则获取所有属性

示例：执行布局修改（默认操作）
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/Button", "width": 200, "height": 50, "anchored_position": [0, 0]}
)
```

示例：通过InstanceID定位并执行布局修改
```python
function_call(
  func="ugui_layout",
  args={"id": "12345", "action": "do_layout", "width": 150, "height": 40}
)
```

示例：设置锚点预设
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/Panel", "action": "do_layout", "anchor_preset": "stretch_all"}
)
```

示例：设置边距
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/Content", "action": "do_layout", "left": 10, "right": 10, "top": 10, "bottom": 10}
)
```

示例：批量设置多个UI元素的尺寸
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/Button", "select_many": true, "action": "do_layout", "width": 150, "height": 40}
)
```

示例：获取所有布局属性
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/Button", "action": "get_layout"}
)
```

示例：获取特定布局属性
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/Button", "action": "get_layout", "property_name": "anchoredPosition"}
)
```

示例：设置精确的锚点和偏移
```python
function_call(
  func="ugui_layout",
  args={
    "path": "Canvas/InfoPanel", 
    "anchor_min": [0, 0], 
    "anchor_max": [1, 0.3], 
    "offset_min": [10, 10], 
    "offset_max": [-10, -10]
  }
)
```

示例：设置特定RectTransform属性
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/ScrollView", "action": "set_props", "property_name": "anchoredPosition", "value": [100, 50]}
)
```

示例：获取特定RectTransform属性
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/ScrollView", "action": "get_layout", "property_name": "anchoredPosition"}
)
```

示例：设置复杂的UI布局组合
```python
function_call(
  func="ugui_layout",
  args={
    "path": "Canvas/LoginPanel",
    "anchor_preset": "middle_center",
    "width": 400,
    "height": 300,
    "local_position": [0, 0, 0]
  }
)
```

返回值格式
```json
{
  "success": true,
  "message": "RectTransform on 'Button' modified successfully.",
  "data": {
    "name": "Button",
    "instanceID": 12345,
    "anchoredPosition": {"x": 0, "y": 0},
    "sizeDelta": {"x": 200, "y": 50},
    "anchorMin": {"x": 0.5, "y": 0.5},
    "anchorMax": {"x": 0.5, "y": 0.5},
    "pivot": {"x": 0.5, "y": 0.5},
    "rect": {"x": -100, "y": -25, "width": 200, "height": 50}
  }
}
```

特点
- **双状态树架构**: 先通过ObjectSelector定位目标GameObject，再执行RectTransform操作，确保操作精确性
- **UI专用**: 专门针对UGUI的RectTransform组件设计，包含所有UI布局相关功能
- **多种定位方式**: 支持InstanceID、Hierarchy路径等多种目标定位方式
- **布局预设**: 支持常用的锚点预设，快速设置UI布局模式
- **便捷参数**: 提供width、height、边距等便捷参数，简化常用操作
- **批量操作**: 支持select_many参数进行批量UI布局调整，提高批量处理效率
- **智能类型转换**: 自动处理Vector2、Vector3等Unity数据类型转换
- **撤销支持**: 所有操作都支持Unity的撤销功能，便于调试和修改
- **详细返回数据**: 返回完整的RectTransform状态信息，便于验证操作结果
- **灵活的操作模式**: do_layout执行布局修改、set_props设置属性、get_layout获取布局信息，满足不同场景需求

---


### edit_prefab - 预制体管理
**功能**: 专门管理Unity中的预制体资源，提供预制体的创建、修改、复制、实例化等操作。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `path` (string, 必需): 预制体资源路径，Unity标准格式：Assets/Prefabs/PrefabName.prefab
- `source_object` (string, 可选): 源GameObject名称或路径（创建时使用）
- `destination` (string, 可选): 目标路径（复制时使用）
- `search_pattern` (string, 可选): 搜索模式，如*.prefab
- `recursive` (bool, 可选): 是否递归搜索子文件夹
- `force` (bool, 可选): 是否强制执行操作（覆盖现有文件等）
- `prefab_variant` (bool, 可选): 是否创建预制体变体
- `unpack_mode` (string, 可选): 解包模式：Completely, OutermostRoot
- `pack_mode` (string, 可选): 打包模式：Default, ReuseExisting
- `connect_to_prefab` (bool, 可选): 是否连接到预制体
- `apply_prefab_changes` (bool, 可选): 是否应用预制体更改
- `revert_prefab_changes` (bool, 可选): 是否还原预制体更改
- `break_prefab_connection` (bool, 可选): 是否断开预制体连接
- `prefab_type` (string, 可选): 预制体类型：Regular, Variant
- `parent_prefab` (string, 可选): 父预制体路径（变体时使用）
- `scene_path` (string, 可选): 场景路径（实例化时使用）
- `position` (list, 可选): 位置坐标 [x, y, z]
- `rotation` (list, 可选): 旋转角度 [x, y, z]
- `scale` (list, 可选): 缩放比例 [x, y, z]
- `parent` (string, 可选): 父对象名称或路径

支持的操作 (action)
- `create` - 创建预制体
- `modify` - 修改预制体
- `duplicate` - 复制预制体
- `get_info` - 获取预制体信息
- `search` - 搜索预制体
- `instantiate` - 实例化预制体
- `unpack` - 解包预制体
- `pack` - 打包预制体
- `create_variant` - 创建预制体变体
- `connect_to_prefab` - 连接到预制体
- `apply_changes` - 应用预制体更改
- `revert_changes` - 还原预制体更改
- `break_connection` - 断开预制体连接

示例：创建预制体
```python
function_call(
  func="edit_prefab",
  args={"action": "create", "path": "Assets/Prefabs/NewPrefab.prefab", "source_object": "Player"}
)
```

示例：复制预制体
```python
function_call(
  func="edit_prefab",
  args={"action": "duplicate", "path": "Assets/Prefabs/Player.prefab", "destination": "Assets/Prefabs/PlayerCopy.prefab"}
)
```

示例：实例化预制体
```python
function_call(
  func="edit_prefab",
  args={"action": "instantiate", "path": "Assets/Prefabs/Enemy.prefab", "position": [0, 0, 0], "rotation": [0, 0, 0], "scale": [1, 1, 1]}
)
```

示例：搜索预制体
```python
function_call(
  func="edit_prefab",
  args={"action": "search", "search_pattern": "*.prefab", "path": "Assets/Prefabs/"}
)
```

示例：创建预制体变体
```python
function_call(
  func="edit_prefab",
  args={"action": "create_variant", "path": "Assets/Prefabs/EnemyVariant.prefab", "parent_prefab": "Assets/Prefabs/Enemy.prefab"}
)
```

示例：应用预制体更改
```python
function_call(
  func="edit_prefab",
  args={"action": "apply_changes", "path": "Assets/Prefabs/Player.prefab", "target_object": "PlayerInstance"}
)
```

---

### request_http - 网络资源管理
**功能**: 执行网络请求和文件下载上传操作，支持HTTP/HTTPS协议。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `url` (string, 必需): 请求URL地址
- `data` (object): 请求数据（POST/PUT时使用，JSON格式）
- `headers` (object): 请求头字典
- `save_path` (string): 保存路径（下载时使用）
- `file_path` (string): 文件路径（上传时使用）
- `timeout` (int): 超时时间（秒），默认30秒
- `content_type` (string): 内容类型，默认application/json
- `auth_token` (string): Bearer认证令牌
- `basic_auth` (string): 基础认证（username:password）
- `query_params` (object): URL查询参数
- `form_data` (object): 表单数据
- `retry_count` (int): 重试次数，默认0
- `retry_delay` (float): 重试延迟（秒），默认1

支持的操作 (action)
- `get` - HTTP GET请求
- `post` - HTTP POST请求
- `put` - HTTP PUT请求
- `delete` - HTTP DELETE请求
- `download` - 下载文件到本地
- `upload` - 上传本地文件
- `ping` - 连通性测试

示例：GET请求获取数据
```python
function_call(
  func="request_http",
  args={"action": "get", "url": "https://api.github.com/repos/microsoft/vscode", "timeout": 30}
)
```

示例：POST请求发送数据
```python
function_call(
  func="request_http",
  args={"action": "post", "url": "https://httpbin.org/post", "data": {"message": "Hello from Unity", "timestamp": "2024-01-01T12:00:00Z"}, "content_type": "application/json"}
)
```

示例：下载文件
```python
function_call(
  func="request_http",
  args={"action": "download", "url": "https://httpbin.org/image/png", "save_path": "Assets/Downloaded/test_image.png", "timeout": 60}
)
```

示例：带认证的请求
```python
function_call(
  func="request_http",
  args={"action": "get", "url": "https://api.example.com/data", "auth_token": "your_bearer_token_here", "headers": {"User-Agent": "Unity-MCP/1.0"}}
)
```

示例：上传文件
```python
function_call(
  func="request_http",
  args={"action": "upload", "url": "https://httpbin.org/post", "file_path": "Assets/Screenshots/screenshot.png", "form_data": {"description": "Unity screenshot"}}
)
```

示例：Ping测试连通性
```python
function_call(
  func="request_http",
  args={"action": "ping", "url": "https://httpbin.org/status/200", "timeout": 10}
)
```

示例：带查询参数的GET请求
```python
function_call(
  func="request_http",
  args={"action": "get", "url": "https://httpbin.org/get", "query_params": {"param1": "value1", "param2": "value2"}}
)
```

示例：带重试机制的请求
```python
function_call(
  func="request_http",
  args={"action": "get", "url": "https://httpbin.org/status/500", "retry_count": 3, "retry_delay": 1.5}
)
```

---

### edit_scene - 场景管理
**功能**: 管理Unity场景，包括加载、保存、创建和获取层级结构。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `name` (string, 必需): 场景名称
- `path` (string, 必需): 资产路径
- `build_index` (int, 必需): 构建索引

支持的操作 (action)
- `load` - 加载场景
- `save` - 保存场景
- `create` - 创建场景
- `get_hierarchy` - 获取场景层级

示例：创建新场景
```python
function_call(
  func="edit_scene",
  args={"action": "create", "name": "NewLevel", "path": "Assets/Scenes/", "build_index": 1}
)
```

示例：加载场景
```python
function_call(
  func="edit_scene",
  args={"action": "load", "name": "MainMenu", "path": "Assets/Scenes/MainMenu.unity", "build_index": 0}
)
```

示例：保存当前场景
```python
function_call(
  func="edit_scene",
  args={"action": "save", "name": "CurrentScene", "path": "Assets/Scenes/", "build_index": 0}
)
```

示例：获取场景层级结构
```python
function_call(
  func="edit_scene",
  args={"action": "get_hierarchy", "name": "CurrentScene", "path": "", "build_index": 0}
)
```

---

### edit_script - C#脚本管理
**功能**: 管理Unity中的C#脚本，包括创建、读取、更新和删除。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `name` (string, 必需): 脚本名称（不含.cs扩展名）
- `path` (string, 必需): 资产路径
- `lines` (array, 可选): C#代码内容（字符串数组，每行一个元素）
- `script_type` (string, 可选): 脚本类型
- `namespace` (string, 可选): 命名空间

支持的操作 (action)
- `create` - 创建脚本
- `read` - 读取脚本
- `update` - 更新脚本
- `delete` - 删除脚本

示例：创建 MonoBehaviour 脚本
```python
function_call(
  func="edit_script",
  args={"action": "create", "name": "PlayerController", "path": "Assets/Scripts/", "lines": ["using UnityEngine;", "", "public class PlayerController : MonoBehaviour", "{", "    public float speed = 5f;", "", "    void Update()", "    {", "        float h = Input.GetAxis(\"Horizontal\");", "        float v = Input.GetAxis(\"Vertical\");", "        Vector3 movement = new Vector3(h, 0, v) * speed * Time.deltaTime;", "        transform.Translate(movement);", "    }", "}"], "script_type": "MonoBehaviour", "namespace": ""}
)
```

示例：读取现有脚本
```python
function_call(
  func="edit_script",
  args={"action": "read", "name": "PlayerController", "path": "Assets/Scripts/"}
)
```

示例：更新脚本内容
```python
function_call(
  func="edit_script",
  args={"action": "update", "name": "PlayerController", "path": "Assets/Scripts/", "lines": ["// 更新后的代码内容", "using UnityEngine;", "", "public class PlayerController : MonoBehaviour", "{", "    // 新的代码内容", "}"], "script_type": "MonoBehaviour", "namespace": ""}
)
```

---

### edit_scriptableobject - ScriptableObject管理
**功能**: 专门管理Unity中的ScriptableObject资产，提供创建、修改、复制、搜索等操作。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `path` (string, 必需): ScriptableObject资产路径，Unity标准格式：Assets/Folder/AssetName.asset
- `script_class` (string): ScriptableObject脚本类名（创建时需要）
- `properties` (dict): 资产属性字典，用于设置ScriptableObject的各种属性
- `destination` (string): 目标路径（复制时使用）
- `search_pattern` (string): 搜索模式，如*.asset
- `recursive` (bool): 是否递归搜索子文件夹
- `force` (bool): 是否强制执行操作（覆盖现有文件等）

支持的操作 (action)
- `create` - 创建ScriptableObject
- `modify` - 修改ScriptableObject
- `duplicate` - 复制ScriptableObject
- `search` - 搜索ScriptableObject
- `get_info` - 获取ScriptableObject信息

示例：创建ScriptableObject
```python
function_call(
  func="edit_scriptableobject",
  args={"action": "create", "path": "Assets/Data/GameSettings.asset", "script_class": "GameSettings", "properties": {"playerSpeed": 5.0, "maxHealth": 100}}
)
```

示例：修改ScriptableObject
```python
function_call(
  func="edit_scriptableobject",
  args={"action": "modify", "path": "Assets/Data/GameSettings.asset", "properties": {"playerSpeed": 7.0, "maxHealth": 150}}
)
```

示例：复制ScriptableObject
```python
function_call(
  func="edit_scriptableobject",
  args={"action": "duplicate", "path": "Assets/Data/GameSettings.asset", "destination": "Assets/Data/GameSettingsCopy.asset"}
)
```

示例：搜索ScriptableObject
```python
function_call(
  func="edit_scriptableobject",
  args={"action": "search", "search_pattern": "*.asset", "path": "Assets/Data/"}
)
```

示例：获取ScriptableObject信息
```python
function_call(
  func="edit_scriptableobject",
  args={"action": "get_info", "path": "Assets/Data/GameSettings.asset"}
)
```

---

### edit_shader - Shader管理
**功能**: 管理Unity中的Shader文件，包括创建、读取、更新和删除。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `name` (string, 必需): Shader名称（不含.shader扩展名）
- `path` (string, 可选): 资产路径（相对于Assets），默认为Shaders
- `lines` (array, 可选): Shader代码内容（字符串数组，每行一个元素）

支持的操作 (action)
- `create` - 创建Shader
- `read` - 读取Shader
- `update` - 更新Shader
- `delete` - 删除Shader

示例：创建基础Shader
```python
function_call(
  func="edit_shader",
  args={"action": "create", "name": "MyShader", "path": "Shaders"}
)
```

示例：创建带自定义内容的Shader
```python
function_call(
  func="edit_shader",
  args={"action": "create", "name": "ColorShader", "path": "Shaders", "lines": ["Shader \"ColorShader\"", "{", "    Properties", "    {", "        _Color (\"Color\", Color) = (1,0,0,1)", "    }", "    SubShader", "    {", "        Tags { \"RenderType\"=\"Opaque\" }", "        Pass", "        {", "            Color [_Color]", "        }", "    }", "}"]}
)
```

示例：读取Shader
```python
function_call(
  func="edit_shader",
  args={"action": "read", "name": "MyShader", "path": "Shaders"}
)
```

示例：更新Shader内容
```python
function_call(
  func="edit_shader",
  args={"action": "update", "name": "MyShader", "path": "Shaders", "lines": ["// 更新后的Shader代码", "Shader \"MyShader\"", "{", "    // 新的代码内容", "}"]}
)
```

示例：删除Shader
```python
function_call(
  func="edit_shader",
  args={"action": "delete", "name": "MyShader", "path": "Shaders"}
)
```

---

### edit_texture - 纹理导入设置修改
**功能**: 修改Unity中纹理资源的导入设置，包括设置为Sprite类型、调整压缩质量等。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `texture_path` (string, 必需): 纹理资源路径（相对于Assets）
- `texture_type` (string, 可选): 纹理类型
- `sprite_mode` (string, 可选): Sprite模式
- `pixels_per_unit` (float, 可选): 每单位像素数
- `sprite_pivot` (string, 可选): Sprite轴心点
- `generate_physics_shape` (bool, 可选): 生成物理形状
- `mesh_type` (string, 可选): 网格类型
- `compression` (string, 可选): 压缩格式
- `max_texture_size` (int, 可选): 最大纹理尺寸
- `filter_mode` (string, 可选): 过滤模式
- `wrap_mode` (string, 可选): 包装模式
- `readable` (bool, 可选): 可读写
- `generate_mip_maps` (bool, 可选): 生成Mip贴图
- `srgb_texture` (bool, 可选): sRGB纹理

支持的操作 (action)
- `set_type` - 设置纹理类型
- `set_sprite_settings` - 设置Sprite详细参数
- `get_settings` - 获取当前纹理设置

纹理类型 (texture_type)
- `Default` - 默认纹理
- `NormalMap` - 法线贴图
- `Sprite` - UI Sprite
- `Cursor` - 光标
- `Cookie` - 光照Cookie
- `Lightmap` - 光照贴图
- `HDR` - HDR纹理

Sprite模式 (sprite_mode)
- `Single` - 单个Sprite
- `Multiple` - 多个Sprite
- `Polygon` - 多边形模式

轴心点 (sprite_pivot)
- `Center` - 中心点
- `TopLeft`、`TopCenter`、`TopRight` - 顶部
- `MiddleLeft`、`MiddleCenter`、`MiddleRight` - 中部
- `BottomLeft`、`BottomCenter`、`BottomRight` - 底部

示例：设置图片为Sprite类型
```python
function_call(
  func="edit_texture",
  args={"action": "set_type", "texture_path": "Assets/Pics/rabbit.jpg", "texture_type": "Sprite"}
)
```

示例：详细配置Sprite设置
```python
function_call(
  func="edit_texture",
  args={"action": "set_sprite_settings", "texture_path": "Assets/Pics/rabbit.jpg", "sprite_mode": "Single", "pixels_per_unit": 100, "sprite_pivot": "Center", "generate_physics_shape": True}
)
```

示例：获取纹理设置
```python
function_call(
  func="edit_texture",
  args={"action": "get_settings", "texture_path": "Assets/Pics/rabbit.jpg"}
)
```

示例：设置压缩和质量
```python
function_call(
  func="edit_texture",
  args={"action": "set_sprite_settings", "texture_path": "Assets/Pics/rabbit.jpg", "compression": "HighQuality", "max_texture_size": 2048, "filter_mode": "Bilinear"}
)
```

---

### edit_material - 材质编辑工具
**功能**: 专门管理Unity中的材质资源，提供材质的创建、修改、复制、删除等操作。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `path` (string, 必需): 材质资源路径，Unity标准格式：Assets/Materials/MaterialName.mat
- `shader` (string): 着色器名称或路径
- `properties` (dict): 材质属性字典，包含颜色、纹理、浮点数等属性
- `source_path` (string): 源材质路径（复制时使用）
- `destination` (string): 目标路径（复制/移动时使用）
- `search_pattern` (string): 搜索模式，如*.mat
- `recursive` (bool): 是否递归搜索子文件夹
- `force` (bool): 是否强制执行操作（覆盖现有文件等）

支持的操作 (action)
- `create` - 创建材质
- `set_properties` - 设置材质属性
- `duplicate` - 复制材质
- `get_info` - 获取材质信息
- `search` - 搜索材质
- `copy_properties` - 复制材质属性
- `change_shader` - 更改着色器
- `enable_keyword` - 启用着色器关键字
- `disable_keyword` - 禁用着色器关键字

示例：创建材质
```python
function_call(
  func="edit_material",
  args={"action": "create", "path": "Assets/Materials/NewMaterial.mat", "shader": "Standard", "properties": {"_Color": {"r": 1.0, "g": 0.0, "b": 0.0, "a": 1.0}}}
)
```

示例：设置材质属性
```python
function_call(
  func="edit_material",
  args={"action": "set_properties", "path": "Assets/Materials/MyMaterial.mat", "properties": {"_Color": {"r": 1.0, "g": 0.5, "b": 0.0, "a": 1.0}, "_Metallic": 0.5}}
)
```



示例：更改着色器
```python
function_call(
  func="edit_material",
  args={"action": "change_shader", "path": "Assets/Materials/MyMaterial.mat", "shader": "Custom/MyShader"}
)
```

示例：搜索材质
```python
function_call(
  func="edit_material",
  args={"action": "search", "search_pattern": "*.mat", "path": "Assets/Materials/"}
)
```

示例：复制材质属性
```python
function_call(
  func="edit_material",
  args={"action": "copy_properties", "source_path": "Assets/Materials/SourceMaterial.mat", "destination": "Assets/Materials/TargetMaterial.mat"}
)
```

示例：启用着色器关键字
```python
function_call(
  func="edit_material",
  args={"action": "enable_keyword", "path": "Assets/Materials/MyMaterial.mat", "keyword": "_EMISSION"}
)
```

示例：禁用着色器关键字
```python
function_call(
  func="edit_material",
  args={"action": "disable_keyword", "path": "Assets/Materials/MyMaterial.mat", "keyword": "_NORMALMAP"}
)
```

---

### edit_mesh - 网格资产管理
**功能**: 专门管理Unity中的网格资产，提供网格生成、修改、优化、细分、平滑、导入导出等操作。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `path` (string, 必需): 网格资产路径，Unity标准格式：Assets/Meshes/MeshName.asset
- `mesh_type` (string): 网格类型：cube, sphere, cylinder, plane, custom等
- `properties` (dict): 网格属性字典，包含顶点、面、UV等数据
- `source_path` (string): 源网格路径（修改时使用）
- `destination` (string): 目标路径（导出时使用）
- `subdivision_level` (int): 细分级别（细分时使用，范围1-5）
- `smooth_factor` (float): 平滑因子（平滑时使用，范围0.0-1.0）
- `optimization_level` (string): 优化级别：low, medium, high
- `export_format` (string): 导出格式：obj, asset
- `force` (bool): 是否强制执行操作（覆盖现有文件等）

支持的操作 (action)
- `create` - 创建自定义网格
- `modify` - 修改网格属性
- `optimize` - 优化网格
- `generate_primitive` - 生成基础几何体网格
- `subdivide` - 细分网格
- `smooth` - 平滑网格
- `export` - 导出网格（需要指定export_format参数）
- `import` - 导入网格（目前支持OBJ格式）
- `get_info` - 获取网格信息
- `duplicate` - 复制网格

导出格式 (export_format)
- `obj` - 导出为OBJ文件格式
- `asset` - 导出为Unity资产格式

网格属性支持 (properties)
- `vertices` - 顶点数组 [[x,y,z], [x,y,z], ...]
- `triangles` - 三角形索引数组 [0,1,2, 0,2,3, ...]
- `normals` - 法线数组 [[x,y,z], [x,y,z], ...]
- `uv` - UV坐标数组 [[u,v], [u,v], ...]
- `tangents` - 切线数组 [[x,y,z,w], [x,y,z,w], ...]

优化级别说明 (optimization_level)
- `low` - 基础优化（仅调用mesh.Optimize()）
- `medium` - 中等优化（优化+重新计算边界和法线）
- `high` - 高级优化（优化+重新计算边界、法线和切线）

示例：生成基础几何体网格
```python
function_call(
  func="edit_mesh",
  args={"action": "generate_primitive", "path": "Assets/Meshes/MyCube.asset", "mesh_type": "cube"}
)
```

示例：生成球体网格
```python
function_call(
  func="edit_mesh",
  args={"action": "generate_primitive", "path": "Assets/Meshes/MySphere.asset", "mesh_type": "sphere"}
)
```

示例：生成圆柱体网格
```python
function_call(
  func="edit_mesh",
  args={"action": "generate_primitive", "path": "Assets/Meshes/MyCylinder.asset", "mesh_type": "cylinder"}
)
```

示例：生成平面网格
```python
function_call(
  func="edit_mesh",
  args={"action": "generate_primitive", "path": "Assets/Meshes/MyPlane.asset", "mesh_type": "plane"}
)
```

示例：创建自定义网格
```python
function_call(
  func="edit_mesh",
  args={"action": "create", "path": "Assets/Meshes/CustomMesh.asset", "properties": {"vertices": [[0, 0, 0], [1, 0, 0], [0, 1, 0]], "triangles": [0, 1, 2]}}
)
```

示例：创建带UV的自定义网格
```python
function_call(
  func="edit_mesh",
  args={"action": "create", "path": "Assets/Meshes/CustomMeshWithUV.asset", "properties": {"vertices": [[0, 0, 0], [1, 0, 0], [0, 1, 0]], "triangles": [0, 1, 2], "uv": [[0, 0], [1, 0], [0, 1]}}}
)
```

示例：细分网格
```python
function_call(
  func="edit_mesh",
  args={"action": "subdivide", "path": "Assets/Meshes/MyMesh.asset", "subdivision_level": 2}
)
```

示例：平滑网格
```python
function_call(
  func="edit_mesh",
  args={"action": "smooth", "path": "Assets/Meshes/MyMesh.asset", "smooth_factor": 0.5}
)
```

示例：优化网格
```python
function_call(
  func="edit_mesh",
  args={"action": "optimize", "path": "Assets/Meshes/MyMesh.asset", "optimization_level": "high"}
)
```

示例：导出网格为OBJ格式
```python
function_call(
  func="edit_mesh",
  args={"action": "export", "export_format": "obj", "path": "Assets/Meshes/MyMesh.asset", "destination": "ExportedMesh.obj"}
)
```

示例：导出网格为Asset格式
```python
function_call(
  func="edit_mesh",
  args={"action": "export", "export_format": "asset", "path": "Assets/Meshes/MyMesh.asset", "destination": "Assets/Meshes/MyMeshCopy.asset"}
)
```

示例：导入OBJ网格
```python
function_call(
  func="edit_mesh",
  args={"action": "import", "path": "Assets/Meshes/ImportedMesh.asset", "source_path": "MyMesh.obj"}
)
```

示例：获取网格信息
```python
function_call(
  func="edit_mesh",
  args={"action": "get_info", "path": "Assets/Meshes/MyMesh.asset"}
)
```

示例：复制网格
```python
function_call(
  func="edit_mesh",
  args={"action": "duplicate", "path": "Assets/Meshes/MyMesh.asset", "destination": "Assets/Meshes/MyMeshCopy.asset"}
)
```

---

### console_read - Unity 控制台读取
**功能**: 读取或清空Unity编辑器控制台消息。

主要参数（放入 `args`）
- `action` (string): 操作类型，必需
- `types` (list): 消息类型列表，默认 ['error','warning','log']
- `count` (int): 最大返回消息数（可选，不设置则获取全部）
- `filterText` (string): 文本过滤器（可选）
- `format` (string): 输出格式，默认 `detailed`

支持的操作 (action)
- `get` - 获取控制台消息（不包含堆栈跟踪）
- `get_full` - 获取控制台消息（包含完整堆栈跟踪）
- `clear` - 清空控制台

输出格式 (format)
- `plain` - 纯文本格式
- `detailed` - 详细格式
- `json` - JSON格式

参数组合逻辑
- **count + filterText**: 获取指定数量的过滤后日志
- **count 无 filterText**: 获取指定数量的所有日志
- **无 count + filterText**: 获取所有过滤后的日志
- **无 count 无 filterText**: 获取所有日志

示例：获取最新 1 条日志（无堆栈跟踪）
```python
function_call(
  func="console_read",
  args={"action": "get", "count": 1}
)
```

示例：获取最新 5 条错误日志（包含完整堆栈跟踪）
```python
function_call(
  func="console_read",
  args={"action": "get_full", "types": ["error"], "count": 5}
)
```

示例：获取所有包含 "FunctionCall" 的日志（无堆栈跟踪）
```python
function_call(
  func="console_read",
  args={"action": "get", "filterText": "FunctionCall"}
)
```

示例：获取所有警告日志（包含堆栈跟踪）
```python
function_call(
  func="console_read",
  args={"action": "get_full", "types": ["warning"]}
)
```

示例：清空控制台
```python
function_call(
  func="console_read",
  args={"action": "clear"}
)
```

示例：获取最新 10 条包含 "Error" 的日志（包含堆栈跟踪）
```python
function_call(
  func="console_read",
  args={"action": "get_full", "count": 10, "filterText": "Error"}
)
```

---

## 🎯 使用指南

### 1) 工具选择原则
- 单次调用使用 `function_call`
- 批量调用使用 `functions_call`
- 除 `function_call`/`functions_call` 外，其余均为 Methods 名称，作为 `func` 传入

### 2) 错误处理
所有调用均返回标准格式：
```json
{
  "success": true,
  "message": "...",
  "data": { },
  "error": ""
}
```

### 3) 路径约定
- 使用Unity标准路径格式：`Assets/Folder/File.extension`
- 路径分隔符使用正斜杠 `/`
- 相对于项目根目录的Assets文件夹
- UGUI菜单按TextMeshPro的规则为准，老的一些控件已经放到Leagcy中
- 注意菜单命名间隔: GameObject/UI/Input Field (TMP)

### 4) 最佳实践
- 在执行操作前使用 `console_read` 检查错误
- 使用 `manage_editor` 获取编辑器状态
- 创建资产前确保目标文件夹存在
- 批量操作时使用 `functions_call` 提高效率
- 网络请求设置合适的超时时间，避免长时间阻塞
- 下载文件前确保目标目录存在
- 敏感API请求使用认证令牌保护
- 大文件操作时增加超时时间和重试机制

### 5) 调试建议
- 使用 `console_read` 查看Unity控制台输出
- 检查返回值中的 `success` 字段
- 查看 `message` 和 `error` 字段获取详细信息 
- 查看 `message` 和 `error` 字段获取详细信息 