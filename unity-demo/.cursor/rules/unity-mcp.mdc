---
description:
globs:
alwaysApply: true
---
# Unity MCP 工具规则 (mcp_rules)

本文档将工具按两类划分：
- Tools: `function_call`, `functions_call`（调用/批量调用 Methods）。
- Methods: `execute_menu_item`, `manage_asset`, `manage_editor`, `manage_gameobject`, `manage_scene`, `manage_script`, `read_console`（均作为 `func` 传给 Tools）。

除 `function_call` 与 `functions_call` 外，其余均为 Methods 名称，不直接调用；请通过 Tools 调用，并把方法参数放入 `args`（JSON 字符串）。

## 🗂️ 目录
- Tools
  - `function_call`
  - `functions_call`
- Methods
  - `execute_menu_item`
  - `manage_asset`
  - `manage_editor`
  - `manage_gameobject`
  - `manage_scene`
  - `manage_script`
  - `read_console`
- 使用指南

---

## 🔧 Tools

### function_call - 单次函数调用工具
**功能**: 调用一次 Unity MCP 方法。

参数
- `func` (string, 必需): 方法名（见 Methods 列表）。
- `args` (string, 必需): 传入方法的 JSON 字符串参数。

返回值格式
```json
{
  "success": true,
  "message": "...",
  "data": { },
  "error": ""
}
```

示例：创建一个 Cube
```python
function_call(
  func="manage_gameobject",
  args="{\"action\":\"create\",\"name\":\"Cube\",\"primitive_type\":\"Cube\",\"position\":[0,0,0]}"
)
```

---

### functions_call - 批量函数调用工具
**功能**: 按顺序执行多个 Unity MCP 方法调用并收集所有返回值。

参数
- `function_calls` (string): 函数调用列表 JSON 字符串。

参数格式
```json
[
  { "func": "manage_gameobject", "args": "{\"action\":\"create\",\"name\":\"Enemy\",\"primitive_type\":\"Cube\"}" },
  { "func": "manage_gameobject", "args": "{\"action\":\"add_component\",\"target\":\"Enemy\",\"component_name\":\"Rigidbody\"}" }
]
```

返回值格式
```json
{
  "success": true,
  "results": [ ... ],
  "errors": [ ... ],
  "total_calls": 2,
  "successful_calls": 2,
  "failed_calls": 0
}
```

示例：批量创建并添加组件
```python
functions_call(
  function_calls='[
    {"func":"manage_gameobject","args":"{\\"action\\":\\"create\\",\\"name\\":\\"Enemy\\",\\"primitive_type\\":\\"Cube\\"}"},
    {"func":"manage_gameobject","args":"{\\"action\\":\\"add_component\\",\\"target\\":\\"Enemy\\",\\"component_name\\":\\"Rigidbody\\"}"}
  ]'
)
```

---

## 🧩 Methods
> 通过 Tools 调用以下方法：
> - 单次：使用 `function_call`，设置 `func` 为方法名，`args` 为方法参数 JSON 字符串。
> - 批量：使用 `functions_call`，把多条 `{func, args}` 放入 `function_calls`。

### execute_menu_item - Unity编辑器菜单执行
**功能**: 执行Unity编辑器中的菜单命令。

主要参数（放入 `args`）
- `action` (string): 操作类型，默认 `execute`
- `menu_path` (string, 必需): 菜单项完整路径

示例：
```python
function_call(
  func="execute_menu_item",
  args="{\"action\":\"execute\",\"menu_path\":\"File/Save Project\"}"
)
```

常用菜单路径
- "File/Save Project" - 保存项目
- "File/Save Scenes" - 保存场景
- "GameObject/Create Empty" - 创建空GameObject
- "Assets/Reimport All" - 重新导入所有资产
- "Window/General/Console" - 打开控制台窗口

---

### manage_asset - Unity资产管理
**功能**: 执行Unity资产的各种操作，包括导入、创建、修改、删除等。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型，如 `create`/`import`/`move` 等
- `path` (string, 必需): 资产路径
- `asset_type` (string): 资产类型（创建时需要）
- `properties` (dict): 资产属性
- `destination` (string): 目标路径（移动/复制时）

示例：创建材质
```python
function_call(
  func="manage_asset",
  args="{\"action\":\"create\",\"path\":\"Assets/Materials/NewMaterial.mat\",\"asset_type\":\"Material\",\"properties\":{\"color\":[1,0,0,1]}}"
)
```

示例：创建文件夹
```python
function_call(
  func="manage_asset",
  args="{\"action\":\"create_folder\",\"path\":\"Assets/NewFolder\"}"
)
```

示例：搜索预制体
```python
function_call(
  func="manage_asset",
  args="{\"action\":\"search\",\"path\":\"Assets/\",\"search_pattern\":\"*.prefab\"}"
)
```

示例：获取资产信息
```python
function_call(
  func="manage_asset",
  args="{\"action\":\"get_info\",\"path\":\"Assets/Scripts/PlayerController.cs\"}"
)
```

---

### manage_editor - Unity编辑器状态管理
**功能**: 控制和查询Unity编辑器的状态和设置。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `wait_for_completion` (bool): 是否等待完成
- `tool_name` (string): 工具名称
- `tag_name` (string): 标签名称
- `layer_name` (string): 层名称

支持的操作 (action)
- `play` - 播放场景
- `pause` - 暂停场景
- `stop` - 停止场景
- `get_state` - 获取编辑器状态
- `set_active_tool` - 设置活动工具
- `add_tag` - 添加标签
- `add_layer` - 添加层

示例：播放场景
```python
function_call(
  func="manage_editor",
  args="{\"action\":\"play\"}"
)
```

示例：获取编辑器状态
```python
function_call(
  func="manage_editor",
  args="{\"action\":\"get_state\"}"
)
```

示例：添加标签
```python
function_call(
  func="manage_editor",
  args="{\"action\":\"add_tag\",\"tag_name\":\"Enemy\"}"
)
```

示例：设置活动工具
```python
function_call(
  func="manage_editor",
  args="{\"action\":\"set_active_tool\",\"tool_name\":\"Move Tool\"}"
)
```

---

### manage_gameobject - GameObject 管理
**功能**: 管理Unity中的GameObject，包括创建、修改、删除、查找和组件操作。

核心参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `target` (string): 目标GameObject标识符
- `name` (string): GameObject名称
- `tag` (string): 标签
- `parent` (string): 父对象
- `position` (list): 位置坐标 [x, y, z]
- `rotation` (list): 旋转 [x, y, z]
- `scale` (list): 缩放 [x, y, z]

支持的操作 (action)
- `create` - 创建GameObject
- `modify` - 修改GameObject
- `delete` - 删除GameObject
- `find` - 查找GameObject
- `add_component` - 添加组件
- `remove_component` - 移除组件
- `set_component_property` - 设置组件属性

示例：创建基础 GameObject
```python
function_call(
  func="manage_gameobject",
  args="{\"action\":\"create\",\"name\":\"Player\",\"tag\":\"Player\",\"position\":[0,1,0]}"
)
```

示例：创建并保存为预制体
```python
function_call(
  func="manage_gameobject",
  args="{\"action\":\"create\",\"name\":\"Enemy\",\"primitive_type\":\"Cube\",\"save_as_prefab\":true,\"prefab_path\":\"Assets/Prefabs/Enemy.prefab\"}"
)
```

示例：添加组件
```python
function_call(
  func="manage_gameobject",
  args="{\"action\":\"add_component\",\"target\":\"Player\",\"component_name\":\"Rigidbody\"}"
)
```

示例：修改 GameObject 属性
```python
function_call(
  func="manage_gameobject",
  args="{\"action\":\"modify\",\"target\":\"Player\",\"position\":[10,0,0],\"set_active\":true}"
)
```

示例：查找 GameObject
```python
function_call(
  func="manage_gameobject",
  args="{\"action\":\"find\",\"search_term\":\"Player\",\"find_all\":true}"
)
```

组件属性设置
```python
function_call(
  func="manage_gameobject",
  args="{\"action\":\"modify\",\"target\":\"Player\",\"component_properties\":{\"Rigidbody\":{\"mass\":10.0,\"useGravity\":true},\"MeshRenderer\":{\"material\":\"Assets/Materials/PlayerMaterial.mat\"}}}"
)
```

---

### manage_scene - 场景管理
**功能**: 管理Unity场景，包括加载、保存、创建和获取层级结构。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `name` (string, 必需): 场景名称
- `path` (string, 必需): 资产路径
- `build_index` (int, 必需): 构建索引

支持的操作 (action)
- `load` - 加载场景
- `save` - 保存场景
- `create` - 创建场景
- `get_hierarchy` - 获取场景层级

示例：创建新场景
```python
function_call(
  func="manage_scene",
  args="{\"action\":\"create\",\"name\":\"NewLevel\",\"path\":\"Assets/Scenes/\",\"build_index\":1}"
)
```

示例：加载场景
```python
function_call(
  func="manage_scene",
  args="{\"action\":\"load\",\"name\":\"MainMenu\",\"path\":\"Assets/Scenes/MainMenu.unity\",\"build_index\":0}"
)
```

示例：保存当前场景
```python
function_call(
  func="manage_scene",
  args="{\"action\":\"save\",\"name\":\"CurrentScene\",\"path\":\"Assets/Scenes/\",\"build_index\":0}"
)
```

示例：获取场景层级结构
```python
function_call(
  func="manage_scene",
  args="{\"action\":\"get_hierarchy\",\"name\":\"CurrentScene\",\"path\":\"\",\"build_index\":0}"
)
```

---

### manage_script - C#脚本管理
**功能**: 管理Unity中的C#脚本，包括创建、读取、更新和删除。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `name` (string, 必需): 脚本名称（不含.cs扩展名）
- `path` (string, 必需): 资产路径
- `contents` (string, 必需): C#代码内容
- `script_type` (string, 必需): 脚本类型
- `namespace` (string, 必需): 命名空间

支持的操作 (action)
- `create` - 创建脚本
- `read` - 读取脚本
- `update` - 更新脚本
- `delete` - 删除脚本

示例：创建 MonoBehaviour 脚本
```python
function_call(
  func="manage_script",
  args="{\"action\":\"create\",\"name\":\"PlayerController\",\"path\":\"Assets/Scripts/\",\"contents\":\"using UnityEngine;\\n\\npublic class PlayerController : MonoBehaviour { public float speed = 5f; void Update(){ float h = Input.GetAxis(\\\"Horizontal\\\"); float v = Input.GetAxis(\\\"Vertical\\\"); Vector3 movement = new Vector3(h,0,v) * speed * Time.deltaTime; transform.Translate(movement);} }\",\"script_type\":\"MonoBehaviour\",\"namespace\":\"\"}"
)
```

示例：读取现有脚本
```python
function_call(
  func="manage_script",
  args="{\"action\":\"read\",\"name\":\"PlayerController\",\"path\":\"Assets/Scripts/\"}"
)
```

示例：更新脚本内容
```python
function_call(
  func="manage_script",
  args="{\"action\":\"update\",\"name\":\"PlayerController\",\"path\":\"Assets/Scripts/\",\"contents\":\"// 更新后的代码内容\",\"script_type\":\"MonoBehaviour\",\"namespace\":\"\"}"
)
```

---

### read_console - Unity 控制台读取
**功能**: 读取或清空Unity编辑器控制台消息。

主要参数（放入 `args`）
- `action` (string): 操作类型，默认 `get`
- `types` (list): 消息类型列表，默认 ['error','warning','log']
- `count` (int): 最大返回消息数
- `filter_text` (string): 文本过滤器
- `since_timestamp` (string): 时间戳过滤器(ISO 8601)
- `format` (string): 输出格式，默认 `detailed`
- `include_stacktrace` (bool): 是否包含堆栈跟踪，默认 true

支持的操作 (action)
- `get` - 获取控制台消息
- `clear` - 清空控制台

输出格式 (format)
- `plain` - 纯文本格式
- `detailed` - 详细格式
- `json` - JSON格式

示例：获取所有类型的最新 10 条
```python
function_call(
  func="read_console",
  args="{\"action\":\"get\",\"types\":[\"error\",\"warning\",\"log\"],\"count\":10}"
)
```

示例：只获取错误并带堆栈
```python
function_call(
  func="read_console",
  args="{\"action\":\"get\",\"types\":[\"error\"],\"include_stacktrace\":true}"
)
```

示例：清空控制台
```python
function_call(
  func="read_console",
  args="{\"action\":\"clear\"}"
)
```

示例：按时间过滤并以 JSON 返回
```python
function_call(
  func="read_console",
  args="{\"action\":\"get\",\"since_timestamp\":\"2024-01-01T10:00:00Z\",\"format\":\"json\"}"
)
```

---

## 🎯 使用指南

### 1) 工具选择原则
- 单次调用使用 `function_call`
- 批量调用使用 `functions_call`
- 除 `function_call`/`functions_call` 外，其余均为 Methods 名称，作为 `func` 传入

### 2) 错误处理
所有调用均返回标准格式：
```json
{
  "success": true,
  "message": "...",
  "data": { },
  "error": ""
}
```

### 3) 路径约定
- 使用Unity标准路径格式：`Assets/Folder/File.extension`
- 路径分隔符使用正斜杠 `/`
- 相对于项目根目录的Assets文件夹

### 4) 最佳实践
- 在执行操作前使用 `read_console` 检查错误
- 使用 `manage_editor` 获取编辑器状态
- 创建资产前确保目标文件夹存在
- 批量操作时使用 `functions_call` 提高效率

### 5) 调试建议
- 使用 `read_console` 查看Unity控制台输出
- 检查返回值中的 `success` 字段
- 查看 `message` 和 `error` 字段获取详细信息 