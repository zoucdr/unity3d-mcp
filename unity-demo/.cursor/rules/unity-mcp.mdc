---
description: 当用户需要利用MCP操作Unity引擎时，请使用此规则集
alwaysApply: false
---
# Unity MCP 工具规则

> 🎮 **全面的Unity编辑器控制工具集**  
> 提供完整的GameObject管理、资源操作、UI制作、网络请求等功能

## 📋 目录索引

### 🔧 核心工具 (FacadeTools)
- [function_call](#function_call---单次函数调用工具) - 单次函数调用
- [functions_call](#functions_call---批量函数调用工具) - 批量函数调用

### 🧩 功能模块 (MethodTools)
**🏗️ 层级管理**
- [hierarchy_create](#hierarchy_create---层级对象创建工具) - GameObject创建
- [hierarchy_apply](#hierarchy_apply---层级预制体链接工具) - 预制体链接管理  
- [hierarchy_search](#hierarchy_search---层级对象搜索工具) - 层级搜索

**⚙️ 对象编辑**  
- [edit_gameobject](#edit_gameobject---gameobject编辑工具) - GameObject编辑
- [edit_component](#edit_component---组件属性操作管理) - 组件属性管理
- [object_delete](#object_delete---unityengineobject删除工具) - 对象删除(支持确认)

**🎨 资源管理**
- [edit_material](#edit_material---材质编辑工具) - 材质编辑
- [edit_mesh](#edit_mesh---网格资产管理) - 网格资产管理  
- [edit_prefab](#edit_prefab---预制体管理) - 预制体管理
- [edit_scene](#edit_scene---场景管理) - 场景管理
- [project_operate](#project_operate---unity项目资产管理) - 项目资产操作（选择、定位、依赖分析）
- [project_search](#project_search---unity项目资产搜索) - 项目资产搜索

**📦 包管理**
- [manage_package](#manage_package---unity包管理工具) - Unity包管理器操作

**💻 开发工具**
- [edit_script](#edit_script---c脚本管理) - C#脚本管理
- [edit_shader](#edit_shader---shader管理) - Shader管理
- [code_runner](#code_runner---c代码运行工具) - C#代码运行
- [python_runner](#python_runner---python代码执行工具) - Python代码执行
- [console_read](#console_read---unity-控制台读取) - 控制台读取
- [console_write](#console_write---unity-控制台写入) - 控制台写入

**🌐 网络功能**
- [request_http](#request_http---网络资源管理) - HTTP请求

**🎯 界面设计**  
- [ugui_layout](#ugui_layout---ugui布局管理工具) - UGUI布局管理
- [ui_rule_manage](#ui_rule_manage---ui规则配置管理) - UI制作规则文件管理
- [figma_manage](#figma_manage---figma管理工具) - Figma设计文件管理

**🛠️ 系统管理**
- [manage_editor](#manage_editor---unity编辑器状态管理) - 编辑器状态管理

---

## 🔄 工具架构

### 双层调用架构
```
用户 → FacadeTools → MethodTools → Unity API
```

**FacadeTools** (2个)
- `function_call` - 单次方法调用
- `functions_call` - 批量方法调用

**MethodTools** (20+个)  
专门的功能方法，仅通过FacadeTools调用，参数通过`args`字典传递。

> ⚠️ **重要提醒**: 除`function_call`和`functions_call`外，其余均为方法名，不能直接被MCP调用。

---

## 🔧 FacadeTools

### function_call - 单次函数调用工具
**功能**: 调用一次 Unity MCP 方法。

参数
- `func` (string, 必需): 方法名（见 Methods 列表）。
- `args` (dict, 必需): 传入方法的参数字典。

返回值格式
```json
{
  "success": true,
  "message": "...",
  "data": { },
  "error": ""
}
```

示例：创建一个 Cube
```python
function_call(
  func="hierarchy_create",
  args={"from": "primitive", "primitive_type": "Cube", "name": "Cube", "position": [0, 0, 0]}
)
```

---
### functions_call - 批量函数调用工具
**功能**: 按顺序执行多个 Unity MCP 方法调用并收集所有返回值。

参数
- `funcs` (list): 函数调用列表。

参数格式
```python
[
  { "func": "hierarchy_create", "args": {"from": "primitive", "primitive_type": "Cube", "name": "Enemy"} },
  { "func": "edit_gameobject", "args": {"path": "Enemy", "action": "add_component", "component_type": "Rigidbody"} }
]
```

返回值格式
```json
{
  "success": true,
  "results": [ ... ],
  "errors": [ ... ],
  "total_calls": 2,
  "successful_calls": 2,
  "failed_calls": 0
}
```

示例：批量创建并添加组件
```python
functions_call(
  funcs=[
    {"func": "hierarchy_create", "args": {"from": "primitive", "primitive_type": "Cube", "name": "Enemy"}},
    {"func": "edit_gameobject", "args": {"path": "Enemy", "action": "add_component", "component_type": "Rigidbody"}}
  ]
)
```

---

## 🧩 MethodTools
> 通过 FacadeTools： 调用以下方法：
> - 单次：使用 `function_call`，设置 `func` 为方法名，`args` 为方法参数字典。
> - 批量：使用 `functions_call`，把多条 `{func, args}` 放入 `function_calls`。

### gm_command - GM指令执行工具
**功能**: 执行游戏管理员(GM)相关指令，用于游戏开发和调试。

主要参数（放入 `args`）
- `action` (string): 操作类型，默认执行主要功能

支持的操作 (action)
- 默认操作 - 执行GM指令并返回测试响应

示例：执行默认GM指令
```python
function_call(
  func="gm_command",
  args={"action": "default"}
)
```

返回值格式
```json
{
  "success": true,
  "message": "Test",
  "data": {}
}
```

注意：此工具当前处于测试阶段，主要用于验证GM指令系统的基础功能。

---

### hierarchy_create - 层级对象创建工具
**功能**: 在Unity场景层级中创建GameObject对象，支持从基元、预制体和菜单项创建。

主要参数（放入 `args`）
- `from` (string, 必需): 操作类型，支持 `menu`、`primitive`、`prefab`
- `name` (string, 可选): GameObject名称
- `tag` (string, 可选): GameObject标签
- `layer` (string, 可选): GameObject所在层
- `parent_id` (string, 可选): 父对象instance_id或路径
- `position` (list, 可选): 位置坐标 [x, y, z]
- `rotation` (list, 可选): 旋转角度 [x, y, z]
- `scale` (list, 可选): 缩放比例 [x, y, z]
- `primitive_type` (string, 可选): 基元类型，支持 `Cube`、`Sphere`、`Cylinder`、`Capsule`、`Plane`、`Quad`
- `prefab_path` (string, 可选): 预制体路径
- `menu_path` (string, 可选): 菜单路径
- `save_as_prefab` (bool, 可选): 是否保存为预制体
- `active` (bool, 可选): 设置激活状态
- `components` (list, 可选): 要添加的组件列表

支持的创建类型 (from)
- `primitive` - 从基元类型创建（Cube、Sphere等）
- `prefab` - 从预制体实例化
- `menu` - 通过Unity菜单项创建

示例：创建基础立方体
```python
function_call(
  func="hierarchy_create",
  args={"from": "primitive", "primitive_type": "Cube", "name": "MyCube", "position": [0, 1, 0], "tag": "Interactable"}
)
```

示例：从预制体创建
```python
function_call(
  func="hierarchy_create",
  args={"from": "prefab", "prefab_path": "Assets/Prefabs/Enemy.prefab", "name": "Enemy01", "position": [5, 0, 0]}
)
```

示例：创建球体并保存为预制体
```python
function_call(
  func="hierarchy_create",
  args={"from": "primitive", "primitive_type": "Sphere", "name": "PlayerBall", "save_as_prefab": True, "prefab_path": "Assets/Prefabs/PlayerBall.prefab"}
)
```

示例：通过菜单创建对象
```python
function_call(
  func="hierarchy_create",
  args={"from": "menu", "menu_path": "GameObject/Light/Directional Light", "name": "MainLight"}
)
```

示例：通过菜单创建Image
```python
function_call(
  func="hierarchy_create",
  args={"from": "menu", "menu_path": "GameObject/UI/Image", "name": "HeadIcon","properties": {"Image": {"sprite": "Assets/Sprites/HeadIcon.png"}}"}
)
```


示例：创建带父对象的圆柱体
```python
function_call(
  func="hierarchy_create",
  args={"from": "primitive", "primitive_type": "Cylinder", "name": "Pillar", "parent_path": "Environment/Group1", "position": [10, 0, 10], "scale": [2, 5, 2]}
)
```
---

### hierarchy_apply - 层级预制体链接工具
**功能**: 管理GameObject与预制体的连接关系，包括连接、应用更改和断开连接。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型，固定为 `apply`
- `target_object` (string, 必需): 目标GameObject标识符（ID、名称或路径）
- `prefab_path` (string, 可选): 预制体路径
- `apply_type` (string, 可选): 链接类型，支持 `connect_to_prefab`、`apply_prefab_changes`、`break_prefab_connection`
- `force_apply` (bool, 可选): 是否强制创建链接（覆盖现有连接）

支持的链接类型 (apply_type)
- `connect_to_prefab` - 连接GameObject到预制体（默认）
- `apply_prefab_changes` - 应用预制体实例的更改到预制体资源
- `break_prefab_connection` - 断开预制体连接

示例：连接GameObject到预制体
```python
function_call(
  func="hierarchy_apply",
  args={"action": "apply", "target_object": "Player", "prefab_path": "Assets/Prefabs/Player.prefab", "apply_type": "connect_to_prefab"}
)
```

示例：强制连接（覆盖现有连接）
```python
function_call(
  func="hierarchy_apply",
  args={"action": "apply", "target_object": "Enemy", "prefab_path": "Assets/Prefabs/NewEnemy.prefab", "force_apply": True}
)
```

示例：应用预制体实例的更改
```python
function_call(
  func="hierarchy_apply",
  args={"action": "apply", "target_object": "PlayerInstance", "apply_type": "apply_prefab_changes"}
)
```

示例：断开预制体连接
```python
function_call(
  func="hierarchy_apply",
  args={"action": "apply", "target_object": "Enemy", "apply_type": "break_prefab_connection"}
)
```

---

### hierarchy_search - 层级对象搜索工具
**功能**: 在Unity场景层级中搜索和查找GameObject对象，支持多种搜索方式，包括通配符和正则表达式。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型，固定为 `find`
- `search_type` (string, 必需): 搜索方法，支持 `by_name`、`by_id`、`by_tag`、`by_layer`、`by_component`、`by_query`等
- `query` (string, 必需): 搜索目标（可以是ID、名称或路径；支持通配符*）
- `select_many` (bool, 可选): 是否查找所有匹配项，默认false
- `root_only` (bool, 可选): 是否仅搜索根对象（不包括子物体），默认false（包括所有层级）
- `include_inactive` (bool, 可选): 是否搜索非激活对象，默认false
- `use_regex` (bool, 可选): 是否使用正则表达式，默认false

支持的搜索方法 (search_type)
- `by_name` - 按名称搜索
- `by_id` - 按ID搜索
- `by_tag` - 按标签搜索
- `by_layer` - 按层级搜索
- `by_component` - 按组件类型搜索
- `by_query` - 通用术语搜索（搜索名称、标签、层级、组件类型等，支持通配符*、正则表达式和类型前缀）

通配符支持 (query)
- `*` - 匹配任意字符，如 `Player*` 匹配以Player开头的所有对象
- `*Cube*` - 匹配包含Cube的所有对象
- `Test*Object` - 匹配以Test开头、以Object结尾的对象

示例：按名称查找GameObject
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "query": "Player", "search_type": "by_name"}
)
```

示例：查找所有带特定标签的对象
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_type": "by_tag", "query": "Enemy", "select_many": True}
)
```

示例：按ID查找特定对象
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "query": "12345", "search_type": "by_id"}
)
```

示例：查找包含特定组件的对象
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_type": "by_component", "query": "Rigidbody", "select_many": True, "include_inactive": True}
)
```

示例：在特定层级查找对象
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_type": "by_layer", "query": "Default", "select_many": True}
)
```

示例：通用术语搜索（搜索包含"Player"的所有对象，包括子物体）
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_type": "by_query", "query": "Player", "select_many": True}
)
```

示例：仅搜索根对象（不包括子物体）
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_type": "by_query", "query": "Player", "select_many": True, "root_only": True}
)
```

示例：使用通配符搜索（搜索所有以"Player"开头的对象）
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_type": "by_query", "query": "Player*", "select_many": True}
)
```

示例：使用通配符搜索（搜索所有包含"Cube"的对象）
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_type": "by_query", "query": "*Cube*", "select_many": True}
)
```

示例：使用正则表达式搜索（搜索所有以"Test"开头的对象）
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_type": "by_query", "query": "^Test", "use_regex": True, "select_many": True}
)
```

示例：按类型搜索（搜索所有包含MeshRenderer组件的对象）
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_type": "by_query", "query": "t:MeshRenderer", "select_many": True}
)
```

示例：搜索场景中所有物体
```python
function_call(
  func="hierarchy_search",
  args={"action": "find", "search_type": "by_query", "query": "*", "select_many": True}
)
```

---

### edit_asset - Unity资产管理
**功能**: 执行Unity资产的各种操作，包括导入、修改、移动、复制等。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型，如 `import`/`modify`/`move`/`duplicate` 等
- `path` (string, 必需): 资产路径
- `properties` (dict): 资产属性
- `destination` (string): 目标路径（移动/复制时）

支持的操作 (action)
- `import` - 重新导入资产
- `modify` - 修改现有资产
- `duplicate` - 复制资产
- `move` - 移动/重命名资产
- `rename` - 移动/重命名资产（与move相同）
- `search` - 搜索资产
- `get_info` - 获取资产信息
- `create_folder` - 创建文件夹

示例：创建文件夹
```python
function_call(
  func="edit_asset",
  args={"action": "create_folder", "path": "Assets/NewFolder"}
)
```

示例：搜索预制体
```python
function_call(
  func="edit_asset",
  args={"action": "search", "path": "Assets/", "query": "*.prefab"}
)
```

示例：获取资产信息
```python
function_call(
  func="edit_asset",
  args={"action": "get_info", "path": "Assets/Scripts/PlayerController.cs"}
)
```

示例：复制资产
```python
function_call(
  func="edit_asset",
  args={"action": "duplicate", "path": "Assets/Materials/RedMaterial.mat", "destination": "Assets/Materials/RedMaterialCopy.mat"}
)
```

示例：移动/重命名资产
```python
function_call(
  func="edit_asset",
  args={"action": "move", "path": "Assets/Scripts/OldName.cs", "destination": "Assets/Scripts/NewName.cs"}
)
```

示例：设置材质属性
```python
function_call(
  func="edit_material",
  args={"action": "set_properties", "path": "Assets/Materials/MyMaterial.mat", "properties": {"_Color": {"r": 1.0, "g": 0.5, "b": 0.0, "a": 1.0}}}
)
```

---

### edit_component - 组件属性操作管理
**功能**: 专门处理Unity GameObject组件的属性操作，支持批量获取和设置组件属性。使用双状态树架构进行目标定位和属性操作。

主要参数（放入 `args`）
- `id` (string, 可选): 对象的InstanceID
- `path` (string, 可选): 对象的Hierarchy路径
- `action` (string, 必需): 操作类型，支持 `get_component_propertys`、`set_component_propertys`
- `component_type` (string, 必需): 组件类型名（继承自Component的类型名），如 "Transform"、"Rigidbody"、"MeshRenderer"
- `properties` (dict, 可选): 属性字典（用于set_component_propertys操作,值甚至支持路径或InstanceId）

支持的操作类型 (action)
- **get_component_propertys**: 批量获取组件的所有公共属性和字段
- **set_component_propertys**: 批量设置组件的多个属性

**目标定位支持**
- 通过 `id` 参数使用InstanceID精确定位
- 通过 `path` 参数使用Hierarchy路径定位
- 支持HierarchySelector的所有查找方式

示例：获取Transform组件的所有属性
```python
function_call(
  func="edit_component",
  args={"action": "get_component_propertys", "instance_id": "12345", "component_type": "Transform"}
)
```

示例：获取Rigidbody组件的所有属性
```python
function_call(
  func="edit_component",
  args={"action": "get_component_propertys", "path": "Player", "component_type": "Rigidbody"}
)
```

示例：批量设置Transform组件属性
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys", 
    "path": "Player", 
    "component_type": "Transform",
    "properties": {
      "localPosition": [0, 1, 0],
      "localRotation": [0, 45, 0, 1],
      "localScale": [2, 2, 2]
    }
  }
)
```

示例：批量设置Rigidbody组件属性
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "Player",
    "component_type": "Rigidbody", 
    "properties": {
      "mass": 2.5,
      "useGravity": True,
      "drag": 0.5,
      "angularDrag": 0.1,
      "isKinematic": False
    }
  }
)
```

示例：设置Material Shader属性
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "Cube", 
    "component_type": "MeshRenderer",
    "properties": {
      "sharedMaterial._Color": [1.0, 0.0, 0.0, 1.0],
      "sharedMaterial._Metallic": 0.8,
      "sharedMaterial._Smoothness": 0.9
    }
  }
)
```

示例：设置材质颜色（嵌套属性访问）
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "Cube", 
    "component_type": "Renderer",
    "properties": {
      "sharedMaterial.color": [1.0, 0.0, 0.0, 1.0]
    }
  }
)
```

示例：设置材质数组元素属性（数组访问）
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "MultiMaterialCube", 
    "component_type": "Renderer",
    "properties": {
      "sharedMaterials[0].color": [1.0, 0.0, 0.0, 1.0],
      "sharedMaterials[1].color": [0.0, 1.0, 0.0, 1.0]
    }
  }
)
```

示例：设置Unity Object引用（资产路径）
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "Cube", 
    "component_type": "Renderer",
    "properties": {
      "sharedMaterial": "Assets/Materials/RedMaterial.mat",
      "sharedMaterial._MainTex": "Assets/Textures/brick.jpg"
    }
  }
)
```

示例：设置Unity InstanceId引用（唯一id）
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "Cube", 
    "component_type": "Renderer",
    "properties": {
      "sharedMaterial": -45550,
      "sharedMaterial._MainTex": -36970
    }
  }
)
```

示例：设置Camera组件属性
```python
function_call(
  func="edit_component",
  args={
    "action": "set_component_propertys",
    "path": "Camera", 
    "component_type": "Camera",
    "properties": {
      "targetTexture": "Assets/RenderTextures/CameraOutput.renderTexture",
      "fieldOfView": 60.0,
      "nearClipPlane": 0.3,
      "farClipPlane": 1000.0
    }
  }
)
```

返回值格式 (get_component_propertys)
```json
{
  "success": true,
  "message": "Retrieved 15 properties from component 'Transform' on 'Player'.",
  "data": {
    "component_type": "UnityEngine.Transform",
    "properties": {
      "position": {"x": 0, "y": 0, "z": 0},
      "rotation": {"x": 0, "y": 0, "z": 0, "w": 1},
      "localScale": {"x": 1, "y": 1, "z": 1},
      "localPosition": {"x": 0, "y": 0, "z": 0}
    }
  }
}
```

返回值格式 (set_component_propertys)
```json
{
  "success": true,
  "message": "Set 3 of 3 properties on component 'Transform' on 'Player'.",
  "data": {
    "component_type": "Transform",
    "total_properties": 3,
    "successful_properties": 3,
    "failed_properties": 0,
    "results": {
      "localPosition": "Success",
      "localRotation": "Success", 
      "localScale": "Success"
    }
  }
}
```

特点
- **批量属性操作**: 一次调用可以获取或设置组件的多个属性
- **智能类型转换**: 支持Unity常用数据类型（Vector3、Quaternion、Color等）的自动转换
- **详细结果反馈**: 提供每个属性操作的详细结果和错误信息
- **材质Shader属性支持**: 直接支持设置材质的Shader属性（以_开头的属性）
- **嵌套属性访问**: 支持通过点号访问嵌套属性，如 "sharedMaterial._Color"
- **撤销支持**: 所有操作都支持Unity的撤销功能
- **错误容错**: 单个属性操作失败不会影响其他属性的处理

---

### manage_editor - Unity编辑器状态管理
**功能**: 控制和查询Unity编辑器的状态和设置，包括播放模式控制、工具管理、标签层级管理等。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `wait_for_completion` (bool, 可选): 是否等待操作完成
- `toolName` (string, 可选): 工具名称（设置活动工具时使用）
- `tagName` (string, 可选): 标签名称（标签操作时使用）
- `layerName` (string, 可选): 层名称（层级操作时使用）
- `menu_path` (string, 可选): 菜单路径（执行菜单时使用）

支持的操作 (action)

**播放模式控制**
- `play` - 进入播放模式
- `pause` - 暂停/恢复播放模式
- `stop` - 停止播放模式

**编辑器状态/信息**
- `get_state` - 获取编辑器状态
- `get_windows` - 获取编辑器窗口
- `get_active_tool` - 获取当前活动工具
- `get_selection` - 获取当前选择对象
- `set_active_tool` - 设置活动工具

**标签管理**
- `add_tag` - 添加标签
- `remove_tag` - 移除标签  
- `get_tags` - 获取标签列表

**层级管理**
- `add_layer` - 添加层
- `remove_layer` - 移除层
- `get_layers` - 获取层列表

**菜单管理**
- `execute_menu` - 执行Unity菜单项

示例：播放场景
```python
function_call(
  func="manage_editor",
  args={"action": "play"}
)
```

示例：暂停/恢复场景
```python
function_call(
  func="manage_editor",
  args={"action": "pause"}
)
```

示例：获取编辑器状态
```python
function_call(
  func="manage_editor",
  args={"action": "get_state"}
)
```

示例：获取编辑器窗口
```python
function_call(
  func="manage_editor",
  args={"action": "get_windows"}
)
```

示例：设置活动工具
```python
function_call(
  func="manage_editor",
  args={"action": "set_active_tool", "toolName": "Move"}
)
```

示例：获取当前选择
```python
function_call(
  func="manage_editor",
  args={"action": "get_selection"}
)
```

示例：添加标签
```python
function_call(
  func="manage_editor",
  args={"action": "add_tag", "tagName": "Enemy"}
)
```

示例：移除标签
```python
function_call(
  func="manage_editor",
  args={"action": "remove_tag", "tagName": "Enemy"}
)
```

示例：获取所有标签
```python
function_call(
  func="manage_editor",
  args={"action": "get_tags"}
)
```

示例：添加层
```python
function_call(
  func="manage_editor",
  args={"action": "add_layer", "layerName": "Environment"}
)
```

示例：移除层
```python
function_call(
  func="manage_editor",
  args={"action": "remove_layer", "layerName": "Environment"}
)
```

示例：获取所有层
```python
function_call(
  func="manage_editor",
  args={"action": "get_layers"}
)
```

示例：执行菜单项
```python
function_call(
  func="manage_editor",
  args={"action": "execute_menu", "menu_path": "Window/General/TestRunner"}
)
```

---

### edit_gameobject - GameObject编辑工具
**功能**: 使用双状态树架构处理GameObject修改操作，支持目标定位和多种操作，包括修改属性、组件管理和高级属性设置。

主要参数（放入 `args`）
- `id` (string, 必需): 目标GameObject的InstanceID
- `path` (string, 可选): 目标GameObject的Hierarchy路径
- `select_many` (bool, 可选): 是否选择所有匹配的对象进行批量操作（默认false）
- `action` (string, 可选): 操作类型，支持 `create`、`modify`、`get_components`、`add_component`、`remove_component`、`set_property`、`get_property`

**基本修改参数**
- `name` (string, 可选): GameObject名称
- `tag` (string, 可选): GameObject标签
- `layer` (string, 可选): GameObject所在层
- `parent_id` (string, 可选): 父对象实例id
- `parent_path` (string, 可选): 父对象场景路径
- `position` (list, 可选): 位置坐标 [x, y, z]
- `rotation` (list, 可选): 旋转角度 [x, y, z]
- `scale` (list, 可选): 缩放比例 [x, y, z]
- `active` (bool, 可选): 设置激活状态

**组件操作参数**
- `component_type` (string, 可选): 组件名称
- `components` (list, 可选): 要添加的组件列表，支持字符串或对象格式
- `components_to_remove` (list, 可选): 要移除的组件列表
- `component_properties` (dict, 可选): 组件属性字典，支持嵌套属性和数组访问

**属性操作参数**
- `property_name` (string, 可选): 属性名称（用于属性设置/获取）
- `value` (any, 可选): 要设置的属性值

**批量操作参数**
- `select_many` (bool, 可选): 是否对所有匹配的对象进行批量操作

支持的操作类型 (action)
- `create` - 创建新GameObject（委托给hierarchy_create）
- `modify` - 修改GameObject基本属性（默认操作）
- `get_components` - 获取GameObject上的所有组件
- `add_component` - 添加组件到GameObject
- `remove_component` - 从GameObject移除组件
- `set_property` - 设置GameObject属性（通用属性操作）
- `get_property` - 获取GameObject属性

**注意**: 组件属性设置功能已移动到 `edit_component` 方法，请使用 `edit_component` 的 `set_component_propertys` 操作来设置组件属性。

示例：修改GameObject基本属性（默认操作）
```python
function_call(
  func="edit_gameobject",
  args={"instance_id": "12345", "name": "MainPlayer", "position": [0, 1, 0], "active": true}
)
```

示例：通过路径修改GameObject
```python
function_call(
  func="edit_gameobject",
  args={"path": "Player", "name": "MainPlayer", "position": [0, 1, 0], "active": true}
)
```

示例：获取GameObject组件列表
```python
function_call(
  func="edit_gameobject",
  args={"instance_id": "12345", "action": "get_components"}
)
```

**组件操作示例:**

示例：添加单个组件
```python
function_call(
  func="edit_gameobject",
  args={"path": "Player", "action": "add_component", "component_type": "Rigidbody"}
)
```

示例：批量添加多个组件（字符串格式）
```python
function_call(
  func="edit_gameobject",
  args={"path": "Player", "action": "add_component", "components": ["Rigidbody", "BoxCollider", "AudioSource"]}
)
```

示例：添加组件并立即设置属性
```python
function_call(
  func="edit_gameobject",
  args={
    "path": "Player", 
    "action": "add_component", 
    "component_type": "Rigidbody",
    "component_properties": {"mass": 2.5, "useGravity": true, "drag": 0.1}
  }
)
```

示例：添加组件（对象格式，支持初始属性）
```python
function_call(
  func="edit_gameobject",
  args={
    "path": "Player", 
    "action": "add_component", 
    "components": [
      {"typeName": "Rigidbody", "properties": {"mass": 2.5, "useGravity": true}},
      {"typeName": "BoxCollider", "properties": {"isTrigger": false, "size": [1, 1, 1]}}
    ]
  }
)
```

示例：移除单个组件
```python
function_call(
  func="edit_gameobject",
  args={"path": "Player", "action": "remove_component", "component_type": "Collider"}
)
```

示例：批量移除多个组件
```python
function_call(
  func="edit_gameobject",
  args={"path": "Player", "action": "remove_component", "components_to_remove": ["Rigidbody", "BoxCollider"]}
)
```

**注意**: 组件属性设置示例已移动到 `edit_component` 部分，请参考该部分的详细示例。

**批量操作示例:**

示例：使用InstanceID批量修改（需要ObjectSelector支持）
```python
function_call(
  func="edit_gameobject",
  args={
    "instance_id": "12345", 
    "select_many": true,
    "position": [0, 0, 0], 
    "active": false
  }
)
```

示例：通过路径批量操作
```python
function_call(
  func="edit_gameobject",
  args={
    "path": "Enemies/*", 
    "select_many": true,
    "action": "add_component",
    "component_type": "Rigidbody",
    "component_properties": {"mass": 1.0, "useGravity": true}
  }
)
```

**属性操作示例:**

示例：设置GameObject属性
```python
function_call(
  func="edit_gameobject",
  args={"path": "Player", "action": "set_property", "property_name": "tag", "value": "Player"}
)
```

示例：获取GameObject属性
```python
function_call(
  func="edit_gameobject",
  args={"instance_id": "12345", "action": "get_property", "property_name": "activeSelf"}
)
```

特殊功能
- **双状态树架构**: 第一树负责目标定位，第二树负责操作执行，提供更强大的处理能力
- **批量操作支持**: 通过 `select_many` 参数可以对多个匹配对象进行批量操作
- **智能类型转换**: 自动处理Unity对象引用、Vector3、Color、Quaternion等类型
- **嵌套属性支持**: 支持通过点号访问嵌套属性，如 "sharedMaterial.color"、"sharedMaterial._MainTex"
- **数组索引支持**: 支持访问数组元素，如 "materials[0].color"、"materials[1]._Color"
- **材质Shader属性**: 直接支持设置材质的Shader属性（以_开头的属性），包括颜色、浮点数、纹理等
- **组件属性批量设置**: 通过component_properties字典可一次设置多个属性
- **复杂引用处理**: 支持通过查找条件设置Unity Object引用，包括GameObject、Component、Asset等
- **标签自动创建**: 如果指定的标签不存在，会自动创建
- **组件动态查找**: 支持通过类名在所有程序集中查找组件类型
- **撤销支持**: 所有操作都支持Unity的撤销功能
- **错误恢复**: 批量操作时单个对象失败不会影响其他对象的处理
- **属性验证**: 自动验证属性类型和可访问性，避免运行时错误

---

### object_delete - UnityEngine.Object删除工具
**功能**: 使用双状态树架构和协程处理GameObject删除操作，支持交互式用户确认。第一个状态树负责目标定位（IObjectSelector），第二个状态树根据确认参数决定删除行为，提供安全的单对象和批量删除功能。

主要参数（放入 `args`）

**目标定位参数**
- `path` (string, 可选): UnityEngine.Object的Hierarchy路径或资源文件路径，支持通配符和模式匹配
- `instance_id` (string, 可选): UnityEngine.Object的InstanceID

**确认参数**  
- `confirm` (bool, 可选): 确认删除行为控制
  - `true`: 总是显示确认对话框，适用于需要明确确认的场景
  - `false` 或未设置: 智能确认模式
    - ≤3个对象: 直接删除，无需用户确认
    - >3个对象: 显示确认对话框
    - >删除资源文件: 显示确认对话框

**确认行为说明**
- **confirm=true路径**: 使用协程显示`EditorUtility.DisplayDialog`确认对话框，等待用户选择
- **confirm=false/未设置路径**: 智能判断对象数量，少量对象直接删除，大量对象显示确认对话框
- **用户取消**: 返回成功响应但标记为`cancelled: true`，不执行删除操作
- **用户确认**: 执行删除并返回详细的删除统计信息

**目标定位支持**
- **路径匹配**: 支持精确路径、通配符、层级路径等多种匹配方式
- **批量选择**: 自动支持多对象选择和批量删除
- **智能查找**: 通过IObjectSelector提供强大的对象查找能力

示例：删除单个GameObject（智能确认）
```python
function_call(
  func="object_delete",
  args={"path": "Player"}
)
```

示例：删除多个GameObject（强制确认）
```python
function_call(
  func="object_delete", 
  args={"path": "Enemy*", "confirm": true}
)
```

示例：通过InstanceID删除
```python
function_call(
  func="object_delete",
  args={"instance_id": "12345"}
)
```

示例：批量删除（智能确认模式）
```python
function_call(
  func="object_delete",
  args={"path": "DebugObjects/*"}
)
```

返回值格式（成功删除）
```json
{
  "success": true,
  "message": "5 GameObjects deleted successfully.",
  "data": {
    "deleted_count": 5,
    "total_count": 5, 
    "success_rate": 1.0,
    "deleted_objects": [
      {"name": "Enemy1", "instanceID": 12345},
      {"name": "Enemy2", "instanceID": 12346}
    ]
  }
}
```

返回值格式（用户取消）
```json
{
  "success": true,
  "message": "Deletion cancelled by user. 5 GameObject(s) were not deleted.",
  "data": {
    "cancelled": true,
    "target_count": 5
  }
}
```

返回值格式（部分失败）
```json
{
  "success": true,
  "message": "Deleted 3 of 5 GameObjects. 2 failed.",
  "data": {
    "deleted_count": 3,
    "total_count": 5,
    "success_rate": 0.6,
    "deleted_objects": [...],
    "errors": ["Failed to delete 'LockedObject': Access denied"]
  }
}
```

特殊功能
- **双状态树架构**: 目标定位和确认逻辑分离，架构清晰
- **协程交互**: 使用协程和`EditorUtility.DisplayDialog`实现真正的用户交互
- **智能确认**: 根据对象数量智能决定是否需要用户确认
- **批量安全删除**: 支持大量对象的安全批量删除操作
- **详细统计**: 提供删除成功率、失败信息等详细统计数据
- **撤销支持**: 使用`Undo.DestroyObjectImmediate`支持Unity撤销功能
- **错误容忍**: 单个对象删除失败不影响其他对象的处理
- **用户友好**: 显示具体的对象名称和数量，让用户明确了解删除内容
- **预制体识别**: 自动识别和处理预制体实例
- **取消恢复**: 用户可以随时取消删除操作，提供安全退出机制

---

### ugui_layout - UGUI布局管理工具
**功能**: 使用双状态树架构处理RectTransform修改操作，专门用于UGUI的布局调整。第一个状态树负责目标GameObject定位，第二个状态树负责RectTransform属性操作。

主要参数（放入 `args`）

**目标定位参数**
- `id` (string, 可选): 对象的InstanceID
- `path` (string, 可选): 对象的Hierarchy路径
- `select_many` (bool, 可选): 是否选择所有匹配的对象进行批量操作（默认false）

**操作类型参数**
- `action` (string, 可选): 操作类型，支持 `do_layout`、`get_layout`（默认为do_layout）

**RectTransform基本属性**
- `anchored_pos` (list, 可选): 锚点位置 [x, y]
- `size_delta` (list, 可选): 尺寸增量 [width, height]
- `anchor_min` (list, 可选): 最小锚点 [x, y]
- `anchor_max` (list, 可选): 最大锚点 [x, y]
- `pivot` (list, 可选): 轴心点 [x, y]

**Transform继承属性**
- `local_position` (list, 可选): 本地位置 [x, y, z]
- `local_rotation` (list, 可选): 本地旋转 [x, y, z]
- `local_scale` (list, 可选): 本地缩放 [x, y, z]



**预设锚点类型**
- `anchor_preset` (string, 可选): 锚点预设，支持：
  - `top_left`, `top_center`, `top_right`
  - `middle_left`, `middle_center`, `middle_right`
  - `bottom_left`, `bottom_center`, `bottom_right`
  - `stretch_horizontal`, `stretch_vertical`, `stretch_all`

**属性操作参数**
- `property_name` (string, 可选): 属性名称（用于属性设置/获取操作）
- `value` (any, 可选): 要设置的属性值

支持的操作类型 (action)
- `do_layout` - 执行布局修改操作，可通过property_name+value设置特定属性，或直接传递各种属性参数（默认操作）
- `get_layout` - 获取RectTransform属性信息，可指定property_name获取特定属性，否则获取所有属性

示例：执行布局修改（默认操作）
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/Button", "size_delta": [200, 50], "anchored_pos": [0, 0]}
)
```

示例：使用锚点位置参数
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/Panel", "size_delta": [300, 200], "anchored_pos": [100, 50], "pivot": [0.5, 0.5]}
)
```

示例：设置UI元素的锚点位置
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/TitleText", "anchored_pos": [0, 100], "size_delta": [400, 60]}
)
```

示例：通过InstanceID定位并执行布局修改
```python
function_call(
  func="ugui_layout",
  args={"id": "12345", "action": "do_layout", "size_delta": [150, 40]}
)
```

示例：设置锚点预设
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/Panel", "action": "do_layout", "anchor_preset": "stretch_all"}
)
```



示例：批量设置多个UI元素的尺寸
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/Button", "select_many": true, "action": "do_layout", "size_delta": [150, 40]}
)
```

示例：获取所有布局属性
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/Button", "action": "get_layout"}
)
```

示例：获取特定布局属性
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/Button", "action": "get_layout", "property_name": "anchoredPosition"}
)
```

示例：设置锚点拉伸
```python
function_call(
  func="ugui_layout",
  args={
    "path": "Canvas/InfoPanel", 
    "anchor_min": [0, 0], 
    "anchor_max": [1, 0.3]
  }
)
```

示例：设置特定RectTransform属性
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/ScrollView", "action": "do_layout", "property_name": "anchoredPosition", "value": [100, 50]}
)
```

示例：获取特定RectTransform属性
```python
function_call(
  func="ugui_layout",
  args={"path": "Canvas/ScrollView", "action": "get_layout", "property_name": "anchoredPosition"}
)
```

示例：设置复杂的UI布局组合
```python
function_call(
  func="ugui_layout",
  args={
    "path": "Canvas/LoginPanel",
    "anchor_preset": "middle_center",
    "width": 400,
    "height": 300,
    "local_position": [0, 0, 0]
  }
)
```

返回值格式
```json
{
  "success": true,
  "message": "RectTransform on 'Button' modified successfully.",
  "data": {
    "name": "Button",
    "instanceID": 12345,
    "anchoredPosition": {"x": 0, "y": 0},
    "sizeDelta": {"x": 200, "y": 50},
    "anchorMin": {"x": 0.5, "y": 0.5},
    "anchorMax": {"x": 0.5, "y": 0.5},
    "pivot": {"x": 0.5, "y": 0.5},
    "rect": {"x": -100, "y": -25, "width": 200, "height": 50}
  }
}
```

特点
- **双状态树架构**: 先通过ObjectSelector定位目标GameObject，再执行RectTransform操作，确保操作精确性
- **UI专用**: 专门针对UGUI的RectTransform组件设计，包含所有UI布局相关功能
- **多种定位方式**: 支持InstanceID、Hierarchy路径等多种目标定位方式
- **布局预设**: 支持常用的锚点预设，快速设置UI布局模式
- **核心参数**: 提供RectTransform核心属性，精确控制UI布局
- **批量操作**: 支持select_many参数进行批量UI布局调整，提高批量处理效率
- **智能类型转换**: 自动处理Vector2、Vector3等Unity数据类型转换
- **撤销支持**: 所有操作都支持Unity的撤销功能，便于调试和修改
- **详细返回数据**: 返回完整的RectTransform状态信息，便于验证操作结果
- **灵活的操作模式**: do_layout执行布局修改、get_layout获取布局信息，满足不同场景需求

---


### edit_prefab - 预制体管理
**功能**: 专门管理Unity中的预制体资源，提供预制体的创建、修改、复制、实例化等操作。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `path` (string, 必需): 预制体资源路径，Unity标准格式：Assets/Prefabs/PrefabName.prefab
- `source_object` (string, 可选): 源GameObject名称或路径（创建时使用）
- `destination` (string, 可选): 目标路径（复制时使用）
- `query` (string, 可选): 搜索模式，如*.prefab
- `recursive` (bool, 可选): 是否递归搜索子文件夹
- `force` (bool, 可选): 是否强制执行操作（覆盖现有文件等）
- `prefab_variant` (bool, 可选): 是否创建预制体变体
- `unpack_mode` (string, 可选): 解包模式：Completely, OutermostRoot
- `pack_mode` (string, 可选): 打包模式：Default, ReuseExisting
- `connect_to_prefab` (bool, 可选): 是否连接到预制体
- `apply_prefab_changes` (bool, 可选): 是否应用预制体更改
- `revert_prefab_changes` (bool, 可选): 是否还原预制体更改
- `break_prefab_connection` (bool, 可选): 是否断开预制体连接
- `prefab_type` (string, 可选): 预制体类型：Regular, Variant
- `parent_prefab` (string, 可选): 父预制体路径（变体时使用）
- `scene_path` (string, 可选): 场景路径（实例化时使用）
- `position` (list, 可选): 位置坐标 [x, y, z]
- `rotation` (list, 可选): 旋转角度 [x, y, z]
- `scale` (list, 可选): 缩放比例 [x, y, z]
- `parent_path` (string, 可选): 父对象名称或路径

支持的操作 (action)
- `create` - 创建预制体
- `modify` - 修改预制体
- `duplicate` - 复制预制体
- `get_info` - 获取预制体信息
- `search` - 搜索预制体
- `instantiate` - 实例化预制体
- `unpack` - 解包预制体
- `pack` - 打包预制体
- `create_variant` - 创建预制体变体
- `connect_to_prefab` - 连接到预制体
- `apply_changes` - 应用预制体更改
- `revert_changes` - 还原预制体更改
- `break_connection` - 断开预制体连接

示例：创建预制体
```python
function_call(
  func="edit_prefab",
  args={"action": "create", "path": "Assets/Prefabs/NewPrefab.prefab", "source_object": "Player"}
)
```

示例：复制预制体
```python
function_call(
  func="edit_prefab",
  args={"action": "duplicate", "path": "Assets/Prefabs/Player.prefab", "destination": "Assets/Prefabs/PlayerCopy.prefab"}
)
```

示例：实例化预制体
```python
function_call(
  func="edit_prefab",
  args={"action": "instantiate", "path": "Assets/Prefabs/Enemy.prefab", "position": [0, 0, 0], "rotation": [0, 0, 0], "scale": [1, 1, 1]}
)
```

示例：搜索预制体
```python
function_call(
  func="edit_prefab",
  args={"action": "search", "query": "*.prefab", "path": "Assets/Prefabs/"}
)
```

示例：创建预制体变体
```python
function_call(
  func="edit_prefab",
  args={"action": "create_variant", "path": "Assets/Prefabs/EnemyVariant.prefab", "parent_prefab": "Assets/Prefabs/Enemy.prefab"}
)
```

示例：应用预制体更改
```python
function_call(
  func="edit_prefab",
  args={"action": "apply_changes", "path": "Assets/Prefabs/Player.prefab", "target_object": "PlayerInstance"}
)
```

---

### request_http - 网络资源管理
**功能**: 执行网络请求和文件下载上传操作，支持HTTP/HTTPS协议。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `url` (string, 必需): 请求URL地址
- `data` (object): 请求数据（POST/PUT时使用，JSON格式）
- `headers` (object): 请求头字典
- `save_path` (string): 保存路径（下载时使用）
- `file_path` (string): 文件路径（上传时使用）
- `timeout` (int): 超时时间（秒），默认300秒
- `content_type` (string): 内容类型，默认application/json
- `auth_token` (string): Bearer认证令牌
- `basic_auth` (string): 基础认证（username:password）
- `query_params` (object): URL查询参数
- `form_data` (object): 表单数据
- `retry_count` (int): 重试次数，默认0
- `retry_delay` (float): 重试延迟（秒），默认1

支持的操作 (action)
- `get` - HTTP GET请求
- `post` - HTTP POST请求
- `put` - HTTP PUT请求
- `delete` - HTTP DELETE请求
- `download` - 下载文件到本地
- `upload` - 上传本地文件
- `ping` - 连通性测试

示例：GET请求获取数据
```python
function_call(
  func="request_http",
  args={"action": "get", "url": "https://api.github.com/repos/microsoft/vscode", "timeout": 30}
)
```

示例：POST请求发送数据
```python
function_call(
  func="request_http",
  args={"action": "post", "url": "https://httpbin.org/post", "data": {"message": "Hello from Unity", "timestamp": "2024-01-01T12:00:00Z"}, "content_type": "application/json"}
)
```

示例：下载文件
```python
function_call(
  func="request_http",
  args={"action": "download", "url": "https://httpbin.org/image/png", "save_path": "Assets/Downloaded/test_image.png", "timeout": 60}
)
```

示例：带认证的请求
```python
function_call(
  func="request_http",
  args={"action": "get", "url": "https://api.example.com/data", "auth_token": "your_bearer_token_here", "headers": {"User-Agent": "Unity-MCP/1.0"}}
)
```

示例：上传文件
```python
function_call(
  func="request_http",
  args={"action": "upload", "url": "https://httpbin.org/post", "file_path": "Assets/Screenshots/screenshot.png", "form_data": {"description": "Unity screenshot"}}
)
```

示例：Ping测试连通性
```python
function_call(
  func="request_http",
  args={"action": "ping", "url": "https://httpbin.org/status/200", "timeout": 10}
)
```

示例：带查询参数的GET请求
```python
function_call(
  func="request_http",
  args={"action": "get", "url": "https://httpbin.org/get", "query_params": {"param1": "value1", "param2": "value2"}}
)
```

示例：带重试机制的请求
```python
function_call(
  func="request_http",
  args={"action": "get", "url": "https://httpbin.org/status/500", "retry_count": 3, "retry_delay": 1.5}
)
```

---

### edit_scene - 场景管理
**功能**: 管理Unity场景，包括加载、保存、创建和获取层级结构。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `name` (string, 必需): 场景名称
- `path` (string, 必需): 资产路径
- `build_index` (int, 必需): 构建索引

支持的操作 (action)
- `load` - 加载场景
- `save` - 保存场景
- `create` - 创建场景
- `get_hierarchy` - 获取场景层级

示例：创建新场景
```python
function_call(
  func="edit_scene",
  args={"action": "create", "name": "NewLevel", "path": "Assets/Scenes/", "build_index": 1}
)
```

示例：加载场景
```python
function_call(
  func="edit_scene",
  args={"action": "load", "name": "MainMenu", "path": "Assets/Scenes/MainMenu.unity", "build_index": 0}
)
```

示例：保存当前场景
```python
function_call(
  func="edit_scene",
  args={"action": "save", "name": "CurrentScene", "path": "Assets/Scenes/", "build_index": 0}
)
```

示例：获取场景层级结构
```python
function_call(
  func="edit_scene",
  args={"action": "get_hierarchy", "name": "CurrentScene", "path": "", "build_index": 0}
)
```

---

### edit_script - C#脚本管理
**功能**: 管理Unity中的C#脚本，包括创建、读取、更新和删除。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `name` (string, 必需): 脚本名称（不含.cs扩展名）
- `path` (string, 必需): 资产路径
- `lines` (array, 可选): C#代码内容（字符串数组，每行一个元素）
- `script_type` (string, 可选): 脚本类型
- `namespace` (string, 可选): 命名空间

支持的操作 (action)
- `create` - 创建脚本
- `read` - 读取脚本
- `update` - 更新脚本
- `delete` - 删除脚本

示例：创建 MonoBehaviour 脚本
```python
function_call(
  func="edit_script",
  args={"action": "create", "name": "PlayerController", "path": "Assets/Scripts/", "lines": ["using UnityEngine;", "", "public class PlayerController : MonoBehaviour", "{", "    public float speed = 5f;", "", "    void Update()", "    {", "        float h = Input.GetAxis(\"Horizontal\");", "        float v = Input.GetAxis(\"Vertical\");", "        Vector3 movement = new Vector3(h, 0, v) * speed * Time.deltaTime;", "        transform.Translate(movement);", "    }", "}"], "script_type": "MonoBehaviour", "namespace": ""}
)
```

示例：读取现有脚本
```python
function_call(
  func="edit_script",
  args={"action": "read", "name": "PlayerController", "path": "Assets/Scripts/"}
)
```

示例：更新脚本内容
```python
function_call(
  func="edit_script",
  args={"action": "update", "name": "PlayerController", "path": "Assets/Scripts/", "lines": ["// 更新后的代码内容", "using UnityEngine;", "", "public class PlayerController : MonoBehaviour", "{", "    // 新的代码内容", "}"], "script_type": "MonoBehaviour", "namespace": ""}
)
```

---

### edit_scriptableobject - ScriptableObject管理
**功能**: 专门管理Unity中的ScriptableObject资产，提供创建、修改、复制、搜索等操作。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `path` (string, 必需): ScriptableObject资产路径，Unity标准格式：Assets/Folder/AssetName.asset
- `script_class` (string): ScriptableObject脚本类名（创建时需要）
- `properties` (dict): 资产属性字典，用于设置ScriptableObject的各种属性
- `destination` (string): 目标路径（复制时使用）
- `query` (string): 搜索模式，如*.asset
- `recursive` (bool): 是否递归搜索子文件夹
- `force` (bool): 是否强制执行操作（覆盖现有文件等）

支持的操作 (action)
- `create` - 创建ScriptableObject
- `modify` - 修改ScriptableObject
- `duplicate` - 复制ScriptableObject
- `search` - 搜索ScriptableObject
- `get_info` - 获取ScriptableObject信息

示例：创建ScriptableObject
```python
function_call(
  func="edit_scriptableobject",
  args={"action": "create", "path": "Assets/Data/GameSettings.asset", "script_class": "GameSettings", "properties": {"playerSpeed": 5.0, "maxHealth": 100}}
)
```

示例：修改ScriptableObject
```python
function_call(
  func="edit_scriptableobject",
  args={"action": "modify", "path": "Assets/Data/GameSettings.asset", "properties": {"playerSpeed": 7.0, "maxHealth": 150}}
)
```

示例：复制ScriptableObject
```python
function_call(
  func="edit_scriptableobject",
  args={"action": "duplicate", "path": "Assets/Data/GameSettings.asset", "destination": "Assets/Data/GameSettingsCopy.asset"}
)
```

示例：搜索ScriptableObject
```python
function_call(
  func="edit_scriptableobject",
  args={"action": "search", "query": "*.asset", "path": "Assets/Data/"}
)
```

示例：获取ScriptableObject信息
```python
function_call(
  func="edit_scriptableobject",
  args={"action": "get_info", "path": "Assets/Data/GameSettings.asset"}
)
```

---

### edit_shader - Shader管理
**功能**: 管理Unity中的Shader文件，包括创建、读取、更新和删除。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `name` (string, 必需): Shader名称（不含.shader扩展名）
- `path` (string, 可选): 资产路径（相对于Assets），默认为Shaders
- `lines` (array, 可选): Shader代码内容（字符串数组，每行一个元素）

支持的操作 (action)
- `create` - 创建Shader
- `read` - 读取Shader
- `update` - 更新Shader
- `delete` - 删除Shader

示例：创建基础Shader
```python
function_call(
  func="edit_shader",
  args={"action": "create", "name": "MyShader", "path": "Shaders"}
)
```

示例：创建带自定义内容的Shader
```python
function_call(
  func="edit_shader",
  args={"action": "create", "name": "ColorShader", "path": "Shaders", "lines": ["Shader \"ColorShader\"", "{", "    Properties", "    {", "        _Color (\"Color\", Color) = (1,0,0,1)", "    }", "    SubShader", "    {", "        Tags { \"RenderType\"=\"Opaque\" }", "        Pass", "        {", "            Color [_Color]", "        }", "    }", "}"]}
)
```

示例：读取Shader
```python
function_call(
  func="edit_shader",
  args={"action": "read", "name": "MyShader", "path": "Shaders"}
)
```

示例：更新Shader内容
```python
function_call(
  func="edit_shader",
  args={"action": "update", "name": "MyShader", "path": "Shaders", "lines": ["// 更新后的Shader代码", "Shader \"MyShader\"", "{", "    // 新的代码内容", "}"]}
)
```

示例：删除Shader
```python
function_call(
  func="edit_shader",
  args={"action": "delete", "name": "MyShader", "path": "Shaders"}
)
```

---

### edit_texture - 纹理导入设置修改
**功能**: 修改Unity中纹理资源的导入设置，包括设置为Sprite类型、调整压缩质量等。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `texture_path` (string, 必需): 纹理资源路径（相对于Assets）
- `texture_type` (string, 可选): 纹理类型
- `sprite_mode` (string, 可选): Sprite模式
- `pixels_per_unit` (float, 可选): 每单位像素数
- `sprite_pivot` (string, 可选): Sprite轴心点
- `generate_physics_shape` (bool, 可选): 生成物理形状
- `mesh_type` (string, 可选): 网格类型
- `compression` (string, 可选): 压缩格式
- `max_texture_size` (int, 可选): 最大纹理尺寸
- `filter_mode` (string, 可选): 过滤模式
- `wrap_mode` (string, 可选): 包装模式
- `readable` (bool, 可选): 可读写
- `generate_mip_maps` (bool, 可选): 生成Mip贴图
- `srgb_texture` (bool, 可选): sRGB纹理

支持的操作 (action)
- `set_type` - 设置纹理类型
- `set_sprite_settings` - 设置Sprite详细参数
- `get_settings` - 获取当前纹理设置

纹理类型 (texture_type)
- `Default` - 默认纹理
- `NormalMap` - 法线贴图
- `Sprite` - UI Sprite
- `Cursor` - 光标
- `Cookie` - 光照Cookie
- `Lightmap` - 光照贴图
- `HDR` - HDR纹理

Sprite模式 (sprite_mode)
- `Single` - 单个Sprite
- `Multiple` - 多个Sprite
- `Polygon` - 多边形模式

轴心点 (sprite_pivot)
- `Center` - 中心点
- `TopLeft`、`TopCenter`、`TopRight` - 顶部
- `MiddleLeft`、`MiddleCenter`、`MiddleRight` - 中部
- `BottomLeft`、`BottomCenter`、`BottomRight` - 底部

示例：设置图片为Sprite类型
```python
function_call(
  func="edit_texture",
  args={"action": "set_type", "texture_path": "Assets/Pics/rabbit.jpg", "texture_type": "Sprite"}
)
```

示例：详细配置Sprite设置
```python
function_call(
  func="edit_texture",
  args={"action": "set_sprite_settings", "texture_path": "Assets/Pics/rabbit.jpg", "sprite_mode": "Single", "pixels_per_unit": 100, "sprite_pivot": "Center", "generate_physics_shape": True}
)
```

示例：获取纹理设置
```python
function_call(
  func="edit_texture",
  args={"action": "get_settings", "texture_path": "Assets/Pics/rabbit.jpg"}
)
```

示例：设置压缩和质量
```python
function_call(
  func="edit_texture",
  args={"action": "set_sprite_settings", "texture_path": "Assets/Pics/rabbit.jpg", "compression": "HighQuality", "max_texture_size": 2048, "filter_mode": "Bilinear"}
)
```

---

### edit_material - 材质编辑工具
**功能**: 专门管理Unity中的材质资源，提供材质的创建、修改、复制、删除等操作。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `path` (string, 必需): 材质资源路径，Unity标准格式：Assets/Materials/MaterialName.mat
- `shader` (string): 着色器名称或路径
- `properties` (dict): 材质属性字典，包含颜色、纹理、浮点数等属性
- `source_path` (string): 源材质路径（复制时使用）
- `destination` (string): 目标路径（复制/移动时使用）
- `query` (string): 搜索模式，如*.mat
- `recursive` (bool): 是否递归搜索子文件夹
- `force` (bool): 是否强制执行操作（覆盖现有文件等）

支持的操作 (action)
- `create` - 创建材质
- `set_properties` - 设置材质属性
- `duplicate` - 复制材质
- `get_info` - 获取材质信息
- `search` - 搜索材质
- `copy_properties` - 复制材质属性
- `change_shader` - 更改着色器
- `enable_keyword` - 启用着色器关键字
- `disable_keyword` - 禁用着色器关键字

示例：创建材质
```python
function_call(
  func="edit_material",
  args={"action": "create", "path": "Assets/Materials/NewMaterial.mat", "shader": "Standard", "properties": {"_Color": {"r": 1.0, "g": 0.0, "b": 0.0, "a": 1.0}}}
)
```

示例：设置材质属性
```python
function_call(
  func="edit_material",
  args={"action": "set_properties", "path": "Assets/Materials/MyMaterial.mat", "properties": {"_Color": {"r": 1.0, "g": 0.5, "b": 0.0, "a": 1.0}, "_Metallic": 0.5}}
)
```



示例：更改着色器
```python
function_call(
  func="edit_material",
  args={"action": "change_shader", "path": "Assets/Materials/MyMaterial.mat", "shader": "Custom/MyShader"}
)
```

示例：搜索材质
```python
function_call(
  func="edit_material",
  args={"action": "search", "query": "*.mat", "path": "Assets/Materials/"}
)
```

示例：复制材质属性
```python
function_call(
  func="edit_material",
  args={"action": "copy_properties", "source_path": "Assets/Materials/SourceMaterial.mat", "destination": "Assets/Materials/TargetMaterial.mat"}
)
```

示例：启用着色器关键字
```python
function_call(
  func="edit_material",
  args={"action": "enable_keyword", "path": "Assets/Materials/MyMaterial.mat", "keyword": "_EMISSION"}
)
```

示例：禁用着色器关键字
```python
function_call(
  func="edit_material",
  args={"action": "disable_keyword", "path": "Assets/Materials/MyMaterial.mat", "keyword": "_NORMALMAP"}
)
```

---

### edit_mesh - 网格资产管理
**功能**: 专门管理Unity中的网格资产，提供网格生成、修改、优化、细分、平滑、导入导出等操作。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `path` (string, 必需): 网格资产路径，Unity标准格式：Assets/Meshes/MeshName.asset
- `mesh_type` (string): 网格类型：cube, sphere, cylinder, plane, custom等
- `properties` (dict): 网格属性字典，包含顶点、面、UV等数据
- `source_path` (string): 源网格路径（修改时使用）
- `destination` (string): 目标路径（导出时使用）
- `subdivision_level` (int): 细分级别（细分时使用，范围1-5）
- `smooth_factor` (float): 平滑因子（平滑时使用，范围0.0-1.0）
- `optimization_level` (string): 优化级别：low, medium, high
- `export_format` (string): 导出格式：obj, asset
- `force` (bool): 是否强制执行操作（覆盖现有文件等）

支持的操作 (action)
- `create` - 创建自定义网格
- `modify` - 修改网格属性
- `optimize` - 优化网格
- `generate_primitive` - 生成基础几何体网格
- `subdivide` - 细分网格
- `smooth` - 平滑网格
- `export` - 导出网格（需要指定export_format参数）
- `import` - 导入网格（目前支持OBJ格式）
- `get_info` - 获取网格信息
- `duplicate` - 复制网格

导出格式 (export_format)
- `obj` - 导出为OBJ文件格式
- `asset` - 导出为Unity资产格式

网格属性支持 (properties)
- `vertices` - 顶点数组 [[x,y,z], [x,y,z], ...]
- `triangles` - 三角形索引数组 [0,1,2, 0,2,3, ...]
- `normals` - 法线数组 [[x,y,z], [x,y,z], ...]
- `uv` - UV坐标数组 [[u,v], [u,v], ...]
- `tangents` - 切线数组 [[x,y,z,w], [x,y,z,w], ...]

优化级别说明 (optimization_level)
- `low` - 基础优化（仅调用mesh.Optimize()）
- `medium` - 中等优化（优化+重新计算边界和法线）
- `high` - 高级优化（优化+重新计算边界、法线和切线）

示例：生成基础几何体网格
```python
function_call(
  func="edit_mesh",
  args={"action": "generate_primitive", "path": "Assets/Meshes/MyCube.asset", "mesh_type": "cube"}
)
```

示例：生成球体网格
```python
function_call(
  func="edit_mesh",
  args={"action": "generate_primitive", "path": "Assets/Meshes/MySphere.asset", "mesh_type": "sphere"}
)
```

示例：生成圆柱体网格
```python
function_call(
  func="edit_mesh",
  args={"action": "generate_primitive", "path": "Assets/Meshes/MyCylinder.asset", "mesh_type": "cylinder"}
)
```

示例：生成平面网格
```python
function_call(
  func="edit_mesh",
  args={"action": "generate_primitive", "path": "Assets/Meshes/MyPlane.asset", "mesh_type": "plane"}
)
```

示例：创建自定义网格
```python
function_call(
  func="edit_mesh",
  args={"action": "create", "path": "Assets/Meshes/CustomMesh.asset", "properties": {"vertices": [[0, 0, 0], [1, 0, 0], [0, 1, 0]], "triangles": [0, 1, 2]}}
)
```

示例：创建带UV的自定义网格
```python
function_call(
  func="edit_mesh",
  args={"action": "create", "path": "Assets/Meshes/CustomMeshWithUV.asset", "properties": {"vertices": [[0, 0, 0], [1, 0, 0], [0, 1, 0]], "triangles": [0, 1, 2], "uv": [[0, 0], [1, 0], [0, 1]}}}
)
```

示例：细分网格
```python
function_call(
  func="edit_mesh",
  args={"action": "subdivide", "path": "Assets/Meshes/MyMesh.asset", "subdivision_level": 2}
)
```

示例：平滑网格
```python
function_call(
  func="edit_mesh",
  args={"action": "smooth", "path": "Assets/Meshes/MyMesh.asset", "smooth_factor": 0.5}
)
```

示例：优化网格
```python
function_call(
  func="edit_mesh",
  args={"action": "optimize", "path": "Assets/Meshes/MyMesh.asset", "optimization_level": "high"}
)
```

示例：导出网格为OBJ格式
```python
function_call(
  func="edit_mesh",
  args={"action": "export", "export_format": "obj", "path": "Assets/Meshes/MyMesh.asset", "destination": "ExportedMesh.obj"}
)
```

示例：导出网格为Asset格式
```python
function_call(
  func="edit_mesh",
  args={"action": "export", "export_format": "asset", "path": "Assets/Meshes/MyMesh.asset", "destination": "Assets/Meshes/MyMeshCopy.asset"}
)
```

示例：导入OBJ网格
```python
function_call(
  func="edit_mesh",
  args={"action": "import", "path": "Assets/Meshes/ImportedMesh.asset", "source_path": "MyMesh.obj"}
)
```

示例：获取网格信息
```python
function_call(
  func="edit_mesh",
  args={"action": "get_info", "path": "Assets/Meshes/MyMesh.asset"}
)
```

示例：复制网格
```python
function_call(
  func="edit_mesh",
  args={"action": "duplicate", "path": "Assets/Meshes/MyMesh.asset", "destination": "Assets/Meshes/MyMeshCopy.asset"}
)
```

---

### console_read - Unity 控制台读取
**功能**: 读取或清空Unity编辑器控制台消息。

主要参数（放入 `args`）
- `action` (string): 操作类型，必需
- `types` (list): 消息类型列表，默认 ['error','warning','log']
- `count` (int): 最大返回消息数（可选，不设置则获取全部）
- `filterText` (string): 文本过滤器（可选）
- `format` (string): 输出格式，默认 `detailed`

支持的操作 (action)
- `get` - 获取控制台消息（不包含堆栈跟踪）
- `get_full` - 获取控制台消息（包含完整堆栈跟踪）
- `clear` - 清空控制台

输出格式 (format)
- `plain` - 纯文本格式
- `detailed` - 详细格式
- `json` - JSON格式

参数组合逻辑
- **count + filterText**: 获取指定数量的过滤后日志
- **count 无 filterText**: 获取指定数量的所有日志
- **无 count + filterText**: 获取所有过滤后的日志
- **无 count 无 filterText**: 获取所有日志

示例：获取最新 1 条日志（无堆栈跟踪）
```python
function_call(
  func="console_read",
  args={"action": "get", "count": 1}
)
```

示例：获取最新 5 条错误日志（包含完整堆栈跟踪）
```python
function_call(
  func="console_read",
  args={"action": "get_full", "types": ["error"], "count": 5}
)
```

示例：获取所有包含 "FunctionCall" 的日志（无堆栈跟踪）
```python
function_call(
  func="console_read",
  args={"action": "get", "filterText": "FunctionCall"}
)
```

示例：获取所有警告日志（包含堆栈跟踪）
```python
function_call(
  func="console_read",
  args={"action": "get_full", "types": ["warning"]}
)
```

示例：清空控制台
```python
function_call(
  func="console_read",
  args={"action": "clear"}
)
```

示例：获取最新 10 条包含 "Error" 的日志（包含堆栈跟踪）
```python
function_call(
  func="console_read",
  args={"action": "get_full", "count": 10, "filterText": "Error"}
)
```

---

### console_write - Unity 控制台写入
**功能**: 向Unity编辑器控制台写入不同类型的日志消息，包括错误、警告、普通日志、断言和异常信息。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型，支持 `error`、`warning`、`log`、`assert`、`exception`
- `message` (string, 必需): 要写入的日志消息内容
- `tag` (string, 可选): 日志标签，用于分类和过滤，可选
- `context` (string, 可选): 上下文对象名称，用于在控制台中定位相关GameObject，可选
- `condition` (string, 可选): 断言条件表达式（仅用于assert类型），可选

支持的操作 (action)
- `error` - 写入错误日志（Debug.LogError）
- `warning` - 写入警告日志（Debug.LogWarning）
- `log` - 写入普通日志（Debug.Log）
- `assert` - 写入断言日志（Debug.LogAssertion）
- `exception` - 写入异常日志（Debug.LogException）

返回值格式
```json
{
  "success": true,
  "message": "Log written successfully: [tag][TYPE] message",
  "error": ""
}
```

示例：写入错误日志
```python
function_call(
  func="console_write",
  args={"action": "error", "message": "GameObject not found!", "tag": "GameLogic"}
)
```

示例：写入警告日志（带上下文）
```python
function_call(
  func="console_write",
  args={"action": "warning", "message": "Performance issue detected", "tag": "Performance", "context": "Player"}
)
```

示例：写入普通日志
```python
function_call(
  func="console_write",
  args={"action": "log", "message": "太极阵法创建完成", "tag": "TaijiArray"}
)
```

示例：写入断言日志
```python
function_call(
  func="console_write",
  args={"action": "assert", "message": "Health should be positive", "condition": "health > 0", "tag": "PlayerStats"}
)
```

示例：写入异常日志
```python
function_call(
  func="console_write",
  args={"action": "exception", "message": "Critical system failure", "tag": "SystemCore", "context": "GameManager"}
)
```

---

### project_operate - Unity项目资产管理
**功能**: 专门处理Unity项目中的资产管理操作，支持资产导入、修改、移动、复制、选择、定位、依赖分析等功能，提供全面的项目管理支持。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型，支持 `import`、`refresh`、`modify`、`duplicate`、`move`、`rename`、`get_info`、`create_folder`、`select`、`ping`、`select_depends`、`select_usage`
- `path` (string, 必需): 资产路径，Unity标准格式：Assets/Folder/File.extension
- `properties` (dict, 可选): 资产属性字典，用于设置资产的各种属性
- `destination` (string, 可选): 目标路径（移动/复制时使用）
- `force` (bool, 可选): 是否强制执行操作（覆盖现有文件等）
- `refresh_type` (string, 可选): 刷新类型：all(全部)、assets(仅资产)、scripts(仅脚本)，默认all
- `save_before_refresh` (bool, 可选): 刷新前是否保存所有资产，默认true
- `include_indirect` (bool, 可选): 是否包含间接依赖/引用，默认false
- `max_results` (int, 可选): 最大结果数量，默认100

支持的操作 (action)
**📁 基础资产操作**
- `import` - 重新导入资产
- `refresh` - 刷新项目资产数据库
- `modify` - 修改资产属性
- `duplicate` - 复制资产
- `move` - 移动/重命名资产
- `rename` - 移动/重命名资产（与move相同）
- `get_info` - 获取资产信息
- `create_folder` - 创建文件夹

**🎯 选择和定位操作**
- `select` - 选中指定路径的资源（在Inspector中显示）
- `ping` - 在Project窗口中定位并高亮显示资源

**🔗 依赖关系分析**
- `select_depends` - 选择指定资源的所有依赖项（支持间接依赖）
- `select_usage` - 查询并选择引用指定资源的所有资源
  - ⚡ **高性能优化**: 使用双重查找策略（Unity内置API + 智能过滤）
  - 🎯 **智能过滤**: 仅查找常见资源类型（Scene、Prefab、Material等）
  - 📊 **结果限制**: 支持max_results参数避免性能问题
  - ⏱️ **性能监控**: 返回搜索耗时统计

示例：创建文件夹
```python
function_call(
  func="project_operate",
  args={"action": "create_folder", "path": "Assets/ScriptableObjects"}
)
```

示例：重新导入资产
```python
function_call(
  func="project_operate",
  args={"action": "import", "path": "Assets/Textures/icon.png"}
)
```

示例：修改ScriptableObject属性
```python
function_call(
  func="project_operate",
  args={"action": "modify", "path": "Assets/Data/GameSettings.asset", "properties": {"playerSpeed": 7.0, "maxHealth": 150}}
)
```

示例：复制资产
```python
function_call(
  func="project_operate",
  args={"action": "duplicate", "path": "Assets/Materials/RedMaterial.mat", "destination": "Assets/Materials/RedMaterialCopy.mat"}
)
```

示例：移动/重命名资产
```python
function_call(
  func="project_operate",
  args={"action": "move", "path": "Assets/Scripts/OldName.cs", "destination": "Assets/Scripts/NewName.cs"}
)
```

示例：刷新项目
```python
function_call(
  func="project_operate",
  args={"action": "refresh", "refresh_type": "all", "save_before_refresh": true}
)
```

示例：获取资产信息
```python
function_call(
  func="project_operate",
  args={"action": "get_info", "path": "Assets/Scripts/PlayerController.cs", "generate_preview": true}
)
```

示例：选中资源
```python
function_call(
  func="project_operate",
  args={"action": "select", "path": "Assets/Materials/PlayerMaterial.mat"}
)
```

示例：定位资源
```python
function_call(
  func="project_operate",
  args={"action": "ping", "path": "Assets/Prefabs/Enemy.prefab"}
)
```

示例：选择依赖项（包含间接依赖）
```python
function_call(
  func="project_operate",
  args={"action": "select_depends", "path": "Assets/Scenes/MainScene.unity", "include_indirect": true}
)
```

示例：查询资源引用（限制结果数量）
```python
function_call(
  func="project_operate",
  args={"action": "select_usage", "path": "Assets/Textures/PlayerTexture.png", "max_results": 50}
)
```

**性能优化对比 (select_usage)**
| 项目规模 | 优化前 | 优化后 | 提升倍数 |
|----------|--------|--------|----------|
| 小项目 (<1000 资源) | 2-5秒 | 50-100ms | **20-100x** |
| 中项目 (1000-5000 资源) | 10-30秒 | 200-500ms | **20-150x** |
| 大项目 (5000+ 资源) | 30-120秒 | 500-2000ms | **15-240x** |

> 💡 **优化原理**: 从"遍历所有资源"改为"智能类型过滤 + 结果限制"

---

### project_search - Unity项目资产搜索
**功能**: 专门处理Unity项目窗口中的资产搜索操作，支持按类型、关键词、路径等多种条件进行精确搜索，提供强大的项目资产查找功能。

主要参数（放入 `args`）
- `search_target` (string, 必需): 搜索类型，支持 `asset`、`folder`、`script`、`texture`、`material`、`prefab`、`scene`、`audio`、`model`、`shader`、`animation`、`general`
- `query` (string, 必需): 搜索关键词
- `directory` (string, 可选): 搜索路径（相对于Assets），默认为整个Assets目录
- `file_extension` (string, 可选): 文件扩展名过滤
- `recursive` (bool, 可选): 是否递归搜索子文件夹，默认true
- `case_sensitive` (bool, 可选): 是否区分大小写，默认false
- `max_results` (int, 可选): 最大返回结果数，默认100
- `include_meta` (bool, 可选): 是否包含.meta文件，默认false

支持的搜索类型 (search_target)
- `asset` - 搜索所有类型的资产
- `folder` - 搜索文件夹
- `script` - 搜索脚本文件(.cs, .js, .boo)
- `texture` - 搜索纹理文件(.png, .jpg, .jpeg, .tga, .tiff, .bmp, .psd, .exr)
- `material` - 搜索材质文件(.mat)
- `prefab` - 搜索预制体文件(.prefab)
- `scene` - 搜索场景文件(.unity)
- `audio` - 搜索音频文件(.mp3, .wav, .ogg, .aiff, .aif)
- `model` - 搜索3D模型文件(.fbx, .obj, .dae, .3ds, .dxf, .skp, .blend, .max, .c4d, .ma, .mb)
- `shader` - 搜索Shader文件(.shader, .cginc, .hlsl)
- `animation` - 搜索动画文件(.anim, .controller, .playable)
- `general` - 通用搜索

返回值格式
```json
{
  "success": true,
  "message": "Found X asset(s) matching 'query' in 'path'",
  "data": {
    "query": "搜索关键词",
    "directory": "搜索路径",
    "search_target": "搜索类型",
    "total_results": 5,
    "max_results": 100,
    "results": [
      {
        "name": "资产名称",
        "path": "Assets/路径/文件.ext",
        "guid": "资产GUID",
        "type": "资产类型",
        "instanceID": 12345,
        "fileSize": 1024,
        "lastModified": "2024-01-01 12:00:00",
        // 根据资产类型包含特定属性：
        // 纹理: width, height, format
        // 材质: shader
        // 预制体: prefabType
        // 场景: sceneName
        // 音频: length, frequency, channels
        // 模型: vertexCount, triangleCount
        // ScriptableObject: scriptableObjectType
      }
    ]
  }
}
```

示例：搜索所有脚本文件
```python
function_call(
  func="project_search",
  args={"search_target": "script", "query": "Player", "directory": "Assets/Scripts", "recursive": true, "max_results": 50}
)
```

示例：搜索纹理文件
```python
function_call(
  func="project_search",
  args={"search_target": "texture", "query": "icon", "directory": "Assets/Textures", "max_results": 20}
)
```

示例：搜索预制体
```python
function_call(
  func="project_search",
  args={"search_target": "prefab", "query": "Enemy", "recursive": true}
)
```

示例：搜索材质文件
```python
function_call(
  func="project_search",
  args={"search_target": "material", "query": "Red", "directory": "Assets/Materials"}
)
```

示例：搜索音频文件
```python
function_call(
  func="project_search",
  args={"search_target": "audio", "query": "music", "directory": "Assets/Audio", "case_sensitive": false}
)
```

示例：搜索场景文件
```python
function_call(
  func="project_search",
  args={"search_target": "scene", "query": "Level", "max_results": 10}
)
```

示例：通用搜索
```python
function_call(
  func="project_search",
  args={"search_target": "general", "query": "MainMenu", "directory": "Assets", "recursive": true, "max_results": 30}
)
```

示例：搜索模型文件
```python
function_call(
  func="project_search",
  args={"search_target": "model", "query": "Character", "directory": "Assets/Models", "max_results": 25}
)
```

示例：搜索Shader文件
```python
function_call(
  func="project_search",
  args={"search_target": "shader", "query": "Custom", "directory": "Assets/Shaders", "recursive": true}
)
```

示例：搜索动画文件
```python
function_call(
  func="project_search",
  args={"search_target": "animation", "query": "Walk", "directory": "Assets/Animations"}
)
```

**特殊功能和注意事项**
- **自动路径标准化**: 如果directory参数不以"Assets"开头，会自动添加"Assets/"前缀
- **递归搜索控制**: recursive为false时，只搜索指定目录的直接子文件，不包含子文件夹
- **扩展名自动匹配**: 每种搜索类型都有预设的文件扩展名，无需手动指定
- **智能结果限制**: 通过max_results参数控制返回结果数量，避免过多结果影响性能
- **资产类型特定信息**: 根据不同资产类型自动提取相关属性（纹理尺寸、材质Shader、音频时长等）
- **文件系统信息**: 自动包含文件大小和最后修改时间
- **GUID支持**: 返回Unity内部GUID，便于资产引用和操作
- **Meta文件处理**: 默认排除.meta文件，可通过include_meta参数控制
- **大小写敏感**: 支持区分大小写的搜索，默认不区分大小写
- **容错处理**: 自动处理搜索过程中的异常情况，确保稳定性

---

### ui_rule_manage - UI制作规则文件管理
**功能**: UGUI的转换和制作规则管理，支持UI制作方案查询、修改记录管理、节点命名管理、图片资源管理和原型图片获取等功能。现在使用McpSettings中的全局配置来提供构建步骤和环境设置。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型，支持 `create_rule`、`get_rule`、`get_prototype_pic`、`add_modify`、`record_names`、`get_names`、`record_sprites`、`get_sprites`
- `name` (string, 必需): UI名称，用于查找和记录
- `modify_desc` (string, 可选): 修改描述，仅在 add_modify 操作时使用
- `save_path` (string, 可选): 保存路径，用于 create_rule 操作，默认为 "Assets/ScriptableObjects"
- `properties` (string, 可选): 属性数据，JSON格式字符串，用于 create_rule 操作
- `names_data` (string, 可选): 节点命名数据，JSON格式，用于 record_names 操作
- `sprites_data` (string, 可选): 图片资源数据，JSON格式，用于 record_sprites 操作
- `auto_load_sprites` (bool, 可选): 是否自动加载图片资源，默认为true，用于 record_sprites 操作

支持的操作 (action)
- `create_rule` - 创建新的UI制作规则资产
- `get_rule` - 通过UI名查找UI制作的具体方案，包含全局构建步骤和环境配置（不包含原型图片）
- `get_prototype_pic` - 获取指定UI的原型图片（Base64格式）
- `add_modify` - 将UI调整的关键信息保存起来
- `record_names` - 批量记录节点命名信息
- `get_names` - 获取节点命名信息
- `record_sprites` - 批量记录图片资源信息
- `get_sprites` - 获取图片资源信息

示例：创建UI制作规则
```python
function_call(
  func="ui_rule_manage",
  args={
    "action": "create_rule", 
    "name": "Homepage",
    "save_path": "Assets/UI/Rules",
    "properties": "{\"link_url\": \"https://figma.com/design/xxx\", \"picture_url\": \"Assets/Images/homepage.png\", \"prototype_pic\": \"Assets/Images/homepage_prototype.png\", \"image_scale\": 2}"
  }
)
```

示例：获取UI制作方案
```python
function_call(
  func="ui_rule_manage",
  args={"action": "get_rule", "name": "Homepage"}
)
```

示例：获取原型图片
```python
function_call(
  func="ui_rule_manage",
  args={"action": "get_prototype_pic", "name": "Homepage"}
)
```

示例：添加UI修改记录
```python
function_call(
  func="ui_rule_manage",
  args={"action": "add_modify", "name": "Homepage", "modify_desc": "调整了页面布局和按钮样式"}
)
```

示例：批量记录节点命名信息
```python
function_call(
  func="ui_rule_manage",
  args={
    "action": "record_names", 
    "name": "Homepage",
    "names_data": "{\"node_123\": {\"name\": \"HeaderPanel\", \"originName\": \"Frame 1\"}, \"node_456\": \"FooterButton\"}"
  }
)
```

示例：获取节点命名信息
```python
function_call(
  func="ui_rule_manage",
  args={"action": "get_names", "name": "Homepage"}
)
```

示例：批量记录图片资源信息
```python
function_call(
  func="ui_rule_manage",
  args={
    "action": "record_sprites", 
    "name": "Homepage",
    "sprites_data": "{\"node_789\": \"background.png\", \"node_101\": \"button_icon.png\"}",
    "auto_load_sprites": true
  }
)
```

示例：获取图片资源信息
```python
function_call(
  func="ui_rule_manage",
  args={"action": "get_sprites", "name": "Homepage"}
)
```

特点
- **多功能集成**: 支持UI规则管理、节点命名、图片资源管理和原型图片获取等多种功能
- **全局搜索**: 在整个项目中搜索所有UIDefineRuleObject资产，无需指定路径
- **单对象处理**: 一次只处理一个UIDefineRuleObject，逻辑清晰简单
- **智能匹配**: 支持模糊匹配和精确匹配UI名称，返回第一个匹配的对象
- **数据持久化**: 所有数据直接保存到UIDefineRuleObject资产中，永久保存
- **异步图片处理**: 支持网络和本地图片的异步加载和Base64转换
- **批量操作**: 支持批量记录节点命名和图片资源信息
- **自动资源加载**: 可自动从Assets文件夹加载图片资源
- **分离关注点**: get_rule专注规则获取，get_prototype_pic专门处理原型图片
- **全局配置**: 使用McpSettings中的ui_build_steps和ui_build_enviroments提供统一的构建步骤和环境配置
- **配置统一**: 构建步骤和环境配置统一在Project Settings中管理，便于维护和更新

工作流程
1. **初始配置**: 在Project Settings → MCP → UGUI中配置全局的构建步骤和环境设置
2. **创建规则**: 使用 `create_rule` 为特定UI创建制作规则资产（包含figma链接、原型图片路径等信息）
3. **获取规则**: 使用 `get_rule` 获取UI制作方案（包含全局配置和特定UI信息，不包含图片数据）
4. **获取原型图**: 需要时使用 `get_prototype_pic` 单独获取原型图片的Base64数据
5. **制作UI**: 按照推荐的构建步骤制作UI
6. **记录节点**: 使用 `record_names` 批量记录UI节点的命名映射关系
7. **记录资源**: 使用 `record_sprites` 批量记录图片资源信息并自动加载
8. **记录修改**: 使用 `add_modify` 记录重要的修改信息
9. **查询数据**: 使用 `get_names`、`get_sprites` 查询已记录的节点和资源信息

数据管理
- **全局配置**: 在Project Settings → MCP → UGUI中管理ui_build_steps和ui_build_enviroments
- **UI规则**: 通过UIDefineRuleObject资产存储特定UI的配置信息（figma链接、原型图片路径等）
- **节点映射**: 存储Figma节点ID与Unity GameObject名称的映射关系
- **资源映射**: 存储Figma节点ID与图片文件名的映射关系，支持自动加载Sprite资源
- **修改历史**: 记录UI制作和修改过程中的重要信息
- **分离存储**: UI规则和原型图片数据分离，按需获取，提高性能

---

### figma_manage - Figma管理工具
**功能**: 专门处理Figma设计文件的操作，支持下载图片、层级分析、节点数据拉取和文件信息获取等功能。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型，支持 `download_image`、`fetch_nodes`、`download_images`
- `file_key` (string, 必需): Figma文件Key（从Figma URL中提取）
- `node_id` (string): 节点ID，多个节点用逗号分隔（download_image和download_images必需，fetch_nodes必需）
- `save_path` (string, 可选): 保存路径，默认为 "Assets/FigmaAssets"
- `image_format` (string, 可选): 图片格式，支持 png、jpg、svg、pdf，默认为png
- `image_scale` (float, 可选): 图片缩放比例，默认为1
- `include_children` (bool, 可选): 是否包含子节点，默认为true（仅fetch_nodes需要）
- `local_json_path` (string, 可选): 本地JSON文件路径，用于从FetchNodes保存的JSON文件中读取节点数据（仅download_images支持）

支持的操作 (action)
- `download_image` - 智能下载单张图片资源
- `fetch_nodes` - 拉取指定节点的详细数据并保存为JSON文件
- `download_images` - 按需下载指定节点图片（必须提供node_id参数，多个节点用逗号分隔）

示例：下载单张图片
```python
function_call(
  func="figma_manage",
  args={
    "action": "download_image",
    "file_key": "QpRcCoIvLt6If1TikSTVj1",
    "node_id": "27-1386",
    "save_path": "Assets/UI/Images",
    "image_format": "png",
    "image_scale": 2.0
  }
)
```

示例：分析层级结构
```python
function_call(
  func="figma_manage",
  args={
    "action": "analyze_hierarchy",
    "file_key": "QpRcCoIvLt6If1TikSTVj1",
    "depth": 3
  }
)
```

示例：拉取节点数据
```python
function_call(
  func="figma_manage",
  args={
    "action": "fetch_nodes",
    "file_key": "QpRcCoIvLt6If1TikSTVj1",
    "node_id": "27-1386",
    "include_children": true
  }
)
```

示例：按需下载指定节点图片
```python
function_call(
  func="figma_manage",
  args={
    "action": "download_images",
    "file_key": "NOthutkClw7kcJbVLfKHC3",
    "node_id": "2-506,3-1279,3-1233",
    "save_path": "Assets/UI/Images",
    "image_format": "png",
    "image_scale": 2.0
  }
)
```

示例：从本地JSON文件下载指定节点
```python
function_call(
  func="figma_manage",
  args={
    "action": "download_images",
    "file_key": "NOthutkClw7kcJbVLfKHC3",
    "node_id": "2-506,3-1279,3-1233",
    "local_json_path": "Assets/FigmaAssets/simplified_nodes_NOthutkClw7kcJbVLfKHC3_20241225_143022.json",
    "save_path": "Assets/UI/Images",
    "image_format": "png",
    "image_scale": 2.0
  }
)
```

返回值格式
```json
{
  "success": true,
  "message": "操作完成描述",
  "data": {
    "file_key": "QpRcCoIvLt6If1TikSTVj1",
    "operation_type": "download_images",
    "processed_count": 2,
    "save_path": "Assets/UI/Images",
    "results": [...] 
  }
}
```

特点
- **异步操作**: 所有网络请求通过协程异步执行，避免阻塞Unity编辑器
- **多格式支持**: 支持PNG、JPG、SVG、PDF等多种图片格式
- **缩放控制**: 可配置图片下载的分辨率倍数
- **批量下载**: 支持同时下载多个节点的图片资源
- **本地JSON支持**: download_images操作支持从FetchNodes保存的本地JSON文件中读取节点数据
- **智能节点识别**: 自动识别可下载的图片节点（Vector、有填充、有效果等）
- **多种JSON格式**: 支持完整JSON、简化JSON、单节点JSON等多种格式
- **自动保存**: 下载的资源和分析结果自动保存到指定目录
- **进度显示**: 下载过程中显示进度条
- **错误处理**: 详细的错误信息和操作状态反馈

配置管理
- **令牌配置**: 在Project Settings → MCP → Figma中配置访问令牌（自动使用，无需在调用时传递）
- **路径配置**: 可配置默认下载路径和图片缩放设置
- **自动刷新**: 下载完成后自动刷新AssetDatabase

工作流程

**方式1: 在线下载流程**
1. **配置令牌**: 在Project Settings → MCP → Figma中配置Figma访问令牌
2. **提取参数**: 从Figma URL中提取file_key和node_id
3. **下载资源**: 
   - 使用 `download_image` 智能下载单张图片
   - 使用 `download_images` 批量智能下载所有相关图片资源

**方式2: 本地JSON文件流程（推荐）**
1. **配置令牌**: 在Project Settings → MCP → Figma中配置Figma访问令牌
2. **获取数据**: 使用 `fetch_nodes` 获取节点数据并保存为本地JSON文件
3. **本地下载**: 使用 `download_images` + `local_json_path` 从本地JSON文件读取数据批量下载
4. **优势**: 无需重复访问Figma API，提高下载效率和稳定性

注意事项
- **令牌配置**: Figma API令牌需要在Figma账户中生成，并在Project Settings中配置一次即可
- **URL解析**: file_key可从Figma文件URL中提取：`https://www.figma.com/design/{file_key}/...`
- **节点ID**: node_id可从Figma URL的node-id参数中获取
- **智能下载**: 
  - **单张下载**: `download_image` 下载指定的单个节点图片（需要node_id）
  - **批量下载**: `download_images` 支持三种模式：
    - **指定节点**: 提供node_id时，从该节点开始智能扫描子节点
    - **全文件扫描**: 不提供node_id时，扫描整个Figma文件
    - **本地JSON**: 提供local_json_path时，从本地JSON文件读取节点数据（推荐）
- **本地JSON文件**: 
  - **格式支持**: 支持FetchNodes保存的完整JSON、简化JSON、单节点JSON等格式
  - **路径示例**: `Assets/FigmaAssets/simplified_nodes_filekey_timestamp.json`
  - **优势**: 避免重复API调用，提高下载效率和稳定性
- **文件命名**: 下载的图片使用"节点名称_内容哈希值"的命名方式，避免重复下载
- **日志输出**: 所有操作都会在Unity控制台中输出详细日志
- **自动配置**: 工具会自动从McpSettings中读取配置的令牌，无需手动传递

---

### manage_package - Unity包管理工具
**功能**: 专门处理Unity包管理器操作，支持包的添加、移除、列表、搜索、刷新和依赖解析等功能。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型，支持 `add`、`remove`、`list`、`search`、`refresh`、`resolve`
- `source` (string, 可选): 包源类型，支持 `registry`、`github`、`disk`（仅用于add操作）
- `package_name` (string, 可选): 包名称（用于add、remove操作）
- `package_identifier` (string, 可选): 包完整标识符（用于remove操作）
- `version` (string, 可选): 包版本（用于add操作）
- `repository_url` (string, 可选): GitHub仓库URL（用于github源）
- `branch` (string, 可选): GitHub分支名（用于github源）
- `path` (string, 可选): 包路径（github源子目录或disk源路径）
- `search_keywords` (string, 可选): 搜索关键词（用于search操作，为空时搜索所有包）
- `include_dependencies` (bool, 可选): 是否包含依赖信息（用于list操作）
- `scope` (string, 可选): 包范围过滤器（用于list操作）
- `timeout` (int, 可选): 操作超时时间（秒），默认30秒

支持的操作 (action)
- `add` - 添加包
- `remove` - 移除包
- `list` - 列出已安装包
- `search` - 搜索可用包
- `refresh` - 刷新包列表
- `resolve` - 解析包依赖

**包源类型** (source)
- `registry` - Unity官方包注册表（默认）
- `github` - GitHub仓库
- `disk` - 本地磁盘路径

示例：从Unity注册表添加包
```python
function_call(
  func="manage_package",
  args={"action": "add", "source": "registry", "package_name": "com.unity.hot-reload", "version": "1.0.0"}
)
```

示例：从GitHub添加包
```python
function_call(
  func="manage_package",
  args={
    "action": "add", 
    "source": "github", 
    "repository_url": "https://github.com/Unity-Technologies/com.unity.hot-reload.git",
    "branch": "main"
  }
)
```

示例：从本地磁盘添加包
```python
function_call(
  func="manage_package",
  args={"action": "add", "source": "disk", "path": "D:/MyUnityPackages/CustomPackage"}
)
```

示例：移除包
```python
function_call(
  func="manage_package",
  args={"action": "remove", "package_name": "com.unity.hot-reload"}
)
```

示例：列出已安装包
```python
function_call(
  func="manage_package",
  args={"action": "list", "include_dependencies": True}
)
```

示例：搜索包
```python
function_call(
  func="manage_package",
  args={"action": "search", "search_keywords": "hot reload"}
)
```

示例：搜索所有可用包
```python
function_call(
  func="manage_package",
  args={"action": "search"}
)
```

示例：刷新包列表
```python
function_call(
  func="manage_package",
  args={"action": "refresh"}
)
```

示例：解析包依赖
```python
function_call(
  func="manage_package",
  args={"action": "resolve"}
)
```

返回值格式
```json
{
  "success": true,
  "message": "Package operation completed successfully",
  "data": {
    "operation": "add",
    "package_info": {
      "name": "com.unity.hot-reload",
      "display_name": "Hot Reload",
      "version": "1.0.0",
      "status": "installed"
    }
  }
}
```

特点
- **异步操作**: 包管理操作通过异步方式执行，避免阻塞Unity编辑器
- **多源支持**: 支持Unity注册表、GitHub仓库和本地磁盘三种包源
- **完整功能**: 覆盖包的完整生命周期管理
- **错误处理**: 详细的错误信息和操作状态反馈
- **版本控制**: 支持指定包版本和分支
- **依赖管理**: 自动处理包依赖关系
- **搜索功能**: 强大的包搜索和发现能力
- **超时控制**: 可配置的操作超时时间

注意事项
- 添加GitHub包时需要提供完整的仓库URL
- 本地磁盘包需要确保路径存在且包含有效的package.json
- 移除包操作会同时清理相关依赖（如果没有其他包使用）
- 刷新和解析操作通常用于解决包依赖冲突

---

## 🎯 使用指南

### 1) 工具选择原则
- 单次调用使用 `function_call`
- 批量调用使用 `functions_call`
- 除 `function_call`/`functions_call` 外，其余均为 Methods 名称，作为 `func` 传入

### 2) 错误处理
所有调用均返回标准格式：
```json
{
  "success": true,
  "message": "...",
  "data": { },
  "error": ""
}
```

### 3) 路径约定
- 使用Unity标准路径格式：`Assets/Folder/File.extension`
- 路径分隔符使用正斜杠 `/`
- 相对于项目根目录的Assets文件夹
- UGUI菜单按TextMeshPro的规则为准，老的一些控件已经放到Leagcy中
- 注意菜单命名间隔: GameObject/UI/Input Field (TMP)

### 4) 最佳实践
- 在执行操作前使用 `console_read` 检查错误
- 使用 `manage_editor` 获取编辑器状态
- 创建资产前确保目标文件夹存在
- 批量操作时使用 `functions_call` 提高效率
- 网络请求设置合适的超时时间，避免长时间阻塞
- 下载文件前确保目标目录存在
- 敏感API请求使用认证令牌保护
- 大文件操作时增加超时时间和重试机制
- try-catch中不可放协程的yield return

### 5) 调试建议
- 使用 `console_read` 查看Unity控制台输出
- 检查返回值中的 `success` 字段  
- 查看 `message` 和 `error` 字段获取详细信息
- 对于复杂操作，使用批量调用 `functions_call` 提高效率
- 网格操作时注意循环引用问题，现已修复Vector3序列化问题

---

## 📝 版本历史

### v2.1.0 (2024-12-21)
**🔧 Bug修复**
- **edit_mesh**: 修复了Vector3循环引用导致的JSON序列化问题
  - 将`mesh.bounds.center/size/extents`从Vector3对象转换为float数组格式
  - 避免`Vector3.normalized`属性造成的序列化循环引用
- **文档更新**: 优化mdc格式，添加完整的目录索引和图标

**⚡ 性能优化**  
- 改进了网格数据的序列化性能
- 减少了不必要的反射调用

### v2.0.0 (2024-XX-XX)
**🎉 主要功能**
- 完整的Unity MCP工具集
- 双状态树架构支持
- 批量操作功能
- 交互式确认机制

---

## 🚀 快速开始

### 1. 基本调用模式
```python
# 单次调用
function_call(
    func="hierarchy_create",
    args={"from": "primitive", "primitive_type": "Cube", "name": "MyCube"}
)

# 批量调用
functions_call(
    funcs=[
        {"func": "hierarchy_create", "args": {"from": "primitive", "primitive_type": "Cube", "name": "Enemy1"}},
        {"func": "edit_gameobject", "args": {"path": "Enemy1", "action": "add_component", "component_type": "Rigidbody"}}
    ]
)
```

### 2. 常用工作流
```python
# 创建 → 编辑 → 保存
functions_call(
    funcs=[
        # 1. 创建GameObject
        {"func": "hierarchy_create", "args": {"from": "primitive", "primitive_type": "Sphere", "name": "Player"}},
        # 2. 添加组件
        {"func": "edit_gameobject", "args": {"path": "Player", "action": "add_component", "component_type": "Rigidbody"}},
        # 3. 设置属性
        {"func": "edit_component", "args": {"path": "Player", "action": "set_component_propertys", "component_type": "Transform", "properties": {"localPosition": [0, 5, 0]}}},
        # 4. 保存场景
        {"func": "edit_scene", "args": {"action": "save", "name": "TestScene", "path": "Assets/Scenes/", "build_index": 0}}
    ]
)
```

---

## ⚠️ 重要提醒

### 数据格式说明
- **Vector3数据**: 网格边界等空间数据以`[x, y, z]`数组格式返回，避免循环引用
- **路径格式**: 统一使用`Assets/Folder/File.extension`格式
- **组件引用**: 支持路径引用和InstanceID引用两种方式

---

### code_runner - C#代码运行工具
**功能**: 在Unity编辑器中编译和执行任意C#代码，支持完整的Unity API访问，提供代码验证和动态执行功能。

主要参数（放入 `args`）
- `action` (string, 可选): 操作类型，支持 `execute`、`validate`，默认为 `execute`
- `code` (string, 必需): C#代码内容，可以是代码片段或完整的类/方法定义
- `entry_method` (string, 可选): code中要执行的主入口方法名，不填写默认为 `Execute`
- `class_name` (string, 可选): 类名，默认为 `CodeClass`
- `namespace` (string, 可选): 命名空间，默认为 `CodeNamespace`
- `includes` (list, 可选): 引用的using语句列表，默认包含Unity和.NET基础命名空间
- `parameters` (list, 可选): 方法参数，JSON数组格式，默认为空数组
- `timeout` (int, 可选): 执行超时时间（秒），默认为 30 秒
- `cleanup` (bool, 可选): 是否清理临时文件，默认为 true
- `return_output` (bool, 可选): 是否捕获并返回控制台输出，默认为 true

支持的操作 (action)

**代码执行** (`execute`)
- 编译并执行C#代码
- 支持完整的Unity API访问
- 支持静态和实例方法调用
- 自动处理程序集引用和编译
- 独立临时目录编译，避免文件冲突

**代码验证** (`validate`)
- 验证C#代码语法和编译
- 检查编译错误和警告
- 不执行代码，仅验证语法正确性
- 返回生成的完整代码

**代码格式支持**
- **代码片段**: 直接写代码逻辑，自动包装在方法中
- **完整方法**: 包含public static/void等完整方法定义
- **多个方法**: 支持在一个类中定义多个方法
- **Unity API**: 完全支持UnityEngine、UnityEditor等API

示例：执行代码片段（创建GameObject）
```python
function_call(
  func="code_runner",
  args={
    "action": "execute",
    "code": """
// 创建一个新的GameObject
GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube);
cube.name = "MyCube";
cube.transform.position = new Vector3(0, 1, 0);

Debug.Log("创建了一个立方体: " + cube.name);
return cube.name;
"""
  }
)
```

示例：执行完整方法定义
```python
function_call(
  func="code_runner",
  args={
    "action": "execute", 
    "code": """
public static void CreateMeshAsset()
{
    Mesh mesh = new Mesh();
    mesh.name = "CustomMesh";
    
    // 定义顶点
    Vector3[] vertices = new Vector3[4];
    vertices[0] = new Vector3(0, 0, 0);
    vertices[1] = new Vector3(1, 0, 0);
    vertices[2] = new Vector3(1, 1, 0);
    vertices[3] = new Vector3(0, 1, 0);
    mesh.vertices = vertices;
    
    // 定义三角形
    int[] triangles = new int[6];
    triangles[0] = 0; triangles[1] = 2; triangles[2] = 1;
    triangles[3] = 0; triangles[4] = 3; triangles[5] = 2;
    mesh.triangles = triangles;
    
    mesh.RecalculateNormals();
    
    AssetDatabase.CreateAsset(mesh, "Assets/CustomMesh.asset");
    AssetDatabase.SaveAssets();
    
    Debug.Log("网格资源创建完成");
}

public static string GetProjectInfo()
{
    return $"项目路径: {Application.dataPath}";
}
""",
    "entry_method": "CreateMeshAsset"
  }
)
```

示例：验证代码语法
```python
function_call(
  func="code_runner",
  args={
    "action": "validate",
    "code": """
Transform[] objects = FindObjectsOfType<Transform>();
foreach(Transform obj in objects)
{
    Debug.Log($"对象: {obj.name}, 位置: {obj.position}");
}
return objects.Length;
""",
    "class_name": "ObjectScanner"
  }
)
```

示例：带参数的方法调用
```python
function_call(
  func="code_runner",
  args={
    "action": "execute",
    "code": """
public static string ProcessText(string input, int count)
{
    return $"处理文本: {input}, 重复{count}次: {string.Join(", ", Enumerable.Repeat(input, count))}";
}
""",
    "entry_method": "ProcessText", 
    "parameters": ["Hello", 3]
  }
)
```

返回值格式（执行成功）
```json
{
  "success": true,
  "message": "Code execution completed successfully",
  "data": {
    "operation": "execute",
    "class_name": "CodeClass",
    "entry_method": "Run", 
    "namespace_name": "CodeNamespace",
    "success": true,
    "message": "Code executed successfully",
    "output": "创建了一个立方体: MyCube\n",
    "return_value": "MyCube",
    "duration": 145.67,
    "stack_trace": null
  }
}
```

返回值格式（验证成功）
```json
{
  "success": true,
  "message": "Code syntax is valid",
  "data": {
    "operation": "validate",
    "class_name": "ObjectScanner",
    "entry_method": "Run",
    "namespace_name": "CodeNamespace", 
    "generated_code": "using System;\nusing UnityEngine;\n...\nnamespace CodeNamespace\n{\n    public class ObjectScanner\n    {\n        public static object Run()\n        {\n            try\n            {\n                Transform[] objects = FindObjectsOfType<Transform>();\n                ...\n            }\n        }\n    }\n}"
  }
}
```

返回值格式（编译失败）
```json
{
  "success": false,
  "error": "Code compilation failed",
  "data": {
    "operation": "execute",
    "errors": "CS1002: Syntax error, '(' expected\nline 8, column 15\nCS0103: The name 'UnknownMethod' does not exist in the current context\nline 12, column 5"
  }
}
```

**技术特性**
- 动态代码编译和执行，支持协程编译避免阻塞
- 完整的Unity和.NET程序集引用（477+个引用）
- 独立临时目录结构，每次编译创建唯一目录避免冲突
- 详细的编译过程日志和错误报告
- 支持静态和实例方法调用
- 自动代码包装，支持代码片段和完整方法定义
- 控制台输出捕获和返回值处理

**安全特性**
- 临时文件隔离执行，按目录清理
- 编译超时保护（30秒默认）
- 自动文件清理，带重试机制
- 异常处理和详细错误捕获
- 编译事件监听和状态监控

**调试特性** 
- 详细的编译参数日志（源文件、目标路径、引用列表）
- 源文件内容验证和大小检查
- 编译状态实时监控和变化记录
- 临时目录文件列表和日志文件检查
- 程序集文件存在性和大小验证

**使用场景**
- Unity编辑器工具开发和测试
- 动态创建GameObjects和组件
- 网格、材质、纹理等资源生成
- 场景对象批量处理和修改
- Unity API功能验证和原型开发
- 编辑器扩展脚本快速测试

---

### python_runner - Python代码执行工具
**功能**: 安全地执行Python脚本，支持代码验证、包安装和UTF-8中文编码，提供完整的Python开发环境支持；如果动态创建*.py文件，放到于Python目录下。

主要参数（放入 `args`）
- `action` (string, 可选): 操作类型，支持 `execute`、`validate`、`install_package`、`create`，默认为 `execute`
- `code` (string, 必需): Python脚本代码内容（execute/validate/create操作必需）
- `script_path` (string, 可选): 脚本文件路径（execute/validate时为现有文件路径，create时为创建路径，与code互斥时优先使用script_path）
- `script_name` (string, 可选): Python脚本名称，默认为 `script.py`
- `python_path` (string, 可选): Python解释器路径，默认为 `python`
- `working_directory` (string, 可选): 工作目录路径，默认为Unity项目Assets目录
- `timeout` (int, 可选): 执行超时时间（秒），默认为 300 秒
- `cleanup` (bool, 可选): 是否清理临时文件，默认为 true
- `packages` (string/list, 可选): 要安装的Python包，支持字符串或数组
- `requirements_file` (string, 可选): requirements.txt文件路径
- `virtual_env` (string, 可选): 虚拟环境路径
- `refresh_project` (bool, 可选): 执行完成后是否刷新Unity项目，默认为 false

支持的操作 (action)

**代码执行** (`execute`)
- 安全执行Python脚本
- 自动UTF-8编码处理
- 临时文件管理
- 进程超时保护
- 完整的输出捕获

**代码验证** (`validate`)
- Python语法验证
- 编译检查（无执行）
- 错误定位和报告
- 安全的语法分析

**包管理** (`install_package`)
- pip包安装
- requirements.txt支持
- 虚拟环境兼容
- 安装进度监控

**脚本创建** (`create`)
- 创建Python脚本文件
- 自动UTF-8编码保存
- 智能路径处理（默认保存到Python目录）
- 目录自动创建

示例：执行基本Python代码
```python
function_call(
  func="python_runner",
  args={
    "action": "execute",
    "code": """
import math
import datetime

print('=== Python脚本执行测试 ===')
print(f'当前时间: {datetime.datetime.now()}')
print(f'圆周率: {math.pi:.6f}')

# 数学计算
numbers = [1, 2, 3, 4, 5]
squared = [x**2 for x in numbers]
print(f'平方结果: {squared}')

# 字符串处理
text = 'Hello, Unity MCP!'
print(f'文本长度: {len(text)}')
print('脚本执行完成！')
""",
    "script_name": "basic_test.py",
    "timeout": 30
  }
)
```

示例：执行现有Python脚本文件
```python
function_call(
  func="python_runner",
  args={
    "action": "execute",
    "script_path": "Assets/Scripts/Python/mesh_generator.py",
    "timeout": 60,
    "refresh_project": True
  }
)
```

示例：验证Python语法
```python
function_call(
  func="python_runner",
  args={
    "action": "validate",
    "code": """
def calculate_area(radius):
    import math
    return math.pi * radius ** 2

def main():
    radius = 5
    area = calculate_area(radius)
    print(f'圆的面积: {area:.2f}')

if __name__ == '__main__':
    main()
""",
    "script_name": "geometry.py"
  }
)
```

示例：安装Python包
```python
function_call(
  func="python_runner",
  args={
    "action": "install_package",
    "packages": ["requests", "numpy", "pandas"],
    "timeout": 120
  }
)
```

示例：从requirements文件安装
```python
function_call(
  func="python_runner",
  args={
    "action": "install_package",
    "requirements_file": "requirements.txt",
    "timeout": 180
  }
)
```

示例：使用虚拟环境
```python
function_call(
  func="python_runner",
  args={
    "action": "execute",
    "code": """
import sys
print(f'Python版本: {sys.version}')
print(f'Python路径: {sys.executable}')

# 检查已安装的包
try:
    import numpy as np
    print(f'NumPy版本: {np.__version__}')
except ImportError:
    print('NumPy未安装')
""",
    "virtual_env": "C:/Python/venv",
    "timeout": 45
  }
)
```

示例：创建Unity资产并自动刷新项目
```python
function_call(
  func="python_runner",
  args={
    "action": "execute",
    "code": """
import os
import json

# 创建纹理文件或其他Unity资产
assets_path = 'Assets/Generated'
if not os.path.exists(assets_path):
    os.makedirs(assets_path)

# 生成一些配置文件
config_data = {
    'version': '1.0',
    'generated_at': '2024-01-01',
    'items': ['item1', 'item2', 'item3']
}

config_path = os.path.join(assets_path, 'config.json')
with open(config_path, 'w', encoding='utf-8') as f:
    json.dump(config_data, f, indent=2, ensure_ascii=False)

print(f'配置文件已生成: {config_path}')
""",
    "script_name": "generate_assets.py",
    "refresh_project": True,
    "timeout": 30
  }
)
```

示例：创建Python脚本文件（默认保存到Python目录）
```python
function_call(
  func="python_runner",
  args={
    "action": "create",
    "code": """#!/usr/bin/env python3
# -*- coding: utf-8 -*-
\"\"\"
Unity材质处理工具
自动处理Unity项目中的材质文件
\"\"\"

import os
import json

def process_materials():
    \"\"\"处理材质文件\"\"\"
    print("开始处理Unity材质...")
    
    # 这里添加您的材质处理逻辑
    materials_processed = 0
    
    print(f"处理完成，共处理了 {materials_processed} 个材质")
    return materials_processed

if __name__ == "__main__":
    result = process_materials()
    print(f"脚本执行完成，结果: {result}")
""",
    "script_name": "material_processor.py"
  }
)
```

示例：创建脚本到指定路径
```python
function_call(
  func="python_runner",
  args={
    "action": "create",
    "code": """#!/usr/bin/env python3
# -*- coding: utf-8 -*-
\"\"\"
Unity资源管理工具
\"\"\"

def manage_assets():
    print("Unity资源管理工具")
    # 资源管理逻辑

if __name__ == "__main__":
    manage_assets()
""",
    "script_path": "Python/tools/asset_manager.py"
  }
)
```

返回值格式（执行成功）
```json
{
  "success": true,
  "message": "Python script execution completed",
  "data": {
    "operation": "execute",
    "script_name": "basic_test.py",
    "success": true,
    "output": "=== Python脚本执行测试 ===\n当前时间: 2024-12-21 10:30:45.123456\n圆周率: 3.141593\n平方结果: [1, 4, 9, 16, 25]\n文本长度: 18\n脚本执行完成！\n",
    "error": "",
    "exit_code": 0,
    "duration": 125.75,
    "temp_file": "C:/Temp/Unity/PythonRunner/basic_test_12345.py",
    "project_refreshed": false
  }
}
```

返回值格式（验证成功）
```json
{
  "success": true,
  "message": "Python code syntax is valid",
  "data": {
    "operation": "validate",
    "script_name": "geometry.py",
    "python_path": "python",
    "temp_file": "C:/Temp/Unity/PythonRunner/geometry_67890.py"
  }
}
```

返回值格式（创建成功）
```json
{
  "success": true,
  "message": "Python script created successfully",
  "data": {
    "operation": "create",
    "script_path": "D:/unity-mcp/unity-demo/Python/material_processor.py",
    "script_name": "material_processor.py",
    "directory": "D:/unity-mcp/unity-demo/Python",
    "file_size": 1024
  }
}
```

返回值格式（语法错误）
```json
{
  "success": false,
  "error": "Python code syntax validation failed",
  "data": {
    "operation": "validate",
    "error": "  File \"script.py\", line 5\n    print('Missing quote)\n                        ^\nSyntaxError: EOL while scanning string literal",
    "output": ""
  }
}
```

返回值格式（包安装成功）
```json
{
  "success": true,
  "message": "Python packages installed successfully",
  "data": {
    "operation": "install_package",
    "packages": ["requests", "numpy", "pandas"],
    "output": "Successfully installed requests-2.28.1 numpy-1.24.3 pandas-2.0.2",
    "exit_code": 0
  }
}
```

**技术特性**
- **安全执行**: 临时文件隔离，自动清理
- **编码支持**: 完整的UTF-8中文支持，Base64备用编码
- **环境管理**: 支持虚拟环境和自定义Python路径
- **超时控制**: 可配置的执行超时保护
- **错误处理**: 详细的异常信息和堆栈跟踪
- **包管理**: pip包安装和requirements.txt支持
- **项目集成**: 执行完成后可自动刷新Unity项目，确保新生成的资产被识别

**安全特性**
- 进程沙盒隔离
- 临时文件自动清理
- 超时自动终止
- 异常安全处理
- 环境变量控制

**编码支持**
- 自动UTF-8配置
- 中文字符正确显示
- Base64编码备用方案
- 多层编码检测修复

**使用场景**
- 数据处理脚本
- 算法验证
- 批量文件操作
- 网络API调用
- 机器学习任务
- 自动化测试
- 开发工具集成

**支持的Python版本**
- Python 3.6+
- Windows/Linux/macOS
- 虚拟环境兼容
- 自动路径检测

---

### 最佳实践
1. **错误处理**: 始终检查返回值的`success`字段
2. **批量操作**: 多个相关操作使用`functions_call`提高效率  
3. **资源管理**: 操作前确保目标目录存在
4. **调试支持**: 利用控制台工具辅助开发调试

---

### gameplay - 游戏窗口控制与自动化
**功能**: 提供Game窗口管理、输入模拟、截图和图像处理的综合解决方案。

主要参数（放入 `args`）
- `action` (string, 必需): 操作类型
- `x`, `y` (float): 坐标位置（输入模拟用）
- `width`, `height` (int): 窗口或图像尺寸
- `save_path` (string): 保存路径
- `format` (string): 图像格式(PNG/JPG)
- `delay` (float): 延迟执行时间（秒）

支持的操作 (action)

**截图功能**
- `screenshot` - 游戏窗口截图
- `screenshot_region` - 区域截图
- `batch_screenshot` - 批量截图

**输入模拟**  
- `simulate_click` - 模拟鼠标点击
- `simulate_drag` - 模拟拖拽操作
- `simulate_key` - 模拟按键
- `simulate_scroll` - 模拟滚轮

**窗口管理**
- `set_size` - 设置窗口大小  
- `get_info` - 获取窗口信息
- `focus_window` - 聚焦窗口
- `maximize` / `minimize` - 最大化/最小化

**图像处理**
- `compress_image` - 压缩图像
- `resize_image` - 调整图像大小
- `convert_format` - 转换图像格式

示例：游戏窗口截图
```python
function_call(
  func="gameplay",
  args={"action": "screenshot", "save_path": "Assets/Screenshots/game.png", "format": "PNG", "quality": 90}
)
```

示例：模拟点击
```python
function_call(
  func="gameplay", 
  args={"action": "simulate_click", "x": 100, "y": 200, "button": 0, "delay": 1.0}
)
```

示例：设置窗口大小
```python
function_call(
  func="gameplay",
  args={"action": "set_size", "width": 1920, "height": 1080}
)
```

示例：区域截图
```python
function_call(
  func="gameplay",
  args={"action": "screenshot_region", "region_x": 50, "region_y": 50, "region_width": 400, "region_height": 300, "save_path": "Assets/Screenshots/region.png"}
)
```

示例：拖拽操作
```python
function_call(
  func="gameplay",
  args={"action": "simulate_drag", "x": 100, "y": 100, "target_x": 300, "target_y": 300, "duration": 2.0}
)
```

示例：压缩图像
```python
function_call(
  func="gameplay", 
  args={"action": "compress_image", "source_path": "Assets/Original/big.png", "save_path": "Assets/Compressed/small.png", "compress_ratio": 0.5}
)
```

示例：批量截图
```python
function_call(
  func="gameplay",
  args={"action": "batch_screenshot", "count": 10, "interval": 2.0, "base_path": "Assets/Screenshots/batch"}
)
```

预定义窗口大小:
- `HD` / `FHD` - 1920x1080
- `4K` - 3840x2160  
- `iPhone` - 375x667
- `iPad` - 768x1024
- `Android` - 360x640

**特色功能**:
- 🎮 **游戏自动化**: 模拟各种输入操作进行自动化测试
- 📸 **智能截图**: 支持全屏、区域、批量截图
- 🖼️ **图像处理**: 压缩、缩放、格式转换一体化
- ⏱️ **延迟执行**: 精确控制操作时机
- 📏 **窗口管理**: 动态调整游戏窗口大小和状态

**使用场景**:
- 自动化测试和UI验证
- 游戏截图和素材制作
- 性能测试和数据收集
- 演示视频录制准备
- 批量图像处理任务

---

### 技术支持
- 📖 完整API文档: 见各工具详细说明
- 🐛 问题报告: 通过`console_read`查看错误信息
- 💡 最新更新: 关注version字段获取版本信息

---

*Unity MCP工具集 - 让Unity开发更高效* 🚀