# Unity MCP 工具规则 (mcp_rules)

这个文件包含Unity MCP服务器中所有可用工具的详细规则和使用方法。除了通用的`function_call`工具外，其他所有专业工具都在此处详细说明。

## 🔧 可用工具概览

1. **functions_call** - 批量函数调用工具
2. **execute_menu_item** - Unity编辑器菜单执行工具
3. **manage_asset** - Unity资产管理工具
4. **manage_editor** - Unity编辑器状态管理工具
5. **manage_gameobject** - GameObject管理工具
6. **manage_scene** - Unity场景管理工具
7. **manage_script** - C#脚本管理工具
8. **read_console** - Unity控制台读取工具

---

## 1. 📦 functions_call - 批量函数调用工具

**功能**: 按顺序执行多个Unity函数调用并收集所有返回值。

### 参数
- `function_calls` (string): 函数调用列表的JSON字符串

### 参数格式
```json
[
    {
        "func": "Function1",
        "args": "{\"param1\": \"value1\"}"
    },
    {
        "func": "Function2",
        "args": "{\"param2\": 123}"
    }
]
```

### 返回值格式
```json
{
    "success": bool,
    "results": [result1, result2, ...],
    "errors": [error1, error2, ...],
    "total_calls": int,
    "successful_calls": int,
    "failed_calls": int
}
```

### 使用示例
```python
functions_call(
    function_calls='[
        {
            "func": "CreateGameObject",
            "args": "{\\"name\\": \\"Player\\", \\"tag\\": \\"Player\\"}"
        },
        {
            "func": "AddComponent",
            "args": "{\\"target\\": \\"Player\\", \\"component\\": \\"Rigidbody\\"}"
        }
    ]'
)
```

---

## 2. 🎯 execute_menu_item - Unity编辑器菜单执行工具

**功能**: 执行Unity编辑器中的菜单命令。

### 参数
- `menu_path` (string, 必需): 菜单项的完整路径
- `action` (string): 操作类型，默认为'execute'
- `args` (dict): 可选参数字典

### 使用示例
```python
execute_menu_item(
    menu_path="File/Save Project"
)

execute_menu_item(
    menu_path="GameObject/Create Empty"
)

execute_menu_item(
    menu_path="Window/General/Inspector"
)
```

### 常用菜单路径
- "File/Save Project" - 保存项目
- "File/Save Scenes" - 保存场景
- "GameObject/Create Empty" - 创建空GameObject
- "Assets/Reimport All" - 重新导入所有资产
- "Window/General/Console" - 打开控制台窗口

---

## 3. 📁 manage_asset - Unity资产管理工具

**功能**: 执行Unity资产的各种操作，包括导入、创建、修改、删除等。

### 主要参数
- `action` (string, 必需): 操作类型
- `path` (string, 必需): 资产路径
- `asset_type` (string): 资产类型（创建时需要）
- `properties` (dict): 资产属性
- `destination` (string): 目标路径（移动/复制时）

### 支持的操作 (action)
- `import` - 导入资产
- `create` - 创建资产
- `modify` - 修改资产
- `delete` - 删除资产
- `duplicate` - 复制资产
- `move` - 移动资产
- `rename` - 重命名资产
- `search` - 搜索资产
- `get_info` - 获取资产信息
- `create_folder` - 创建文件夹

### 使用示例
```python
# 创建材质
manage_asset(
    action="create",
    path="Assets/Materials/NewMaterial.mat",
    asset_type="Material",
    properties={"color": [1, 0, 0, 1]}
)

# 创建文件夹
manage_asset(
    action="create_folder",
    path="Assets/NewFolder"
)

# 搜索预制体
manage_asset(
    action="search",
    path="Assets/",
    search_pattern="*.prefab"
)

# 获取资产信息
manage_asset(
    action="get_info",
    path="Assets/Scripts/PlayerController.cs"
)
```

---

## 4. ⚙️ manage_editor - Unity编辑器状态管理工具

**功能**: 控制和查询Unity编辑器的状态和设置。

### 参数
- `action` (string, 必需): 操作类型
- `wait_for_completion` (bool): 是否等待完成
- `tool_name` (string): 工具名称
- `tag_name` (string): 标签名称
- `layer_name` (string): 层名称

### 支持的操作 (action)
- `play` - 播放场景
- `pause` - 暂停场景
- `stop` - 停止场景
- `get_state` - 获取编辑器状态
- `set_active_tool` - 设置活动工具
- `add_tag` - 添加标签
- `add_layer` - 添加层

### 使用示例
```python
# 播放场景
manage_editor(action="play")

# 获取编辑器状态
manage_editor(action="get_state")

# 添加新标签
manage_editor(
    action="add_tag",
    tag_name="Enemy"
)

# 设置活动工具
manage_editor(
    action="set_active_tool",
    tool_name="Move Tool"
)
```

---

## 5. 🎮 manage_gameobject - GameObject管理工具

**功能**: 管理Unity中的GameObject，包括创建、修改、删除、查找和组件操作。

### 核心参数
- `action` (string, 必需): 操作类型
- `target` (string): 目标GameObject标识符
- `name` (string): GameObject名称
- `tag` (string): 标签
- `parent` (string): 父对象
- `position` (list): 位置坐标 [x, y, z]
- `rotation` (list): 旋转 [x, y, z]
- `scale` (list): 缩放 [x, y, z]

### 支持的操作 (action)
- `create` - 创建GameObject
- `modify` - 修改GameObject
- `delete` - 删除GameObject
- `find` - 查找GameObject
- `add_component` - 添加组件
- `remove_component` - 移除组件
- `set_component_property` - 设置组件属性

### 使用示例
```python
# 创建基础GameObject
manage_gameobject(
    action="create",
    name="Player",
    tag="Player",
    position=[0, 1, 0]
)

# 创建并保存为预制体
manage_gameobject(
    action="create",
    name="Enemy",
    primitive_type="Cube",
    save_as_prefab=True,
    prefab_path="Assets/Prefabs/Enemy.prefab"
)

# 添加组件
manage_gameobject(
    action="add_component",
    target="Player",
    component_name="Rigidbody"
)

# 修改GameObject属性
manage_gameobject(
    action="modify",
    target="Player",
    position=[10, 0, 0],
    set_active=True
)

# 查找GameObject
manage_gameobject(
    action="find",
    search_term="Player",
    find_all=True
)
```

### 组件属性设置
```python
# 设置复杂组件属性
manage_gameobject(
    action="modify",
    target="Player",
    component_properties={
        "Rigidbody": {
            "mass": 10.0,
            "useGravity": True
        },
        "MeshRenderer": {
            "material": "Assets/Materials/PlayerMaterial.mat"
        }
    }
)
```

---

## 6. 🏠 manage_scene - Unity场景管理工具

**功能**: 管理Unity场景，包括加载、保存、创建和获取层级结构。

### 参数
- `action` (string, 必需): 操作类型
- `name` (string, 必需): 场景名称
- `path` (string, 必需): 资产路径
- `build_index` (int, 必需): 构建索引

### 支持的操作 (action)
- `load` - 加载场景
- `save` - 保存场景
- `create` - 创建场景
- `get_hierarchy` - 获取场景层级

### 使用示例
```python
# 创建新场景
manage_scene(
    action="create",
    name="NewLevel",
    path="Assets/Scenes/",
    build_index=1
)

# 加载场景
manage_scene(
    action="load",
    name="MainMenu",
    path="Assets/Scenes/MainMenu.unity",
    build_index=0
)

# 保存当前场景
manage_scene(
    action="save",
    name="CurrentScene",
    path="Assets/Scenes/",
    build_index=0
)

# 获取场景层级结构
manage_scene(
    action="get_hierarchy",
    name="CurrentScene",
    path="",
    build_index=0
)
```

---

## 7. 📝 manage_script - C#脚本管理工具

**功能**: 管理Unity中的C#脚本，包括创建、读取、更新和删除。

### 参数
- `action` (string, 必需): 操作类型
- `name` (string, 必需): 脚本名称（不含.cs扩展名）
- `path` (string, 必需): 资产路径
- `contents` (string, 必需): C#代码内容
- `script_type` (string, 必需): 脚本类型
- `namespace` (string, 必需): 命名空间

### 支持的操作 (action)
- `create` - 创建脚本
- `read` - 读取脚本
- `update` - 更新脚本
- `delete` - 删除脚本

### 使用示例
```python
# 创建MonoBehaviour脚本
manage_script(
    action="create",
    name="PlayerController",
    path="Assets/Scripts/",
    contents='''using UnityEngine;

public class PlayerController : MonoBehaviour
{
    public float speed = 5f;
    
    void Update()
    {
        float horizontal = Input.GetAxis("Horizontal");
        float vertical = Input.GetAxis("Vertical");
        
        Vector3 movement = new Vector3(horizontal, 0, vertical) * speed * Time.deltaTime;
        transform.Translate(movement);
    }
}''',
    script_type="MonoBehaviour",
    namespace=""
)

# 读取现有脚本
manage_script(
    action="read",
    name="PlayerController",
    path="Assets/Scripts/",
    contents="",
    script_type="",
    namespace=""
)

# 更新脚本内容
manage_script(
    action="update",
    name="PlayerController",
    path="Assets/Scripts/",
    contents="// 更新后的代码内容",
    script_type="MonoBehaviour",
    namespace=""
)
```

---

## 8. 📋 read_console - Unity控制台读取工具

**功能**: 读取或清空Unity编辑器控制台消息。

### 参数
- `action` (string): 操作类型，默认'get'
- `types` (list): 消息类型列表，默认['error', 'warning', 'log']
- `count` (int): 最大返回消息数
- `filter_text` (string): 文本过滤器
- `since_timestamp` (string): 时间戳过滤器(ISO 8601格式)
- `format` (string): 输出格式，默认'detailed'
- `include_stacktrace` (bool): 是否包含堆栈跟踪，默认True

### 支持的操作 (action)
- `get` - 获取控制台消息
- `clear` - 清空控制台

### 消息类型 (types)
- `error` - 错误消息
- `warning` - 警告消息
- `log` - 日志消息
- `all` - 所有消息

### 输出格式 (format)
- `plain` - 纯文本格式
- `detailed` - 详细格式
- `json` - JSON格式

### 使用示例
```python
# 获取所有类型的最新10条消息
read_console(
    action="get",
    types=["error", "warning", "log"],
    count=10
)

# 只获取错误消息
read_console(
    action="get",
    types=["error"],
    include_stacktrace=True
)

# 按文本过滤消息
read_console(
    action="get",
    filter_text="NullReferenceException",
    types=["error"]
)

# 清空控制台
read_console(action="clear")

# 获取特定时间后的消息
read_console(
    action="get",
    since_timestamp="2024-01-01T10:00:00Z",
    format="json"
)
```

---

## 🎯 使用指南

### 1. 工具选择原则
- 单个函数调用使用 `function_call`
- 批量操作使用 `functions_call`
- 特定功能使用对应的专业工具

### 2. 错误处理
所有工具都返回标准格式：
```json
{
    "success": bool,
    "message": string,
    "data": object,
    "error": string  // 失败时存在
}
```

### 3. 路径约定
- 使用Unity标准路径格式：`Assets/Folder/File.extension`
- 路径分隔符使用正斜杠 `/`
- 相对于项目根目录的Assets文件夹

### 4. 最佳实践
- 在执行操作前使用 `read_console` 检查错误
- 使用 `manage_editor` 获取编辑器状态
- 创建资产前确保目标文件夹存在
- 批量操作时使用 `functions_call` 提高效率

### 5. 调试建议
- 使用 `read_console` 查看Unity控制台输出
- 检查返回值中的 `success` 字段
- 查看 `message` 和 `error` 字段获取详细信息 