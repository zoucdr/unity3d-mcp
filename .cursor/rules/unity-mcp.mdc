---
description: 当用户需要利用MCP操作Unity引擎时，请使用此规则集
alwaysApply: false
---
# Unity MCP 自定义工具规则

> 🎮 **什么时候使用**  
> 非mcp自带的工具请使用此规则集

## 📋 目录索引

### 🔧 核心工具 (FacadeTools)
- [extra_call](#extra_call---单次函数调用工具) - 单次函数调用
- [extra_batch_calls](#extra_batch_calls---批量函数调用工具) - 批量函数调用

### 🧩 功能模块 (MethodTools)
**🛠️ 调试工具**
- [gm_command](#gm_command---调试指令执行) - 

---

## 🔄 工具架构

### 双层调用架构
```
用户 → FacadeTools → MethodTools → Unity API
```

**FacadeTools** (2个)
- `extra_call` - 单次方法调用
- `extra_batch_calls` - 批量方法调用

**MethodTools** (1+个)  
专门的功能方法，仅通过FacadeTools调用，参数通过`args`字典传递。

> ⚠️ **重要提醒**: 除`extra_call`和`extra_batch_calls`外，其余均为方法名，不能直接被MCP调用。

---

## 🔧 FacadeTools

### extra_call - 单次函数调用工具
**功能**: 调用一次 Unity MCP 方法。

参数
- `func` (string, 必需): 方法名（见 Methods 列表）。
- `args` (dict, 必需): 传入方法的参数字典。

返回值格式
```json
{
  "success": true,
  "message": "...",
  "data": { },
  "error": ""
}
```

示例：创建一个 Cube
```python
extra_call(
  func="gm_command",
  args={"action": "go_home_scene"}
)
```

---
### extra_batch_calls - 批量函数调用工具
**功能**: 按顺序执行多个 Unity MCP 方法调用并收集所有返回值。

参数
- `funcs` (list): 函数调用列表。

参数格式
```python
[
  { "func": "gm_command", "args": {"action": "go_home_scene"} },
  { "func": "gm_command", "args": {"action": "task-cg","arg0":"t01"} },
]
```

返回值格式
```json
{
  "success": true,
  "results": [ ... ],
  "errors": [ ... ],
  "total_calls": 2,
  "successful_calls": 2,
  "failed_calls": 0
}
```

---

## 🧩 MethodTools
> 通过 FacadeTools： 调用以下方法：
> - 单次：使用 `extra_call`，设置 `func` 为方法名，`args` 为方法参数字典。
> - 批量：使用 `extra_batch_calls`，把多条 `{func, args}` 放入 `extra_calls`。

### gm_command - GM指令执行工具
**功能**: 执行游戏管理员(GM)相关指令，用于游戏开发和调试。

主要参数（放入 `args`）
- `action` (string): 操作类型，默认执行主要功能

支持的操作 (action)
- 默认操作 - 执行GM指令并返回测试响应

示例：执行默认GM指令
```python
extra_call(
  func="gm_command",
  args={"action": "default"}
)
```

返回值格式
```json
{
  "success": true,
  "message": "Test",
  "data": {}
}
```

注意：此工具当前处于测试阶段，主要用于验证GM指令系统的基础功能。